{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2022-12-29T02:44:00.171045Z", "invocation_id": "d3412429-52f8-4611-b699-d46b92378ada", "env": {}, "project_id": "76cebb2c444d72118969791fc106cde2", "user_id": "ef42a4c2-e372-4955-87c4-fbfb591adf63", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.terra.bronze__blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.chainwalkers.terra2_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "bronze", "fqn": ["terra", "bronze", "bronze__blocks"], "unique_id": "model.terra.bronze__blocks", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"terra2_blocks\"\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "2a41bced42d32871d7bc7dcb6445cfa2369371b6630d39010f910221ca7eb52d"}, "tags": [], "refs": [], "sources": [["chainwalkers", "terra2_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1672281842.044281, "compiled_code": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.terra2_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.bronze.blocks"}, "model.terra.bronze__transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.chainwalkers.terra2_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "bronze", "fqn": ["terra", "bronze", "bronze__transactions"], "unique_id": "model.terra.bronze__transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"chainwalkers\",\n        \"terra2_txs\"\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "d8fdddd3ed31c931d80f677977382516aaf6e2af6f588f3e20dd2b3da41b36e4"}, "tags": [], "refs": [], "sources": [["chainwalkers", "terra2_txs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1672281842.0608006, "compiled_code": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at AS _ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.terra2_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.bronze.transactions"}, "model.terra.classic__dim_validator_labels": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.validator_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_validator_labels"], "unique_id": "model.terra.classic__dim_validator_labels", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'validator_labels'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_validator_labels.sql", "original_file_path": "models/classic/classic__dim_validator_labels.sql", "name": "classic__dim_validator_labels", "alias": "dim_validator_labels", "checksum": {"name": "sha256", "checksum": "d311222ce7c5c63144721decd1b0a5feaeabf9392b6e5a87bea12dd09cee0165"}, "tags": [], "refs": [], "sources": [["terra", "validator_labels"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_validator_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.0689094, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.validator_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_validator_labels"}, "model.terra.classic__ez_staking": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.staking"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_staking"], "unique_id": "model.terra.classic__ez_staking", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'staking'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_staking.sql", "original_file_path": "models/classic/classic__ez_staking.sql", "name": "classic__ez_staking", "alias": "ez_staking", "checksum": {"name": "sha256", "checksum": "f8aed521ae0594a46e3a946e0e8fe6bb4ecab0925809bd9ceb59f73fef885ca4"}, "tags": [], "refs": [], "sources": [["terra", "staking"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.0778625, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.staking", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_staking"}, "model.terra.classic__ez_airdrop_claims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.airdrop_claims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_airdrop_claims"], "unique_id": "model.terra.classic__ez_airdrop_claims", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'airdrop_claims'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_airdrop_claims.sql", "original_file_path": "models/classic/classic__ez_airdrop_claims.sql", "name": "classic__ez_airdrop_claims", "alias": "ez_airdrop_claims", "checksum": {"name": "sha256", "checksum": "96b5be1e07b9d91e6c74cea12136224315e52d52aa2ee4798f473db58b9af4fb"}, "tags": [], "refs": [], "sources": [["terra", "airdrop_claims"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_airdrop_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.0858243, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.airdrop_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_airdrop_claims"}, "model.terra.classic__fact_transitions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.transitions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_transitions"], "unique_id": "model.terra.classic__fact_transitions", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'transitions'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_transitions.sql", "original_file_path": "models/classic/classic__fact_transitions.sql", "name": "classic__fact_transitions", "alias": "fact_transitions", "checksum": {"name": "sha256", "checksum": "bcf0857758286410fc05372167561ae8c3c65e1be13ea73c222c2cf57dbb2a97"}, "tags": [], "refs": [], "sources": [["terra_sv", "transitions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_transitions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.0938017, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.transitions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_transitions"}, "model.terra.classic__dim_daily_balances": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.daily_balances"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_daily_balances"], "unique_id": "model.terra.classic__dim_daily_balances", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'daily_balances'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_daily_balances.sql", "original_file_path": "models/classic/classic__dim_daily_balances.sql", "name": "classic__dim_daily_balances", "alias": "dim_daily_balances", "checksum": {"name": "sha256", "checksum": "442ca9d9b55879fb3c92f3aa27ed421c0c35702af958c9662ad5834fea473ee5"}, "tags": [], "refs": [], "sources": [["terra", "daily_balances"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_daily_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1016564, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.daily_balances", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_daily_balances"}, "model.terra.classic__fact_transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_transactions"], "unique_id": "model.terra.classic__fact_transactions", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'transactions'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_transactions.sql", "original_file_path": "models/classic/classic__fact_transactions.sql", "name": "classic__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "b6ac3a53974ae117a1edc6542ce68275afa3e2db323564e8d5a51ef46f907c93"}, "tags": [], "refs": [], "sources": [["terra_sv", "transactions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1096385, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_transactions"}, "model.terra.classic__dim_terraswap_pool_reserves": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.pool_reserves"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_terraswap_pool_reserves"], "unique_id": "model.terra.classic__dim_terraswap_pool_reserves", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'pool_reserves'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_terraswap_pool_reserves.sql", "original_file_path": "models/classic/classic__dim_terraswap_pool_reserves.sql", "name": "classic__dim_terraswap_pool_reserves", "alias": "dim_terraswap_pool_reserves", "checksum": {"name": "sha256", "checksum": "ec0583df0f7d77e6716d1a13036706bc3263277218b6fa05aeb3e7958012847d"}, "tags": [], "refs": [], "sources": [["terraswap", "pool_reserves"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_terraswap_pool_reserves.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.118705, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.pool_reserves", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_terraswap_pool_reserves"}, "model.terra.classic__ez_anchor_bonds": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.bonds"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_bonds"], "unique_id": "model.terra.classic__ez_anchor_bonds", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'bonds'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_bonds.sql", "original_file_path": "models/classic/classic__ez_anchor_bonds.sql", "name": "classic__ez_anchor_bonds", "alias": "ez_anchor_bonds", "checksum": {"name": "sha256", "checksum": "6c4ef6b297f8d32486b24fa8e82d9a2451045bd65bcc7eb212b01d0273529825"}, "tags": [], "refs": [], "sources": [["anchor", "bonds"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_bonds.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1263654, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.bonds", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_bonds"}, "model.terra.classic__ez_anchor_liquidations": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.liquidations"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_liquidations"], "unique_id": "model.terra.classic__ez_anchor_liquidations", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'liquidations'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_liquidations.sql", "original_file_path": "models/classic/classic__ez_anchor_liquidations.sql", "name": "classic__ez_anchor_liquidations", "alias": "ez_anchor_liquidations", "checksum": {"name": "sha256", "checksum": "d9c9dc825cc9dc000970a0838e385d911a9e9cd6552ef7b7061c85e8e24ef44e"}, "tags": [], "refs": [], "sources": [["anchor", "liquidations"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_liquidations.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1342244, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.liquidations", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_liquidations"}, "model.terra.classic__ez_anchor_repay": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.repay"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_repay"], "unique_id": "model.terra.classic__ez_anchor_repay", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'repay'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_repay.sql", "original_file_path": "models/classic/classic__ez_anchor_repay.sql", "name": "classic__ez_anchor_repay", "alias": "ez_anchor_repay", "checksum": {"name": "sha256", "checksum": "16a5e1e1e80ee0be7ac3f1cc382a2626a4d025c16f34af69929b82d823c09293"}, "tags": [], "refs": [], "sources": [["anchor", "repay"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_repay.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1418877, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.repay", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_repay"}, "model.terra.classic__ez_anchor_redeem": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.redeem"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_redeem"], "unique_id": "model.terra.classic__ez_anchor_redeem", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'redeem'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_redeem.sql", "original_file_path": "models/classic/classic__ez_anchor_redeem.sql", "name": "classic__ez_anchor_redeem", "alias": "ez_anchor_redeem", "checksum": {"name": "sha256", "checksum": "7d0d92b43961f3339cf261e2de4931c1df6b9990945b3418fbab4bf701aebe01"}, "tags": [], "refs": [], "sources": [["anchor", "redeem"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_redeem.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1509483, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.redeem", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_redeem"}, "model.terra.classic__ez_anchor_burns": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.burns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_burns"], "unique_id": "model.terra.classic__ez_anchor_burns", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'burns'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_burns.sql", "original_file_path": "models/classic/classic__ez_anchor_burns.sql", "name": "classic__ez_anchor_burns", "alias": "ez_anchor_burns", "checksum": {"name": "sha256", "checksum": "a4d2910ad2c099ac418305ddcdac9df668fc36e0dddad9166172db09d8b67753"}, "tags": [], "refs": [], "sources": [["anchor", "burns"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_burns.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1587682, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.burns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_burns"}, "model.terra.classic__ez_anchor_gov_vote": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_vote"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_vote"], "unique_id": "model.terra.classic__ez_anchor_gov_vote", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_vote'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_vote.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_vote.sql", "name": "classic__ez_anchor_gov_vote", "alias": "ez_anchor_gov_vote", "checksum": {"name": "sha256", "checksum": "bdbf8ed4a0e5f94f440bdc0ecc7c07041099197c4b2b4ae4679b194de252558c"}, "tags": [], "refs": [], "sources": [["anchor", "gov_vote"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_vote.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.166756, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_vote", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_vote"}, "model.terra.classic__fact_blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_blocks"], "unique_id": "model.terra.classic__fact_blocks", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'blocks'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_blocks.sql", "original_file_path": "models/classic/classic__fact_blocks.sql", "name": "classic__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "3931baf179af996f74665152b57c16ef92ca7a88dad53e89663fd218320e2282"}, "tags": [], "refs": [], "sources": [["terra_sv", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1746488, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_blocks"}, "model.terra.classic__ez_astroport_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.astroport.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_astroport_swaps"], "unique_id": "model.terra.classic__ez_astroport_swaps", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'astroport',\n        'swaps'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_astroport_swaps.sql", "original_file_path": "models/classic/classic__ez_astroport_swaps.sql", "name": "classic__ez_astroport_swaps", "alias": "ez_astroport_swaps", "checksum": {"name": "sha256", "checksum": "821748162e6bb0ab268a3e9ef70519b6b1eca91a7031573db7f06992bfff723f"}, "tags": [], "refs": [], "sources": [["astroport", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_astroport_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1826034, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.astroport.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_astroport_swaps"}, "model.terra.classic__ez_terraswap_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_swaps"], "unique_id": "model.terra.classic__ez_terraswap_swaps", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'swaps'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_swaps.sql", "original_file_path": "models/classic/classic__ez_terraswap_swaps.sql", "name": "classic__ez_terraswap_swaps", "alias": "ez_terraswap_swaps", "checksum": {"name": "sha256", "checksum": "a32ddfeb18eebc0b963b305f1fc9ec91c144c36db2bf2ea37ba2814fea59e844"}, "tags": [], "refs": [], "sources": [["terraswap", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1915433, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_swaps"}, "model.terra.classic__ez_anchor_reward_claims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.reward_claims"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_reward_claims"], "unique_id": "model.terra.classic__ez_anchor_reward_claims", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'reward_claims'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_reward_claims.sql", "original_file_path": "models/classic/classic__ez_anchor_reward_claims.sql", "name": "classic__ez_anchor_reward_claims", "alias": "ez_anchor_reward_claims", "checksum": {"name": "sha256", "checksum": "23f45fdb2a05be2d5224903a3b29a507d9a6f5a2feb551e4e6e4ed00a173f35d"}, "tags": [], "refs": [], "sources": [["anchor", "reward_claims"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_reward_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.1994846, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.reward_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_reward_claims"}, "model.terra.classic__ez_anchor_collateral": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.collateral"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_collateral"], "unique_id": "model.terra.classic__ez_anchor_collateral", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'collateral'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_collateral.sql", "original_file_path": "models/classic/classic__ez_anchor_collateral.sql", "name": "classic__ez_anchor_collateral", "alias": "ez_anchor_collateral", "checksum": {"name": "sha256", "checksum": "ff8f4d381df3eb516ffa3cea6a298ed5c9a122f5221a7515adf3b8ed32048e91"}, "tags": [], "refs": [], "sources": [["anchor", "collateral"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_collateral.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.207416, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.collateral", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_collateral"}, "model.terra.classic__dim_labels": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_labels"], "unique_id": "model.terra.classic__dim_labels", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'labels'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_labels.sql", "original_file_path": "models/classic/classic__dim_labels.sql", "name": "classic__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "e45e227ea583a6dd6dfe6472d65e51ff2667865c1aae1479bd10f4c8c29959c5"}, "tags": [], "refs": [], "sources": [["terra_sv", "labels"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.215381, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_labels"}, "model.terra.classic__ez_terraswap_lp_stake": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.lp_stake"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_lp_stake"], "unique_id": "model.terra.classic__ez_terraswap_lp_stake", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'lp_stake'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_lp_stake.sql", "original_file_path": "models/classic/classic__ez_terraswap_lp_stake.sql", "name": "classic__ez_terraswap_lp_stake", "alias": "ez_terraswap_lp_stake", "checksum": {"name": "sha256", "checksum": "b7671abc2037ef6c9996d4898706020bb63b756f5ac5954f6fa96016a19a36d4"}, "tags": [], "refs": [], "sources": [["terraswap", "lp_stake"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_lp_stake.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2235053, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.lp_stake", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_lp_stake"}, "model.terra.classic__ez_gov_vote": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.gov_vote"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_gov_vote"], "unique_id": "model.terra.classic__ez_gov_vote", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'gov_vote'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_gov_vote.sql", "original_file_path": "models/classic/classic__ez_gov_vote.sql", "name": "classic__ez_gov_vote", "alias": "ez_gov_vote", "checksum": {"name": "sha256", "checksum": "7175dc6d13482d7109214ab05c832efc29d29f9855d579ad5abb005f01ef5194"}, "tags": [], "refs": [], "sources": [["terra", "gov_vote"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_gov_vote.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.232996, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.gov_vote", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_gov_vote"}, "model.terra.classic__ez_anchor_gov_staking": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_staking"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_staking"], "unique_id": "model.terra.classic__ez_anchor_gov_staking", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_staking'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_staking.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_staking.sql", "name": "classic__ez_anchor_gov_staking", "alias": "ez_anchor_gov_staking", "checksum": {"name": "sha256", "checksum": "4876793afbe0f4d4b5c32a2ebd58d03421adc597bfefc8387504fa1ae246578a"}, "tags": [], "refs": [], "sources": [["anchor", "gov_staking"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.242615, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_staking", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_staking"}, "model.terra.classic__dim_validator_voting_power": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.validator_voting_power"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_validator_voting_power"], "unique_id": "model.terra.classic__dim_validator_voting_power", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'validator_voting_power'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_validator_voting_power.sql", "original_file_path": "models/classic/classic__dim_validator_voting_power.sql", "name": "classic__dim_validator_voting_power", "alias": "dim_validator_voting_power", "checksum": {"name": "sha256", "checksum": "7482fc01d7f46893e4b23dd1e2ac8990a3849e99036dbaaf7a9e853ba683e2e4"}, "tags": [], "refs": [], "sources": [["terra", "validator_voting_power"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_validator_voting_power.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2517638, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.validator_voting_power", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_validator_voting_power"}, "model.terra.classic__dim_oracle_prices": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.oracle_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_oracle_prices"], "unique_id": "model.terra.classic__dim_oracle_prices", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'oracle_prices'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_oracle_prices.sql", "original_file_path": "models/classic/classic__dim_oracle_prices.sql", "name": "classic__dim_oracle_prices", "alias": "dim_oracle_prices", "checksum": {"name": "sha256", "checksum": "2169baa9adf8c2b30ab2083425aa28f11f598a6b11f1be4841564506aa965f1e"}, "tags": [], "refs": [], "sources": [["terra", "oracle_prices"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_oracle_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2606952, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.oracle_prices", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_oracle_prices"}, "model.terra.classic__fact_messages": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.msgs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_messages"], "unique_id": "model.terra.classic__fact_messages", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'msgs'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_messages.sql", "original_file_path": "models/classic/classic__fact_messages.sql", "name": "classic__fact_messages", "alias": "fact_messages", "checksum": {"name": "sha256", "checksum": "280cd7e45af0f554d395875121b591bf24e3bc477ae88ba013089c18c1cf39f2"}, "tags": [], "refs": [], "sources": [["terra_sv", "msgs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2691886, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.msgs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_messages"}, "model.terra.classic__ez_transfers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_transfers"], "unique_id": "model.terra.classic__ez_transfers", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'transfers'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_transfers.sql", "original_file_path": "models/classic/classic__ez_transfers.sql", "name": "classic__ez_transfers", "alias": "ez_transfers", "checksum": {"name": "sha256", "checksum": "db3829d8b6fb15b027814846ad1bf41d5740598ca76430e0dbf49f0259339cf2"}, "tags": [], "refs": [], "sources": [["terra", "transfers"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2784405, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_transfers"}, "model.terra.classic__fact_message_events": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra_sv.msg_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__fact_message_events"], "unique_id": "model.terra.classic__fact_message_events", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra_sv',\n        'msg_events'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__fact_message_events.sql", "original_file_path": "models/classic/classic__fact_message_events.sql", "name": "classic__fact_message_events", "alias": "fact_message_events", "checksum": {"name": "sha256", "checksum": "47b6b151bd9ee2e00e1fb285704307fe29c7981aefb66aa79c8ac4f734da58ec"}, "tags": [], "refs": [], "sources": [["terra_sv", "msg_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__fact_message_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.2861447, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra_sv.msg_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.fact_message_events"}, "model.terra.classic__dim_tax_rate": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.tax_rate"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_tax_rate"], "unique_id": "model.terra.classic__dim_tax_rate", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'tax_rate'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_tax_rate.sql", "original_file_path": "models/classic/classic__dim_tax_rate.sql", "name": "classic__dim_tax_rate", "alias": "dim_tax_rate", "checksum": {"name": "sha256", "checksum": "4a779a2f4c9327d30028c962b896db2d5d3f6d9928fed287b119c41e94d8b0a8"}, "tags": [], "refs": [], "sources": [["terra", "tax_rate"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_tax_rate.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.293837, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.tax_rate", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_tax_rate"}, "model.terra.classic__ez_anchor_borrows": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.borrows"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_borrows"], "unique_id": "model.terra.classic__ez_anchor_borrows", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'borrows'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_borrows.sql", "original_file_path": "models/classic/classic__ez_anchor_borrows.sql", "name": "classic__ez_anchor_borrows", "alias": "ez_anchor_borrows", "checksum": {"name": "sha256", "checksum": "ca84a425e4ccb3c425e0cd5db87ba69eb1540ca1be096a6d3d10765534460d7e"}, "tags": [], "refs": [], "sources": [["anchor", "borrows"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_borrows.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.3016064, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.borrows", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_borrows"}, "model.terra.classic__ez_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_swaps"], "unique_id": "model.terra.classic__ez_swaps", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'swaps'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_swaps.sql", "original_file_path": "models/classic/classic__ez_swaps.sql", "name": "classic__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "5301e32b2e424629d86fa87256fd35b085b9b045b65583c82ce1d428839ce1d5"}, "tags": [], "refs": [], "sources": [["terra", "swaps"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.310117, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_swaps"}, "model.terra.classic__ez_anchor_gov_submit_proposal": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.gov_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_gov_submit_proposal"], "unique_id": "model.terra.classic__ez_anchor_gov_submit_proposal", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'gov_submit_proposal'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_gov_submit_proposal.sql", "original_file_path": "models/classic/classic__ez_anchor_gov_submit_proposal.sql", "name": "classic__ez_anchor_gov_submit_proposal", "alias": "ez_anchor_gov_submit_proposal", "checksum": {"name": "sha256", "checksum": "fe39346159bcc7c51902263d6eb79945bae9a2b172a1058a51bd01c0f5be3ee8"}, "tags": [], "refs": [], "sources": [["anchor", "gov_submit_proposal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_gov_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.3176806, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.gov_submit_proposal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_gov_submit_proposal"}, "model.terra.classic__ez_anchor_deposits": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.anchor.deposits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_anchor_deposits"], "unique_id": "model.terra.classic__ez_anchor_deposits", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'anchor',\n        'deposits'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_anchor_deposits.sql", "original_file_path": "models/classic/classic__ez_anchor_deposits.sql", "name": "classic__ez_anchor_deposits", "alias": "ez_anchor_deposits", "checksum": {"name": "sha256", "checksum": "3ca9bbf3778d6e828f0f76a6355719b5145d2a6ce25f922709931be3935f33ba"}, "tags": [], "refs": [], "sources": [["anchor", "deposits"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_anchor_deposits.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.325121, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.anchor.deposits", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_anchor_deposits"}, "model.terra.classic__ez_gov_submit_proposal": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.gov_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_gov_submit_proposal"], "unique_id": "model.terra.classic__ez_gov_submit_proposal", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'gov_submit_proposal'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_gov_submit_proposal.sql", "original_file_path": "models/classic/classic__ez_gov_submit_proposal.sql", "name": "classic__ez_gov_submit_proposal", "alias": "ez_gov_submit_proposal", "checksum": {"name": "sha256", "checksum": "62b5b3ee233a61c64eef76168ac5c716749bb74e6373f80300f50c80c377e85b"}, "tags": [], "refs": [], "sources": [["terra", "gov_submit_proposal"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_gov_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.332798, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.gov_submit_proposal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_gov_submit_proposal"}, "model.terra.classic__ez_terraswap_lp_actions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terraswap.lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_terraswap_lp_actions"], "unique_id": "model.terra.classic__ez_terraswap_lp_actions", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terraswap',\n        'lp_actions'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_terraswap_lp_actions.sql", "original_file_path": "models/classic/classic__ez_terraswap_lp_actions.sql", "name": "classic__ez_terraswap_lp_actions", "alias": "ez_terraswap_lp_actions", "checksum": {"name": "sha256", "checksum": "ab27a74e1620ce97283aa1f3efe785156257868532ec3c0fb3b46e22722a339f"}, "tags": [], "refs": [], "sources": [["terraswap", "lp_actions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_terraswap_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.340334, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terraswap.lp_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_terraswap_lp_actions"}, "model.terra.classic__ez_reward": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.reward"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__ez_reward"], "unique_id": "model.terra.classic__ez_reward", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'reward'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__ez_reward.sql", "original_file_path": "models/classic/classic__ez_reward.sql", "name": "classic__ez_reward", "alias": "ez_reward", "checksum": {"name": "sha256", "checksum": "ff6529b90231810561486607094d9e7363b37834d946b439340b1ae344ccac47"}, "tags": [], "refs": [], "sources": [["terra", "reward"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__ez_reward.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.3490756, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.reward", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.ez_reward"}, "model.terra.classic__dim_astroport_pool_reserves": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.astroport.pool_reserves"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_astroport_pool_reserves"], "unique_id": "model.terra.classic__dim_astroport_pool_reserves", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'astroport',\n        'pool_reserves'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_astroport_pool_reserves.sql", "original_file_path": "models/classic/classic__dim_astroport_pool_reserves.sql", "name": "classic__dim_astroport_pool_reserves", "alias": "dim_astroport_pool_reserves", "checksum": {"name": "sha256", "checksum": "23cf02b7afd157d07a9717822d827cb09a2eaa9fa1e23c08fafddbbf935d5413"}, "tags": [], "refs": [], "sources": [["astroport", "pool_reserves"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_astroport_pool_reserves.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.356542, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.astroport.pool_reserves", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_astroport_pool_reserves"}, "model.terra.classic__dim_nft_metadata": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.terra.nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": "true", "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "classic", "fqn": ["terra", "classic", "classic__dim_nft_metadata"], "unique_id": "model.terra.classic__dim_nft_metadata", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = 'true'\n) }}\n\nSELECT\n    *\nFROM\n    {{ source(\n        'terra',\n        'nft_metadata'\n    ) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "classic/classic__dim_nft_metadata.sql", "original_file_path": "models/classic/classic__dim_nft_metadata.sql", "name": "classic__dim_nft_metadata", "alias": "dim_nft_metadata", "checksum": {"name": "sha256", "checksum": "543c95a97d22e4319370dca659c717928137f72ef53a98e93c9b189509e7060e"}, "tags": [], "refs": [], "sources": [["terra", "nft_metadata"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/classic/classic__dim_nft_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": "true"}, "created_at": 1672281842.3640811, "compiled_code": "\n\nSELECT\n    *\nFROM\n    flipside_prod_db.terra.nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.classic.dim_nft_metadata"}, "model.terra.silver__dex_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "SWAP_ID", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__dex_swaps"], "unique_id": "model.terra.silver__dex_swaps", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        unique_key=\"SWAP_ID\",\n        incremental_strategy=\"delete+insert\",\n        cluster_by=[\"block_timestamp::DATE\", \"_inserted_timestamp::DATE\"],\n    )\n}}\n\n\n\n\nwith\n    swap as (\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            'Terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            message_index as msg_index,\n            message_value:msg:swap:offer_asset:amount::integer as from_amount,\n            coalesce(\n                attributes:coin_received:currency_0::string,\n                attributes:coin_received:currency::string\n            ) as from_currency,\n            6 ::integer as from_decimal,\n            coalesce(\n                attributes:coin_received:amount_1::integer,\n                attributes:wasm:return_amount::integer\n            ) as to_amount,\n            attributes:wasm:ask_asset::string as to_currency,\n            6 ::integer as to_decimal,\n            message_value:contract::string as contract_address\n\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%msgexecutecontract%'\n            and message_value:msg:swap is not null\n            and {{ incremental_load_filter('_inserted_timestamp') }}\n\n    ),\n    execute_swap_operations as (\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            'Terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            message_index as msg_index,\n            coalesce(\n                attributes:wasm:amount_0::integer,\n                attributes:coin_received:amount_1::integer,\n                attributes:coin_received:amount_2::integer\n            ) as from_amount,\n            coalesce(\n                attributes:coin_received:currency_0::string,\n                attributes:wasm:ask_asset_0::string\n            ) as from_currency,\n            6::integer as from_decimal,\n            coalesce(\n                attributes:wasm:return_amount_1::integer,\n                attributes:wasm:return_amount::integer,\n                attributes:coin_received:amount_5::integer,\n                attributes:coin_received:amount_2::integer\n            ) as to_amount,\n            coalesce(\n                attributes:coin_received:currency_2::string,\n                attributes:coin_received:currency_1::string\n            ) as to_currency,\n            6 :: INTEGER as to_decimal,\n            message_value:contract::string as contract_address\n\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%msgexecutecontract%'\n            and message_value:msg:execute_swap_operations is not null\n            and {{ incremental_load_filter('_inserted_timestamp') }}\n\n    ),\n\n    union_swaps as (\n\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            msg_index,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address\n        from swap\n        union all\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            msg_index,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address\n        from execute_swap_operations\n\n    ),\n\n    transactions as (\n        select \n            tx_id,\n            tx_sender \n        from {{ref ('silver__transactions')}}\n        WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n    ),\n\n    final_table as (\n\n        select distinct\n            CONCAT_WS ('-', s.tx_id, msg_index, s.contract_address) as swap_id,\n            s.block_id,\n            s.block_timestamp,\n            s._inserted_timestamp,\n            s.blockchain,\n            s.chain_id,\n            s.tx_id,\n            s.tx_succeeded,\n            t.tx_sender as trader,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address as pool_id\n        from union_swaps s\n        left outer join transactions t on s.tx_id = t.tx_id\n        \n\n\n    )\n\nselect *\nfrom final_table", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__dex_swaps.sql", "original_file_path": "models/silver/silver__dex_swaps.sql", "name": "silver__dex_swaps", "alias": "dex_swaps", "checksum": {"name": "sha256", "checksum": "009386b243c593abc2cbf854326ec57dc47381ffae58b65d86974ba016883675"}, "tags": [], "refs": [["silver__messages"], ["silver__messages"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_currency": {"name": "from_currency", "description": "The currency that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trader": {"name": "trader", "description": "The address of the user that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_amount": {"name": "from_amount", "description": "The amount that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_decimal": {"name": "from_decimal", "description": "Divide the swap_from_amount by POW(10, swap_from_decimal) to get the amount the user swapped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_amount": {"name": "to_amount", "description": "The amount that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_currency": {"name": "to_currency", "description": "The currency that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_decimal": {"name": "to_decimal", "description": "Divide the swap_to_amount by POW(10, swap_to_decimal) to get the amount the user received.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_ids": {"name": "pool_ids", "description": "Identifier for the pool within the module", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__dex_swaps.yml", "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "unique_key": "SWAP_ID", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1672281842.9164248, "compiled_code": "\n\n\n\n\nwith\n    swap as (\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            'Terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            message_index as msg_index,\n            message_value:msg:swap:offer_asset:amount::integer as from_amount,\n            coalesce(\n                attributes:coin_received:currency_0::string,\n                attributes:coin_received:currency::string\n            ) as from_currency,\n            6 ::integer as from_decimal,\n            coalesce(\n                attributes:coin_received:amount_1::integer,\n                attributes:wasm:return_amount::integer\n            ) as to_amount,\n            attributes:wasm:ask_asset::string as to_currency,\n            6 ::integer as to_decimal,\n            message_value:contract::string as contract_address\n\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%msgexecutecontract%'\n            and message_value:msg:swap is not null\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.dex_swaps\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.dex_swaps\n)\n\n    ),\n    execute_swap_operations as (\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            'Terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            message_index as msg_index,\n            coalesce(\n                attributes:wasm:amount_0::integer,\n                attributes:coin_received:amount_1::integer,\n                attributes:coin_received:amount_2::integer\n            ) as from_amount,\n            coalesce(\n                attributes:coin_received:currency_0::string,\n                attributes:wasm:ask_asset_0::string\n            ) as from_currency,\n            6::integer as from_decimal,\n            coalesce(\n                attributes:wasm:return_amount_1::integer,\n                attributes:wasm:return_amount::integer,\n                attributes:coin_received:amount_5::integer,\n                attributes:coin_received:amount_2::integer\n            ) as to_amount,\n            coalesce(\n                attributes:coin_received:currency_2::string,\n                attributes:coin_received:currency_1::string\n            ) as to_currency,\n            6 :: INTEGER as to_decimal,\n            message_value:contract::string as contract_address\n\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%msgexecutecontract%'\n            and message_value:msg:execute_swap_operations is not null\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.dex_swaps\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.dex_swaps\n)\n\n    ),\n\n    union_swaps as (\n\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            msg_index,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address\n        from swap\n        union all\n        select\n            block_id,\n            block_timestamp,\n            _inserted_timestamp,\n            blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            msg_index,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address\n        from execute_swap_operations\n\n    ),\n\n    transactions as (\n        select \n            tx_id,\n            tx_sender \n        from TERRA_DEV.silver.transactions\n        WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.dex_swaps\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.dex_swaps\n)\n    ),\n\n    final_table as (\n\n        select distinct\n            CONCAT_WS ('-', s.tx_id, msg_index, s.contract_address) as swap_id,\n            s.block_id,\n            s.block_timestamp,\n            s._inserted_timestamp,\n            s.blockchain,\n            s.chain_id,\n            s.tx_id,\n            s.tx_succeeded,\n            t.tx_sender as trader,\n            from_amount,\n            from_currency,\n            from_decimal,\n            to_amount,\n            to_currency,\n            to_decimal,\n            contract_address as pool_id\n        from union_swaps s\n        left outer join transactions t on s.tx_id = t.tx_id\n        \n\n\n    )\n\nselect *\nfrom final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.dex_swaps"}, "model.terra.silver__msg_attributes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "message_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__msg_attributes"], "unique_id": "model.terra.silver__msg_attributes", "raw_code": "{{ config(\n  materialized = \"incremental\",\n  cluster_by = [\"_inserted_timestamp\"],\n  unique_key = \"message_id\",\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH txs AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref(\"silver__transactions\") }}\n  WHERE\n    {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nflatten_txs AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    'terra' AS blockchain,\n    block_id,\n    tx,\n    tx_succeeded,\n    VALUE :events AS logs,\n    VALUE :msg_index :: NUMBER AS msg_index,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :tx_result :log\n    )\n),\nblock_table AS (\n  SELECT\n    block_id,\n    chain_id\n  FROM\n    {{ ref(\"silver__blocks\") }}\n  WHERE\n    {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nmsg_table AS (\n  SELECT\n    flatten_txs.block_id,\n    flatten_txs.block_timestamp,\n    flatten_txs.blockchain,\n    flatten_txs.tx_id,\n    flatten_txs.tx_succeeded,\n    flatten_log.value AS msg,\n    msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    msg :attributes [0] :key :: STRING AS attribute_key,\n    msg :attributes [0] :value :: STRING AS attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    flatten_txs,\n    LATERAL FLATTEN(\n      input => logs\n    ) AS flatten_log\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    msg_table\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\ncombined AS (\n  SELECT\n    msg_table.tx_id,\n    msg_table.msg_index,\n    RANK() over(\n      PARTITION BY msg_table.tx_id,\n      msg_table.msg_group\n      ORDER BY\n        msg_table.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    msg_table\n    INNER JOIN exec_actions AS exec_action\n    ON msg_table.tx_id = exec_action.tx_id\n    AND msg_table.msg_group = exec_action.msg_group\n  WHERE\n    msg_table.is_module = 'TRUE'\n    AND msg_table.msg_type = 'message'\n),\nadd_chain_id AS (\n  SELECT\n    msg_t.block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    msg_t.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          comb.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY msg_t.tx_id,\n          msg_group\n          ORDER BY\n            msg_t.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    msg_t.msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_table AS msg_t\n    LEFT JOIN combined AS comb\n    ON msg_t.tx_id = comb.tx_id\n    AND msg_t.msg_index = comb.msg_index\n    JOIN block_table AS blk\n    ON msg_t.block_id = blk.block_id\n),\nfinal_msg_table AS (\n  SELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    concat_ws(\n      ':',\n      msg_group,\n      msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    add_chain_id\n),\nmsg_attribute AS (\n  SELECT\n    ROW_NUMBER() over (\n      PARTITION BY tx_id\n      ORDER BY\n        tx_id\n    ) AS unique_number,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    attr.index AS attribute_index,\n    attr.value :key :: STRING AS attribute_key,\n    attr.value :value :: STRING AS attribute_value,\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      attribute_index\n    ) AS message_id,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    final_msg_table AS fmt,\n    LATERAL FLATTEN(\n      input => fmt.msg,\n      path => 'attributes'\n    ) AS attr\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      attribute_index,\n      unique_number\n    ) AS message_id,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_attribute\n)\nSELECT\n  *\nFROM\n  FINAL", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__msg_attributes.sql", "original_file_path": "models/silver/silver__msg_attributes.sql", "name": "silver__msg_attributes", "alias": "msg_attributes", "checksum": {"name": "sha256", "checksum": "fc94f257855fa27b24bed6ac517503d71df0b3769224d6d6a71c73fe7d088ce9"}, "tags": [], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains all the messages attributes and their events of the Terra2 blockchain.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_KEY": {"name": "ATTRIBUTE_KEY", "description": "The key from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_VALUE": {"name": "ATTRIBUTE_VALUE", "description": "The value from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_INDEX": {"name": "ATTRIBUTE_INDEX", "description": "The position in which attributes occur within a message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__msg_attributes.yml", "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "message_id", "incremental_strategy": "delete+insert"}, "created_at": 1672281843.413758, "compiled_code": "\n\nWITH txs AS (\n\n  SELECT\n    *\n  FROM\n    TERRA_DEV.silver.transactions\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.msg_attributes\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.msg_attributes\n)\n),\nflatten_txs AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    'terra' AS blockchain,\n    block_id,\n    tx,\n    tx_succeeded,\n    VALUE :events AS logs,\n    VALUE :msg_index :: NUMBER AS msg_index,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :tx_result :log\n    )\n),\nblock_table AS (\n  SELECT\n    block_id,\n    chain_id\n  FROM\n    TERRA_DEV.silver.blocks\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.msg_attributes\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.msg_attributes\n)\n),\nmsg_table AS (\n  SELECT\n    flatten_txs.block_id,\n    flatten_txs.block_timestamp,\n    flatten_txs.blockchain,\n    flatten_txs.tx_id,\n    flatten_txs.tx_succeeded,\n    flatten_log.value AS msg,\n    msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    msg :attributes [0] :key :: STRING AS attribute_key,\n    msg :attributes [0] :value :: STRING AS attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    flatten_txs,\n    LATERAL FLATTEN(\n      input => logs\n    ) AS flatten_log\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    msg_table\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\ncombined AS (\n  SELECT\n    msg_table.tx_id,\n    msg_table.msg_index,\n    RANK() over(\n      PARTITION BY msg_table.tx_id,\n      msg_table.msg_group\n      ORDER BY\n        msg_table.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    msg_table\n    INNER JOIN exec_actions AS exec_action\n    ON msg_table.tx_id = exec_action.tx_id\n    AND msg_table.msg_group = exec_action.msg_group\n  WHERE\n    msg_table.is_module = 'TRUE'\n    AND msg_table.msg_type = 'message'\n),\nadd_chain_id AS (\n  SELECT\n    msg_t.block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    msg_t.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          comb.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY msg_t.tx_id,\n          msg_group\n          ORDER BY\n            msg_t.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    msg_t.msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_table AS msg_t\n    LEFT JOIN combined AS comb\n    ON msg_t.tx_id = comb.tx_id\n    AND msg_t.msg_index = comb.msg_index\n    JOIN block_table AS blk\n    ON msg_t.block_id = blk.block_id\n),\nfinal_msg_table AS (\n  SELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    concat_ws(\n      ':',\n      msg_group,\n      msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    add_chain_id\n),\nmsg_attribute AS (\n  SELECT\n    ROW_NUMBER() over (\n      PARTITION BY tx_id\n      ORDER BY\n        tx_id\n    ) AS unique_number,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    attr.index AS attribute_index,\n    attr.value :key :: STRING AS attribute_key,\n    attr.value :value :: STRING AS attribute_value,\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      attribute_index\n    ) AS message_id,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    final_msg_table AS fmt,\n    LATERAL FLATTEN(\n      input => fmt.msg,\n      path => 'attributes'\n    ) AS attr\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      attribute_index,\n      unique_number\n    ) AS message_id,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_attribute\n)\nSELECT\n  *\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.msg_attributes"}, "model.terra.silver__nft_mints": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "mint_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__nft_mints"], "unique_id": "model.terra.silver__nft_mints", "raw_code": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp\"],\n    unique_key = \"mint_id\",\n) }}\n\n\nwith\n    nft_mints as (\n        select\n            block_id,\n            block_timestamp,\n            'terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            case\n                when attributes:wasm:_contract_address is not null\n                then attributes:wasm:_contract_address::string\n                when attributes:wasm:_contract_address_1 is not null\n                then attributes:wasm:_contract_address_1::string\n                when\n                    message_value:msg:mint:mint_request:nft_contract is not null\n                then message_value:msg:mint:mint_request:nft_contract::string\n                else null\n            end as contract_address,\n            message_value:msg:mint as mint_obj,\n            attributes,\n            nullif(message_value:funds[0]:amount::bigint, 0) as mint_price,\n            message_value:sender::string as minter,\n            attributes:wasm:token_id::string as token_id,\n            attributes:coin_spent:currency_0::string as currency,\n            null as decimals,\n            row_number() over (\n                partition by tx_id order by _inserted_timestamp desc\n            ) as index,\n            concat(tx_id, '-', index) as mint_id,\n            _ingested_at,\n            _inserted_timestamp\n        from  {{ ref('silver__messages') }}\n        where\n            (\n                message_value:msg:mint:extension is not null\n                or message_value:msg:mint:metadata_uri is not null\n                or message_value:msg:mint:mint_request is not null\n                or message_value:msg:mint:metadata is not null\n            )\n            and message_type != '/cosmwasm.wasm.v1.MsgInstantiateContract'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n    )\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    contract_address,\n    mint_price,\n    minter,\n    token_id,\n    currency,\n    decimals,\n    mint_id,\n    _ingested_at,\n    _inserted_timestamp\nfrom nft_mints", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__nft_mints.sql", "original_file_path": "models/silver/silver__nft_mints.sql", "name": "silver__nft_mints", "alias": "nft_mints", "checksum": {"name": "sha256", "checksum": "68395b1f3d0bdeb8c52249b1174c3e131e227e634384368d93f6fccd3146a117"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table records all the nft mints transfer in the terra db", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINTER": {"name": "MINTER", "description": "The wallet address of the user that minted the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The contract address of the NFT project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The ID of the NFT that was sold", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "The price of the mint in tokens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_ID": {"name": "MINT_ID", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__nft_mints.yml", "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "mint_id"}, "created_at": 1672281843.7230124, "compiled_code": "\n\n\nwith\n    nft_mints as (\n        select\n            block_id,\n            block_timestamp,\n            'terra' as blockchain,\n            chain_id,\n            tx_id,\n            tx_succeeded,\n            case\n                when attributes:wasm:_contract_address is not null\n                then attributes:wasm:_contract_address::string\n                when attributes:wasm:_contract_address_1 is not null\n                then attributes:wasm:_contract_address_1::string\n                when\n                    message_value:msg:mint:mint_request:nft_contract is not null\n                then message_value:msg:mint:mint_request:nft_contract::string\n                else null\n            end as contract_address,\n            message_value:msg:mint as mint_obj,\n            attributes,\n            nullif(message_value:funds[0]:amount::bigint, 0) as mint_price,\n            message_value:sender::string as minter,\n            attributes:wasm:token_id::string as token_id,\n            attributes:coin_spent:currency_0::string as currency,\n            null as decimals,\n            row_number() over (\n                partition by tx_id order by _inserted_timestamp desc\n            ) as index,\n            concat(tx_id, '-', index) as mint_id,\n            _ingested_at,\n            _inserted_timestamp\n        from  TERRA_DEV.silver.messages\n        where\n            (\n                message_value:msg:mint:extension is not null\n                or message_value:msg:mint:metadata_uri is not null\n                or message_value:msg:mint:mint_request is not null\n                or message_value:msg:mint:metadata is not null\n            )\n            and message_type != '/cosmwasm.wasm.v1.MsgInstantiateContract'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.nft_mints\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.nft_mints\n)\n    )\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    contract_address,\n    mint_price,\n    minter,\n    token_id,\n    currency,\n    decimals,\n    mint_id,\n    _ingested_at,\n    _inserted_timestamp\nfrom nft_mints", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.nft_mints"}, "model.terra.silver__lp_actions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.core__dim_address_labels", "model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "action_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__lp_actions"], "unique_id": "model.terra.silver__lp_actions", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        cluster_by=[\"_inserted_timestamp\"],\n        unique_key=\"action_id\",\n    )\n}}\n\nwith\n    pools as (\n        select *\n        from {{ ref(\"core__dim_address_labels\") }}\n        where label_subtype = 'pool'\n    ),\n    prelim_table as (\n        select\n            block_id,\n            block_timestamp,\n            'terra' as blockchain,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_value,\n            message_type,\n            message_index,\n            nullif(\n                message_value:contract, message_value:msg:send:contract\n            )::string as pool_address,\n            message_value:sender::string as liquidity_provider_address,\n            attributes,\n            path,\n            value::string as obj_value,\n            _ingested_at,\n            _inserted_timestamp\n        from\n            {{ ref(\"silver__messages\") }},\n            lateral flatten(input => attributes:wasm)\n        where\n            attributes:wasm is not null\n            and message_type = '/cosmwasm.wasm.v1.MsgExecuteContract'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n    ),\n    intermediate_table as (\n        select prelim_table.*, label\n        from prelim_table\n        join pools on prelim_table.pool_address = pools.address\n    ),\nfinal_table as (\n    select\n    block_id,\n    block_timestamp,\n    blockchain,\n    row_number() over (\n        partition by tx_id order by _inserted_timestamp desc\n    ) as action_index,\n    concat(tx_id, '-', action_index -1) as action_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    case\n        when path = 'refund_assets'\n        then 'withdraw_liquidity'\n        when path = 'assets'\n        then 'provide_liquidity'\n        when path = 'withdrawn_share'\n        then 'burn_lp_token'\n        when path = 'share'\n        then 'mint_lp_token'\n        else null\n    end as action,\n    regexp_substr(value, '[0-9]+')::bigint as amount,\n    iff(\n        path in ('withdrawn_share', 'share'),\n        label,\n        regexp_substr(value, '[^[:digit:]](.*)')\n    ) as currency,\n    null as decimals,\n    _ingested_at,\n    _inserted_timestamp\nfrom\n    intermediate_table,\n    lateral split_to_table(intermediate_table.obj_value, ', ')\nwhere\n    tx_id in (\n        select tx_id\n        from intermediate_table\n        where obj_value in ('provide_liquidity', 'withdraw_liquidity')\n    )\n    and path in ('refund_assets', 'withdrawn_share', 'share', 'assets')\n)\n\nselect \n    block_id,\n    block_timestamp,\n    action_id,\n    tx_id,\n    tx_succeeded,\n    blockchain,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    action,\n    amount,\n    currency,\n    decimals,\n    _ingested_at,\n    _inserted_timestamp\nfrom\n    final_table", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__lp_actions.sql", "original_file_path": "models/silver/silver__lp_actions.sql", "name": "silver__lp_actions", "alias": "lp_actions", "checksum": {"name": "sha256", "checksum": "dba468d3983417e56df31d19d25a692f8692f3e22422ba61b77d1f7d6c69d3d8"}, "tags": [], "refs": [["core__dim_address_labels"], ["silver__messages"]], "sources": [], "metrics": [], "description": "This table contains actions on liquidity pools (LP) that impact liquidity.\nThese include the creation of LP tokens for providing liquidity, and the\nburning of LP tokens for withdrawing liquidity.", "columns": {"action_id": {"name": "action_id", "description": "The unique key of this liquidity pool action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liquidity_provider_address": {"name": "liquidity_provider_address", "description": "The address of the account providing or withdrawing liquidity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The action performed toward the liquidity pool.\n\nCan be either of:\n\n- 'burn_lp_token' - a burning of `amount` number of `currency`\n- 'mint_lp_token' - a minting of `amount` number of `currency`\n- 'provide_liquidity' - a deposit of `amount` number of `currency` into the pool\n- 'withdraw_liquidity' - a withdraw of `amount` number of `currency` from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "The address of the liquidity pool contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount involved in this liquidity pool action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__lp_actions.yml", "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "action_id"}, "created_at": 1672281844.4871662, "compiled_code": "\n\nwith\n    pools as (\n        select *\n        from TERRA_DEV.core.dim_address_labels\n        where label_subtype = 'pool'\n    ),\n    prelim_table as (\n        select\n            block_id,\n            block_timestamp,\n            'terra' as blockchain,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_value,\n            message_type,\n            message_index,\n            nullif(\n                message_value:contract, message_value:msg:send:contract\n            )::string as pool_address,\n            message_value:sender::string as liquidity_provider_address,\n            attributes,\n            path,\n            value::string as obj_value,\n            _ingested_at,\n            _inserted_timestamp\n        from\n            TERRA_DEV.silver.messages,\n            lateral flatten(input => attributes:wasm)\n        where\n            attributes:wasm is not null\n            and message_type = '/cosmwasm.wasm.v1.MsgExecuteContract'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.lp_actions\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.lp_actions\n)\n    ),\n    intermediate_table as (\n        select prelim_table.*, label\n        from prelim_table\n        join pools on prelim_table.pool_address = pools.address\n    ),\nfinal_table as (\n    select\n    block_id,\n    block_timestamp,\n    blockchain,\n    row_number() over (\n        partition by tx_id order by _inserted_timestamp desc\n    ) as action_index,\n    concat(tx_id, '-', action_index -1) as action_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    case\n        when path = 'refund_assets'\n        then 'withdraw_liquidity'\n        when path = 'assets'\n        then 'provide_liquidity'\n        when path = 'withdrawn_share'\n        then 'burn_lp_token'\n        when path = 'share'\n        then 'mint_lp_token'\n        else null\n    end as action,\n    regexp_substr(value, '[0-9]+')::bigint as amount,\n    iff(\n        path in ('withdrawn_share', 'share'),\n        label,\n        regexp_substr(value, '[^[:digit:]](.*)')\n    ) as currency,\n    null as decimals,\n    _ingested_at,\n    _inserted_timestamp\nfrom\n    intermediate_table,\n    lateral split_to_table(intermediate_table.obj_value, ', ')\nwhere\n    tx_id in (\n        select tx_id\n        from intermediate_table\n        where obj_value in ('provide_liquidity', 'withdraw_liquidity')\n    )\n    and path in ('refund_assets', 'withdrawn_share', 'share', 'assets')\n)\n\nselect \n    block_id,\n    block_timestamp,\n    action_id,\n    tx_id,\n    tx_succeeded,\n    blockchain,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    action,\n    amount,\n    currency,\n    decimals,\n    _ingested_at,\n    _inserted_timestamp\nfrom\n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.lp_actions"}, "model.terra.silver__token_labels": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "address", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__token_labels"], "unique_id": "model.terra.silver__token_labels", "raw_code": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp::DATE\"],\n    unique_key = \"address\",\n) }}\n\nWITH token_labels AS (\n\n    SELECT\n        block_timestamp,\n        tx_id,\n        message_value :msg :name :: STRING AS label,\n        message_value :msg :symbol :: STRING AS symbol,\n        IFF(\n            attributes :instantiate :_contract_address IS NOT NULL,\n            attributes :instantiate :_contract_address,\n            attributes :reply :_contract_address\n        ) :: STRING AS address,\n        message_value :msg :decimals :: INT AS decimals,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"silver__messages\") }}\n    WHERE\n        message_value :msg :decimals IS NOT NULL\n        AND {{ incremental_load_filter(\"_inserted_timestamp\") }}\n)\nSELECT\n    'terra' as blockchain,\n    block_timestamp,\n    tx_id,\n    label,\n    symbol,\n    address,\n    decimals,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    token_labels", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__token_labels.sql", "original_file_path": "models/silver/silver__token_labels.sql", "name": "silver__token_labels", "alias": "token_labels", "checksum": {"name": "sha256", "checksum": "2639b97bd7328cc9868cd6057384450e24633d6d1a779fe9170aac9263d39b89"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The chain address of the account, token, or contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The shorthand symbol for the token, as used by common price feeds and exchanges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label's creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project that controls the address associated with the label.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__token_labels.yml", "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp::DATE"], "unique_key": "address"}, "created_at": 1672281844.0572753, "compiled_code": "\n\nWITH token_labels AS (\n\n    SELECT\n        block_timestamp,\n        tx_id,\n        message_value :msg :name :: STRING AS label,\n        message_value :msg :symbol :: STRING AS symbol,\n        IFF(\n            attributes :instantiate :_contract_address IS NOT NULL,\n            attributes :instantiate :_contract_address,\n            attributes :reply :_contract_address\n        ) :: STRING AS address,\n        message_value :msg :decimals :: INT AS decimals,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.silver.messages\n    WHERE\n        message_value :msg :decimals IS NOT NULL\n        AND -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.token_labels\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.token_labels\n)\n)\nSELECT\n    'terra' as blockchain,\n    block_timestamp,\n    tx_id,\n    label,\n    symbol,\n    address,\n    decimals,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    token_labels", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.token_labels"}, "model.terra.silver__msgs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "message_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__msgs"], "unique_id": "model.terra.silver__msgs", "raw_code": "{{ config(\n  materialized = \"incremental\",\n  cluster_by = [\"_inserted_timestamp\"],\n  unique_key = \"message_id\",\n  incremental_strategy = 'delete+insert'\n) }}\n\nWITH txs AS (\n\n  SELECT\n    *\n  FROM\n    {{ ref(\"silver__transactions\") }}\n  WHERE\n    {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nflatten_txs AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    'terra' AS blockchain,\n    block_id,\n    tx,\n    tx_succeeded,\n    VALUE :events AS logs,\n    VALUE :msg_index :: NUMBER AS msg_index,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :tx_result :log\n    )\n),\nblock_table AS (\n  SELECT\n    block_id,\n    chain_id\n  FROM\n    {{ ref(\"silver__blocks\") }}\n  WHERE\n    {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nmsg_table AS (\n  SELECT\n    flatten_txs.block_id,\n    flatten_txs.block_timestamp,\n    flatten_txs.blockchain,\n    flatten_txs.tx_id,\n    flatten_txs.tx_succeeded,\n    flatten_log.value AS msg,\n    msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    msg :attributes [0] :key :: STRING AS attribute_key,\n    msg :attributes [0] :value :: STRING AS attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    flatten_txs,\n    LATERAL FLATTEN(\n      input => logs\n    ) flatten_log\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    msg_table\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\ncombined AS (\n  SELECT\n    msg_table.tx_id,\n    msg_table.msg_index,\n    RANK() over(\n      PARTITION BY msg_table.tx_id,\n      msg_table.msg_group\n      ORDER BY\n        msg_table.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    msg_table\n    INNER JOIN exec_actions exec_action\n    ON msg_table.tx_id = exec_action.tx_id\n    AND msg_table.msg_group = exec_action.msg_group\n  WHERE\n    msg_table.is_module = 'TRUE'\n    AND msg_table.msg_type = 'message'\n),\nadd_chain_id AS (\n  SELECT\n    msg_t.block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    msg_t.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          comb.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY msg_t.tx_id,\n          msg_group\n          ORDER BY\n            msg_t.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    msg_t.msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_table msg_t\n    LEFT JOIN combined comb\n    ON msg_t.tx_id = comb.tx_id\n    AND msg_t.msg_index = comb.msg_index\n    JOIN block_table blk\n    ON msg_t.block_id = blk.block_id\n),\nprefinal AS (\n  SELECT\n    ROW_NUMBER() over (\n      PARTITION BY tx_id\n      ORDER BY\n        tx_id\n    ) AS unique_number,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    concat_ws(\n      ':',\n      msg_group,\n      msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    add_chain_id\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      unique_number\n    ) AS message_id,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    prefinal\n)\nSELECT\n  *\nFROM\n  FINAL", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__msgs.sql", "original_file_path": "models/silver/silver__msgs.sql", "name": "silver__msgs", "alias": "msgs", "checksum": {"name": "sha256", "checksum": "eab377353b47b7bb704d5a72f587549903a87b04cd2f0c96070a7c449809f312"}, "tags": [], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains all the messages events of the Terra2 blockchain.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event(s) occuring within the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__msgs.yml", "compiled_path": "target/compiled/terra/models/silver/silver__msgs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "message_id", "incremental_strategy": "delete+insert"}, "created_at": 1672281844.371324, "compiled_code": "\n\nWITH txs AS (\n\n  SELECT\n    *\n  FROM\n    TERRA_DEV.silver.transactions\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.msgs\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.msgs\n)\n),\nflatten_txs AS (\n  SELECT\n    tx_id,\n    block_timestamp,\n    'terra' AS blockchain,\n    block_id,\n    tx,\n    tx_succeeded,\n    VALUE :events AS logs,\n    VALUE :msg_index :: NUMBER AS msg_index,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    txs,\n    LATERAL FLATTEN(\n      input => tx :tx_result :log\n    )\n),\nblock_table AS (\n  SELECT\n    block_id,\n    chain_id\n  FROM\n    TERRA_DEV.silver.blocks\n  WHERE\n    -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.msgs\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.msgs\n)\n),\nmsg_table AS (\n  SELECT\n    flatten_txs.block_id,\n    flatten_txs.block_timestamp,\n    flatten_txs.blockchain,\n    flatten_txs.tx_id,\n    flatten_txs.tx_succeeded,\n    flatten_log.value AS msg,\n    msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      msg :attributes [0] :key :: STRING = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    msg :attributes [0] :key :: STRING AS attribute_key,\n    msg :attributes [0] :value :: STRING AS attribute_value,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    flatten_txs,\n    LATERAL FLATTEN(\n      input => logs\n    ) flatten_log\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    msg_table\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%'\n),\ncombined AS (\n  SELECT\n    msg_table.tx_id,\n    msg_table.msg_index,\n    RANK() over(\n      PARTITION BY msg_table.tx_id,\n      msg_table.msg_group\n      ORDER BY\n        msg_table.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    msg_table\n    INNER JOIN exec_actions exec_action\n    ON msg_table.tx_id = exec_action.tx_id\n    AND msg_table.msg_group = exec_action.msg_group\n  WHERE\n    msg_table.is_module = 'TRUE'\n    AND msg_table.msg_type = 'message'\n),\nadd_chain_id AS (\n  SELECT\n    msg_t.block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    msg_t.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          comb.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY msg_t.tx_id,\n          msg_group\n          ORDER BY\n            msg_t.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    msg_t.msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    msg_table msg_t\n    LEFT JOIN combined comb\n    ON msg_t.tx_id = comb.tx_id\n    AND msg_t.msg_index = comb.msg_index\n    JOIN block_table blk\n    ON msg_t.block_id = blk.block_id\n),\nprefinal AS (\n  SELECT\n    ROW_NUMBER() over (\n      PARTITION BY tx_id\n      ORDER BY\n        tx_id\n    ) AS unique_number,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    concat_ws(\n      ':',\n      msg_group,\n      msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    add_chain_id\n),\nFINAL AS (\n  SELECT\n    concat_ws(\n      '-',\n      tx_id,\n      msg_index,\n      unique_number\n    ) AS message_id,\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    msg_group,\n    msg_index,\n    msg_type,\n    msg,\n    _ingested_at,\n    _inserted_timestamp\n  FROM\n    prefinal\n)\nSELECT\n  *\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.msgs"}, "model.terra.silver__transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.terra.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__transactions"], "unique_id": "model.terra.silver__transactions", "raw_code": "{{ config(\n    materialized = 'incremental',\n    cluster_by = ['_inserted_timestamp::DATE'],\n    unique_key = 'tx_id'\n) }}\n\nWITH bronze_txs AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        _ingested_at DESC\n) = 1\n),\nsilver_txs AS (\n    SELECT\n        tx_id,\n        block_id,\n        block_timestamp,\n        chain_id AS blockchain,\n        object_keys(\n            tx :auth_info :signer_infos [0] :mode_info\n        ) [0] :: STRING AS auth_type,\n        COALESCE(\n            tx :auth_info :signer_infos [0] :public_key :key :: ARRAY,\n            tx :auth_info :signer_infos [0] :public_key :public_keys :: ARRAY\n        ) AS authorizer_public_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :key\n        ) AS msg0_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :value\n        ) AS msg0_value,\n        tx :body :messages [0] :grantee :: STRING AS tx_grantee,\n        tx :auth_info :fee :granter :: STRING AS tx_granter,\n        tx :auth_info :fee :payer :: STRING AS tx_payer,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [1] :attributes [0] :value\n        ) AS acc_seq,\n        CASE\n            WHEN msg0_key = 'spender' THEN msg0_value\n            WHEN msg0_key = 'granter' THEN tx_payer\n            WHEN msg0_key = 'fee' THEN COALESCE(tx_grantee, SPLIT(acc_seq, '/') [0] :: STRING)\n        END AS tx_sender,\n        tx :auth_info :fee :gas_limit :: NUMBER AS gas_limit,\n        tx :tx_result :gasUsed :: NUMBER AS gas_used,\n        tx :auth_info :fee :amount [0] :amount :: NUMBER AS fee_raw,\n        tx :auth_info :fee :amount [0] :denom :: STRING AS fee_denom,\n        tx :body :memo :: STRING AS memo,\n        tx :tx_result :code :: NUMBER AS tx_code,\n        IFF(\n            tx_code = 0,\n            TRUE,\n            FALSE\n        ) AS tx_succeeded,\n        tx :tx_result :codespace :: STRING AS codespace,\n        tx,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        bronze_txs\n)\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    tx_sender,\n    gas_limit,\n    gas_used,\n    fee_raw,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    silver_txs", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "eb6429879d6e01aa8b87619421d5402cb3e1e00c128679d3a67d4accc0c226a9"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain.", "columns": {"tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auth_type": {"name": "auth_type", "description": "What type of authorization was used, presently single or multi.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "authorizer_public_key": {"name": "authorizer_public_key", "description": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_sender": {"name": "tx_sender", "description": "The address of the sender, or authorizer, of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_limit": {"name": "gas_limit", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gas_used": {"name": "gas_used", "description": "The gas actually used by this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_raw": {"name": "fee_raw", "description": "The transaction fee attached to the transaction, not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fee_denom": {"name": "fee_denom", "description": "The token the transaction fee is paid in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "memo": {"name": "memo", "description": "The memo, if any, attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "codespace": {"name": "codespace", "description": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_code": {"name": "tx_code", "description": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ingested_at": {"name": "_ingested_at", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/terra/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp::DATE"], "unique_key": "tx_id"}, "created_at": 1672281843.2810485, "compiled_code": "\n\nWITH bronze_txs AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(_inserted_timestamp)\n        FROM\n            TERRA_DEV.silver.transactions\n    )\n\n\nqualify ROW_NUMBER() over (\n    PARTITION BY tx_id\n    ORDER BY\n        _ingested_at DESC\n) = 1\n),\nsilver_txs AS (\n    SELECT\n        tx_id,\n        block_id,\n        block_timestamp,\n        chain_id AS blockchain,\n        object_keys(\n            tx :auth_info :signer_infos [0] :mode_info\n        ) [0] :: STRING AS auth_type,\n        COALESCE(\n            tx :auth_info :signer_infos [0] :public_key :key :: ARRAY,\n            tx :auth_info :signer_infos [0] :public_key :public_keys :: ARRAY\n        ) AS authorizer_public_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :key\n        ) AS msg0_key,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [0] :attributes [0] :value\n        ) AS msg0_value,\n        tx :body :messages [0] :grantee :: STRING AS tx_grantee,\n        tx :auth_info :fee :granter :: STRING AS tx_granter,\n        tx :auth_info :fee :payer :: STRING AS tx_payer,\n        TRY_BASE64_DECODE_STRING(\n            tx :tx_result :events [1] :attributes [0] :value\n        ) AS acc_seq,\n        CASE\n            WHEN msg0_key = 'spender' THEN msg0_value\n            WHEN msg0_key = 'granter' THEN tx_payer\n            WHEN msg0_key = 'fee' THEN COALESCE(tx_grantee, SPLIT(acc_seq, '/') [0] :: STRING)\n        END AS tx_sender,\n        tx :auth_info :fee :gas_limit :: NUMBER AS gas_limit,\n        tx :tx_result :gasUsed :: NUMBER AS gas_used,\n        tx :auth_info :fee :amount [0] :amount :: NUMBER AS fee_raw,\n        tx :auth_info :fee :amount [0] :denom :: STRING AS fee_denom,\n        tx :body :memo :: STRING AS memo,\n        tx :tx_result :code :: NUMBER AS tx_code,\n        IFF(\n            tx_code = 0,\n            TRUE,\n            FALSE\n        ) AS tx_succeeded,\n        tx :tx_result :codespace :: STRING AS codespace,\n        tx,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        bronze_txs\n)\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    tx_sender,\n    gas_limit,\n    gas_used,\n    fee_raw,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    silver_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.transactions"}, "model.terra.silver__blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__blocks"], "unique_id": "model.terra.silver__blocks", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'block_id',\n    incremental_strategy = 'delete+insert',\n    cluster_by = ['block_timestamp::DATE', '_inserted_timestamp::DATE'],\n) }}\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        {{ incremental_load_filter('_inserted_timestamp') }}\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nvalidator_signatures AS (\n    SELECT\n        header :last_commit :height AS block_id,\n        header :last_commit :signatures AS signatures\n    FROM\n        base_blocks\n),\nvalidator_addresses AS (\n    SELECT\n        validator_signatures.block_id AS block_id,\n        s0.value :validator_address AS validator_address\n    FROM\n        validator_signatures,\n        LATERAL FLATTEN(\n            input => validator_signatures.signatures\n        ) AS s0\n),\nvalidators_address_array AS (\n    SELECT\n        CAST(validator_addresses.block_id AS NUMBER(38, 0)) AS block_id,\n        ARRAY_AGG(\n            DISTINCT validator_addresses.validator_address\n        ) AS address_array\n    FROM\n        validator_addresses\n    GROUP BY\n        validator_addresses.block_id\n),\nFINAL AS (\n    SELECT\n        base_blocks.block_id AS block_id,\n        base_blocks.block_timestamp AS block_timestamp,\n        base_blocks.tx_count AS tx_count,\n        base_blocks.header :app_hash :: STRING AS block_hash,\n        base_blocks.header :chain_id :: STRING AS chain_id,\n        base_blocks.header :consensus_hash :: STRING AS consensus_hash,\n        base_blocks.header :data_hash :: STRING AS data_hash,\n        base_blocks.header :evidence AS evidence,\n        base_blocks.header :evidence_hash :: STRING AS evidence_hash,\n        base_blocks.header :height :: INTEGER AS block_height,\n        base_blocks.header :last_block_id AS last_block_id,\n        base_blocks.header :last_commit AS last_commit,\n        base_blocks.header :last_commit_hash :: STRING AS last_commit_hash,\n        base_blocks.header :last_results_hash :: STRING AS last_results_hash,\n        base_blocks.header :next_validators_hash :: STRING AS next_validators_hash,\n        base_blocks.header :proposer_address :: STRING AS proposer_address,\n        base_blocks.header :validators_hash :: STRING AS validators_hash,\n        base_blocks._ingested_at AS _ingested_at,\n        base_blocks._inserted_timestamp AS _inserted_timestamp,\n        validators_address_array.address_array :: ARRAY AS validator_address_array\n    FROM\n        base_blocks\n        LEFT JOIN validators_address_array\n        ON validators_address_array.block_id = base_blocks.block_id\n)\nSELECT\n    *\nFROM\n    FINAL", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "8de410b764f2a57daec22052dd5dd0197f340f1e811a63aaeb59888b71d2855f"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transaction on a block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONSENSUS_HASH": {"name": "CONSENSUS_HASH", "description": "The consensus hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA_HASH": {"name": "DATA_HASH", "description": "The data hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE": {"name": "EVIDENCE", "description": "The evidence gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE_HASH": {"name": "EVIDENCE_HASH", "description": "The evidence hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "The block height is a sequential number of the most recent block in the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_BLOCK_ID": {"name": "LAST_BLOCK_ID", "description": "The last block id taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT": {"name": "LAST_COMMIT", "description": "The last commit gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT_HASH": {"name": "LAST_COMMIT_HASH", "description": "The last commit hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_RESULTS_HASH": {"name": "LAST_RESULTS_HASH", "description": "The last results hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_VALIDATORS_HASH": {"name": "NEXT_VALIDATORS_HASH", "description": "The next validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The proposer address taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATORS_HASH": {"name": "VALIDATORS_HASH", "description": "The validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ADDRESS_ARRAY": {"name": "VALIDATOR_ADDRESS_ARRAY", "description": "An array of all validators that voted on the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/terra/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "unique_key": "block_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE", "_inserted_timestamp::DATE"]}, "created_at": 1672281843.5494912, "compiled_code": "\n\nWITH base_blocks AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.bronze.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.blocks\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.blocks\n)\n        qualify ROW_NUMBER() over (\n            PARTITION BY block_id\n            ORDER BY\n                _inserted_timestamp DESC\n        ) = 1\n),\nvalidator_signatures AS (\n    SELECT\n        header :last_commit :height AS block_id,\n        header :last_commit :signatures AS signatures\n    FROM\n        base_blocks\n),\nvalidator_addresses AS (\n    SELECT\n        validator_signatures.block_id AS block_id,\n        s0.value :validator_address AS validator_address\n    FROM\n        validator_signatures,\n        LATERAL FLATTEN(\n            input => validator_signatures.signatures\n        ) AS s0\n),\nvalidators_address_array AS (\n    SELECT\n        CAST(validator_addresses.block_id AS NUMBER(38, 0)) AS block_id,\n        ARRAY_AGG(\n            DISTINCT validator_addresses.validator_address\n        ) AS address_array\n    FROM\n        validator_addresses\n    GROUP BY\n        validator_addresses.block_id\n),\nFINAL AS (\n    SELECT\n        base_blocks.block_id AS block_id,\n        base_blocks.block_timestamp AS block_timestamp,\n        base_blocks.tx_count AS tx_count,\n        base_blocks.header :app_hash :: STRING AS block_hash,\n        base_blocks.header :chain_id :: STRING AS chain_id,\n        base_blocks.header :consensus_hash :: STRING AS consensus_hash,\n        base_blocks.header :data_hash :: STRING AS data_hash,\n        base_blocks.header :evidence AS evidence,\n        base_blocks.header :evidence_hash :: STRING AS evidence_hash,\n        base_blocks.header :height :: INTEGER AS block_height,\n        base_blocks.header :last_block_id AS last_block_id,\n        base_blocks.header :last_commit AS last_commit,\n        base_blocks.header :last_commit_hash :: STRING AS last_commit_hash,\n        base_blocks.header :last_results_hash :: STRING AS last_results_hash,\n        base_blocks.header :next_validators_hash :: STRING AS next_validators_hash,\n        base_blocks.header :proposer_address :: STRING AS proposer_address,\n        base_blocks.header :validators_hash :: STRING AS validators_hash,\n        base_blocks._ingested_at AS _ingested_at,\n        base_blocks._inserted_timestamp AS _inserted_timestamp,\n        validators_address_array.address_array :: ARRAY AS validator_address_array\n    FROM\n        base_blocks\n        LEFT JOIN validators_address_array\n        ON validators_address_array.block_id = base_blocks.block_id\n)\nSELECT\n    *\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.blocks"}, "model.terra.silver__governance_submit_proposal": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "merge", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__governance_submit_proposal"], "unique_id": "model.terra.silver__governance_submit_proposal", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_id\",\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE'],\n) }}\n\nWITH base AS (\n    Select \n        block_id,\n        block_timestamp,\n        'terra' As blockchain,\n        chain_id,\n        TX_ID,\n        TX_succeeded,\n        MESSAGE_VALUE:proposer :: STRING AS proposer,\n        ATTRIBUTES:submit_proposal :proposal_id :: INTEGER AS proposal_id,\n        ATTRIBUTES:submit_proposal :proposal_type :: STRING AS proposal_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM \n        {{ ref('silver__messages')}}\n    where \n        message_type ilike '%MsgSubmitProposal%'\n        and attributes:message:module::string = 'governance'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) \n        \n    FROM\n        {{this}}\n)\n{% endif %}\n)\n\nSELECT \n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    TX_succeeded,\n    proposer,\n    proposal_id,\n    proposal_type,\n    _ingested_at,\n    _inserted_timestamp\nFROM    \n    base", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__governance_submit_proposal.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.sql", "name": "silver__governance_submit_proposal", "alias": "governance_submit_proposal", "checksum": {"name": "sha256", "checksum": "fd8fb35553111c6a19402cb0678b3d8b343268c7bab174725b9402938d06723c"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER": {"name": "PROPOSER", "description": "The address of the validator that submitted the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_ID": {"name": "PROPOSAL_ID", "description": "Numeric ID that corresponds to the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_TYPE": {"name": "PROPOSAL_TYPE", "description": "The type of proposal that was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__governance_submit_proposal.yml", "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1672281843.1596484, "compiled_code": "\n\nWITH base AS (\n    Select \n        block_id,\n        block_timestamp,\n        'terra' As blockchain,\n        chain_id,\n        TX_ID,\n        TX_succeeded,\n        MESSAGE_VALUE:proposer :: STRING AS proposer,\n        ATTRIBUTES:submit_proposal :proposal_id :: INTEGER AS proposal_id,\n        ATTRIBUTES:submit_proposal :proposal_type :: STRING AS proposal_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM \n        TERRA_DEV.silver.messages\n    where \n        message_type ilike '%MsgSubmitProposal%'\n        and attributes:message:module::string = 'governance'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) \n        \n    FROM\n        TERRA_DEV.silver.governance_submit_proposal\n)\n\n)\n\nSELECT \n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    TX_succeeded,\n    proposer,\n    proposal_id,\n    proposal_type,\n    _ingested_at,\n    _inserted_timestamp\nFROM    \n    base", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.governance_submit_proposal"}, "model.terra.silver__messages": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "message_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__messages"], "unique_id": "model.terra.silver__messages", "raw_code": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp\"],\n    unique_key = \"message_id\",\n) }}\n\nWITH txs AS (\n\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_id,\n        tx,\n        tx_succeeded,\n        VALUE :events AS logs,\n        VALUE :msg_index :: NUMBER AS message_index,\n        tx :body :messages [0] :\"@type\" :: STRING AS message_type,\n        tx :body :messages [message_index] AS message_value,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"silver__transactions\") }},\n        LATERAL FLATTEN(\n            input => tx :tx_result :log\n        )\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nblocks AS (\n    SELECT\n        block_id,\n        chain_id\n    FROM\n        {{ ref(\"silver__blocks\") }}\n    WHERE\n        {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nevents AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        message_index,\n        tx_succeeded,\n        message_value,\n        message_type,\n        VALUE AS logs,\n        VALUE :attributes AS event_attributes,\n        VALUE :type :: STRING AS event_type,\n        INDEX AS event_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => logs\n        )\n),\nattributes AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        event_attributes,\n        event_type,\n        event_index,\n        tx_succeeded,\n        message_index,\n        message_type,\n        message_value,\n        INDEX AS attribute_index,\n        VALUE AS ATTRIBUTE,\n        VALUE :key :: STRING AS attribute_key,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[0-9]+'\n            ),\n            VALUE :value :: STRING\n        ) AS attribute_value,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[^[:digit:]](.*)'\n            ),\n            NULL\n        ) AS currency,\n        COUNT(attribute_key) over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n        ) AS key_frequency,\n        ROW_NUMBER() over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n            ORDER BY\n                attribute_key\n        ) - 1 AS key_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        events,\n        LATERAL FLATTEN(\n            input => event_attributes\n        )\n),\nwindow_functions AS (\n    SELECT\n        tx_id,\n        tx,\n        event_type,\n        event_attributes,\n        event_index,\n        message_index,\n        message_type,\n        message_value,\n        tx_succeeded,\n        attributes.block_id,\n        chain_id,\n        block_timestamp,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                attribute_key,\n                '_',\n                key_index\n            ),\n            attribute_key\n        ) AS unique_attribute_key,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                'currency',\n                '_',\n                key_index\n            ),\n            'currency'\n        ) AS unique_currency_key,\n        currency,\n        attribute_value,\n        OBJECT_AGG(\n            unique_attribute_key,\n            attribute_value :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS attribute_obj,\n        OBJECT_AGG(\n            unique_currency_key,\n            currency :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS currency_obj,\n        json_merge(\n            attribute_obj,\n            currency_obj\n        ) AS final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        attributes\n        JOIN blocks\n        ON attributes.block_id = blocks.block_id\n),\ndistinct_events_table AS (\n    SELECT\n        DISTINCT tx_id,\n        message_index,\n        event_type,\n        chain_id,\n        message_type,\n        message_value,\n        tx_succeeded,\n        block_timestamp,\n        block_id,\n        final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        window_functions\n),\nfinal_table AS (\n    SELECT\n        DISTINCT CONCAT(\n            tx_id,\n            '-',\n            message_index\n        ) AS message_id,\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_index,\n        message_type,\n        message_value,\n        OBJECT_AGG(\n            event_type,\n            final_attrib_obj\n        ) over (\n            PARTITION BY tx_id,\n            message_index\n        ) AS attributes,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        distinct_events_table\n)\nSELECT\n    *\nFROM\n    final_table", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__messages.sql", "original_file_path": "models/silver/silver__messages.sql", "name": "silver__messages", "alias": "messages", "checksum": {"name": "sha256", "checksum": "bfb9b34ded04e3d1693e80ade4703dad6459146924c30abf9e5c036301976607"}, "tags": [], "refs": [["silver__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains all the messages and their events of the Terra2 blockchain.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_VALUE": {"name": "MESSAGE_VALUE", "description": "The value of the messages based on the index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTES": {"name": "ATTRIBUTES", "description": "The messages and message events attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__messages.yml", "compiled_path": "target/compiled/terra/models/silver/silver__messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "message_id"}, "created_at": 1672281844.2811477, "compiled_code": "\n\nWITH txs AS (\n\n    SELECT\n        tx_id,\n        block_timestamp,\n        block_id,\n        tx,\n        tx_succeeded,\n        VALUE :events AS logs,\n        VALUE :msg_index :: NUMBER AS message_index,\n        tx :body :messages [0] :\"@type\" :: STRING AS message_type,\n        tx :body :messages [message_index] AS message_value,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.silver.transactions,\n        LATERAL FLATTEN(\n            input => tx :tx_result :log\n        )\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.messages\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.messages\n)\n),\nblocks AS (\n    SELECT\n        block_id,\n        chain_id\n    FROM\n        TERRA_DEV.silver.blocks\n    WHERE\n        -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.messages\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.messages\n)\n),\nevents AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        message_index,\n        tx_succeeded,\n        message_value,\n        message_type,\n        VALUE AS logs,\n        VALUE :attributes AS event_attributes,\n        VALUE :type :: STRING AS event_type,\n        INDEX AS event_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        txs,\n        LATERAL FLATTEN(\n            input => logs\n        )\n),\nattributes AS (\n    SELECT\n        tx_id,\n        tx,\n        block_timestamp,\n        block_id,\n        event_attributes,\n        event_type,\n        event_index,\n        tx_succeeded,\n        message_index,\n        message_type,\n        message_value,\n        INDEX AS attribute_index,\n        VALUE AS ATTRIBUTE,\n        VALUE :key :: STRING AS attribute_key,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[0-9]+'\n            ),\n            VALUE :value :: STRING\n        ) AS attribute_value,\n        IFF(\n            VALUE :key = 'amount',\n            REGEXP_SUBSTR(\n                VALUE :value :: STRING,\n                '[^[:digit:]](.*)'\n            ),\n            NULL\n        ) AS currency,\n        COUNT(attribute_key) over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n        ) AS key_frequency,\n        ROW_NUMBER() over (\n            PARTITION BY attribute_key,\n            event_index,\n            message_index,\n            tx_id\n            ORDER BY\n                attribute_key\n        ) - 1 AS key_index,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        events,\n        LATERAL FLATTEN(\n            input => event_attributes\n        )\n),\nwindow_functions AS (\n    SELECT\n        tx_id,\n        tx,\n        event_type,\n        event_attributes,\n        event_index,\n        message_index,\n        message_type,\n        message_value,\n        tx_succeeded,\n        attributes.block_id,\n        chain_id,\n        block_timestamp,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                attribute_key,\n                '_',\n                key_index\n            ),\n            attribute_key\n        ) AS unique_attribute_key,\n        IFF(\n            key_frequency > 1,\n            CONCAT(\n                'currency',\n                '_',\n                key_index\n            ),\n            'currency'\n        ) AS unique_currency_key,\n        currency,\n        attribute_value,\n        OBJECT_AGG(\n            unique_attribute_key,\n            attribute_value :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS attribute_obj,\n        OBJECT_AGG(\n            unique_currency_key,\n            currency :: variant\n        ) over (\n            PARTITION BY tx_id,\n            message_index,\n            event_type\n        ) AS currency_obj,\n        json_merge(\n            attribute_obj,\n            currency_obj\n        ) AS final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        attributes\n        JOIN blocks\n        ON attributes.block_id = blocks.block_id\n),\ndistinct_events_table AS (\n    SELECT\n        DISTINCT tx_id,\n        message_index,\n        event_type,\n        chain_id,\n        message_type,\n        message_value,\n        tx_succeeded,\n        block_timestamp,\n        block_id,\n        final_attrib_obj,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        window_functions\n),\nfinal_table AS (\n    SELECT\n        DISTINCT CONCAT(\n            tx_id,\n            '-',\n            message_index\n        ) AS message_id,\n        block_timestamp,\n        block_id,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_index,\n        message_type,\n        message_value,\n        OBJECT_AGG(\n            event_type,\n            final_attrib_obj\n        ) over (\n            PARTITION BY tx_id,\n            message_index\n        ) AS attributes,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        distinct_events_table\n)\nSELECT\n    *\nFROM\n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.messages"}, "model.terra.silver__transfers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "transfer_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__transfers"], "unique_id": "model.terra.silver__transfers", "raw_code": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp\"],\n    unique_key = \"transfer_id\",\n) }}\n\nWITH flattened_attributes AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_value,\n        message_type,\n        message_index,\n        REGEXP_SUBSTR(\n            key,\n            '[0-9]+'\n        ) :: NUMBER AS key_index,\n        CASE\n            WHEN path LIKE 'amount%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS amount,\n        CASE\n            WHEN path LIKE 'sender%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS sender,\n        CASE\n            WHEN path LIKE 'currency%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS currency,\n        CASE\n            WHEN path LIKE 'recipient%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS receiver,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"silver__messages\") }},\n        LATERAL FLATTEN(\n            input => attributes :transfer,\n            outer => TRUE\n        )\n    WHERE\n        attributes :transfer IS NOT NULL\n),\nunpivoted_table AS (\n    SELECT\n        *\n    FROM\n        flattened_attributes unpivot(\n            VALUE for key IN (\n                sender,\n                amount,\n                currency,\n                receiver\n            )\n        )\n),\npivoted_table AS (\n    SELECT\n        *\n    FROM\n        unpivoted_table pivot(MAX(VALUE) for key IN ('AMOUNT', 'CURRENCY', 'SENDER', 'RECEIVER')) AS p (\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_value,\n            message_type,\n            message_index,\n            key_index,\n            _ingested_at,\n            _inserted_timestamp,\n            amount,\n            currency,\n            sender,\n            receiver\n        )\n),\nfinal_table AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_value,\n        message_type,\n        message_index,\n        amount,\n        currency,\n        sender,\n        receiver,\n        ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                block_timestamp\n        ) - 1 AS INDEX,\n        CONCAT(\n            tx_id,\n            '_',\n            INDEX\n        ) AS transfer_id,\n        REGEXP_SUBSTR(\n            message_type,\n            '(([^./]+)(/.\\.|))',\n            1,\n            '1'\n        ) AS blockchain,\n        CASE\n            WHEN message_type LIKE '/ibc%' THEN 'IBC_Transfer_In'\n            ELSE 'IBC_Transfer_Off'\n        END AS transfer_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        pivoted_table\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    transfer_id,\n    tx_succeeded,\n    chain_id,\n    message_value,\n    message_type,\n    message_index,\n    amount,\n    currency,\n    sender,\n    receiver,\n    blockchain,\n    transfer_type,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    final_table", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "b7193e77fb366712b66dbf40ca1f7a5a5a7f4fc0f6c74ba9590d07e90ab587c3"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table contains all the transfers that occurred in the Terra2 blockchain.", "columns": {"TRANSFER_ID": {"name": "TRANSFER_ID", "description": "The unique key for each transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_VALUE": {"name": "MESSAGE_VALUE", "description": "The value of the messages based on the index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of currency for this action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The address of the sender, or authorizer, of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The address of the receiver of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Determines whether the transfer is coming from one blockchain to another or vice versa.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/terra/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "transfer_id"}, "created_at": 1672281843.079113, "compiled_code": "\n\nWITH flattened_attributes AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_value,\n        message_type,\n        message_index,\n        REGEXP_SUBSTR(\n            key,\n            '[0-9]+'\n        ) :: NUMBER AS key_index,\n        CASE\n            WHEN path LIKE 'amount%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS amount,\n        CASE\n            WHEN path LIKE 'sender%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS sender,\n        CASE\n            WHEN path LIKE 'currency%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS currency,\n        CASE\n            WHEN path LIKE 'recipient%' THEN VALUE :: STRING\n            ELSE NULL\n        END AS receiver,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.silver.messages,\n        LATERAL FLATTEN(\n            input => attributes :transfer,\n            outer => TRUE\n        )\n    WHERE\n        attributes :transfer IS NOT NULL\n),\nunpivoted_table AS (\n    SELECT\n        *\n    FROM\n        flattened_attributes unpivot(\n            VALUE for key IN (\n                sender,\n                amount,\n                currency,\n                receiver\n            )\n        )\n),\npivoted_table AS (\n    SELECT\n        *\n    FROM\n        unpivoted_table pivot(MAX(VALUE) for key IN ('AMOUNT', 'CURRENCY', 'SENDER', 'RECEIVER')) AS p (\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_value,\n            message_type,\n            message_index,\n            key_index,\n            _ingested_at,\n            _inserted_timestamp,\n            amount,\n            currency,\n            sender,\n            receiver\n        )\n),\nfinal_table AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id,\n        tx_succeeded,\n        chain_id,\n        message_value,\n        message_type,\n        message_index,\n        amount,\n        currency,\n        sender,\n        receiver,\n        ROW_NUMBER() over (\n            PARTITION BY tx_id\n            ORDER BY\n                block_timestamp\n        ) - 1 AS INDEX,\n        CONCAT(\n            tx_id,\n            '_',\n            INDEX\n        ) AS transfer_id,\n        REGEXP_SUBSTR(\n            message_type,\n            '(([^./]+)(/.\\.|))',\n            1,\n            '1'\n        ) AS blockchain,\n        CASE\n            WHEN message_type LIKE '/ibc%' THEN 'IBC_Transfer_In'\n            ELSE 'IBC_Transfer_Off'\n        END AS transfer_type,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        pivoted_table\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    transfer_id,\n    tx_succeeded,\n    chain_id,\n    message_value,\n    message_type,\n    message_index,\n    amount,\n    currency,\n    sender,\n    receiver,\n    blockchain,\n    transfer_type,\n    _ingested_at,\n    _inserted_timestamp\nFROM\n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.transfers"}, "model.terra.silver__governance_votes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__governance_votes"], "unique_id": "model.terra.silver__governance_votes", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'tx_id',\n    incremental_strategy = 'delete+insert'\n) }}\n\nwith base_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        tx_succeeded,\n        chain_id,\n        attributes,\n        _inserted_timestamp\n    from {{ ref('silver__messages') }}\n    where message_type = '/cosmos.gov.v1beta1.MsgVote'\n      and {{ incremental_load_filter('_inserted_timestamp') }}\n),\n\nparsed_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        tx_succeeded,\n        chain_id,\n        attributes:message:sender::text as voter,\n        attributes:proposal_vote:proposal_id::number as proposal_id,\n        parse_json(attributes:proposal_vote:option) as parsed_vote_option,\n        parsed_vote_option:option::number as vote_option,\n        case vote_option\n            when 1 then 'Yes' \n            when 2 then 'Abstain'\n            when 3 then 'No'\n            when 4 then 'NoWithVeto'\n        end as vote_option_text,\n        parsed_vote_option:weight::number as vote_weight,\n        'terra' as blockchain,\n        _inserted_timestamp\n    from base_votes\n),\n\nfinal as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        voter,\n        proposal_id,\n        vote_option,\n        vote_option_text,\n        vote_weight,\n        tx_succeeded,\n        _inserted_timestamp\n    from parsed_votes\n)\n\nselect * from final", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__governance_votes.sql", "original_file_path": "models/silver/silver__governance_votes.sql", "name": "silver__governance_votes", "alias": "governance_votes", "checksum": {"name": "sha256", "checksum": "36ef5c28534ecc2b9285439598553e5f62dbaf167e63d4225fe7bc6b0686851e"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table contains votes cast on governance proposals.", "columns": {"tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter": {"name": "voter", "description": "The address of the validator or delegator who casted this vote.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proposal_id": {"name": "proposal_id", "description": "Numeric ID that corresponds to the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_option": {"name": "vote_option", "description": "The numerical vote option cast by the voter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_option_text": {"name": "vote_option_text", "description": "The human-readable vote option cast by the voter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_weight": {"name": "vote_weight", "description": "The weight of the vote cast by the voter. For now, it's always a full vote: `1`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__governance_votes.yml", "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert"}, "created_at": 1672281843.8334453, "compiled_code": "\n\nwith base_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        tx_succeeded,\n        chain_id,\n        attributes,\n        _inserted_timestamp\n    from TERRA_DEV.silver.messages\n    where message_type = '/cosmos.gov.v1beta1.MsgVote'\n      and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.governance_votes\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.governance_votes\n)\n),\n\nparsed_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        tx_succeeded,\n        chain_id,\n        attributes:message:sender::text as voter,\n        attributes:proposal_vote:proposal_id::number as proposal_id,\n        parse_json(attributes:proposal_vote:option) as parsed_vote_option,\n        parsed_vote_option:option::number as vote_option,\n        case vote_option\n            when 1 then 'Yes' \n            when 2 then 'Abstain'\n            when 3 then 'No'\n            when 4 then 'NoWithVeto'\n        end as vote_option_text,\n        parsed_vote_option:weight::number as vote_weight,\n        'terra' as blockchain,\n        _inserted_timestamp\n    from base_votes\n),\n\nfinal as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        voter,\n        proposal_id,\n        vote_option,\n        vote_option_text,\n        vote_weight,\n        tx_succeeded,\n        _inserted_timestamp\n    from parsed_votes\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.governance_votes"}, "model.terra.silver__nft_sales": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "unique_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__nft_sales"], "unique_id": "model.terra.silver__nft_sales", "raw_code": "{{ config(\n    materialized = \"incremental\",\n    cluster_by = [\"_inserted_timestamp\"],\n    unique_key = \"unique_id\",\n) }}\n\nWITH msg AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        'terra' AS blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        6 AS decimals,\n        attributes :wasm :recipient :: STRING AS purchaser,\n        attributes :wasm :seller :: STRING AS seller,\n        attributes :wasm :amount :: NUMBER AS sales_amount,\n        attributes :wasm :denom :: STRING AS currency,\n        attributes :wasm :_contract_address_0 :: STRING AS marketplace,\n        attributes :wasm :nft_contract :: STRING AS contract_address,\n        attributes :wasm :token_id_0 :: STRING AS token_id,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref(\"silver__messages\") }}\n    WHERE\n        message_type = '/cosmwasm.wasm.v1.MsgExecuteContract'\n        AND attributes :wasm :action_0 = 'settle'\n        AND attributes :wasm :action_1 = 'transfer_nft'\n        AND attributes :wasm :action_2 = 'settle_hook'\n        AND {{ incremental_load_filter(\"_inserted_timestamp\") }}\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        decimals,\n        purchaser,\n        seller,\n        sales_amount,\n        currency,\n        marketplace,\n        contract_address,\n        token_id,\n        CONCAT(\n            tx_id,\n            '-',\n            token_id\n        ) AS unique_id,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        msg\n)\nSELECT\n    *\nFROM\n    FINAL", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__nft_sales.sql", "original_file_path": "models/silver/silver__nft_sales.sql", "name": "silver__nft_sales", "alias": "nft_sales", "checksum": {"name": "sha256", "checksum": "b311b00d33d5b61781f15a4ce5a5b8b1a42d448f38244bb2ee9fb4c9e7fcf829"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table contains nft sales transactions that happens on various marketplace in the terra2 blockchain", "columns": {"unique_id": {"name": "unique_id", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchaser": {"name": "purchaser", "description": "The wallet address of the user purchasing the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seller": {"name": "seller", "description": "The wallet address of the user selling the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_amount": {"name": "sales_amount", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INGESTED_AT": {"name": "_INGESTED_AT", "description": "The timestamp for when the block was ingested.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__nft_sales.yml", "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp"], "unique_key": "unique_id"}, "created_at": 1672281844.158538, "compiled_code": "\n\nWITH msg AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        'terra' AS blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        6 AS decimals,\n        attributes :wasm :recipient :: STRING AS purchaser,\n        attributes :wasm :seller :: STRING AS seller,\n        attributes :wasm :amount :: NUMBER AS sales_amount,\n        attributes :wasm :denom :: STRING AS currency,\n        attributes :wasm :_contract_address_0 :: STRING AS marketplace,\n        attributes :wasm :nft_contract :: STRING AS contract_address,\n        attributes :wasm :token_id_0 :: STRING AS token_id,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        TERRA_DEV.silver.messages\n    WHERE\n        message_type = '/cosmwasm.wasm.v1.MsgExecuteContract'\n        AND attributes :wasm :action_0 = 'settle'\n        AND attributes :wasm :action_1 = 'transfer_nft'\n        AND attributes :wasm :action_2 = 'settle_hook'\n        AND -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.nft_sales\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.nft_sales\n)\n),\nFINAL AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        decimals,\n        purchaser,\n        seller,\n        sales_amount,\n        currency,\n        marketplace,\n        contract_address,\n        token_id,\n        CONCAT(\n            tx_id,\n            '-',\n            token_id\n        ) AS unique_id,\n        _ingested_at,\n        _inserted_timestamp\n    FROM\n        msg\n)\nSELECT\n    *\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.nft_sales"}, "model.terra.silver__staking": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.terra.change_decimal", "macro.terra.incremental_load_filter"], "nodes": ["model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "staking_id", "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "silver", "fqn": ["terra", "silver", "silver__staking"], "unique_id": "model.terra.silver__staking", "raw_code": "{{\n    config(\n        materialized=\"incremental\",\n        cluster_by=[\"_inserted_timestamp::DATE\"],\n        unique_key = \"staking_id\",\n    )\n}}\n\nwith\n    delegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Delegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            {{ change_decimal(\"MESSAGE_VALUE:amount:amount\") }} as amount,\n            message_value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%msgdelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n\n    ),\n    message_exec as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Delegate' as action,\n            message_value.value:delegator_address::string as delegator_address,\n            message_value.value:amount:amount / pow(10, 6)::integer as amount,\n            message_value.value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n\n        from\n            {{ ref(\"silver__messages\") }},\n            lateral flatten(message_value:msgs) message_value\n        where\n            message_value.value:\"@type\" ilike '%MsgDelegate'\n            and message_type ilike '%MsgExec%'\n            and tx_succeeded = 'True'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n    ),\n    undelegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Undelegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            {{ change_decimal(\"MESSAGE_VALUE:amount:amount\") }} as amount,\n            message_value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%msgundelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n\n    ),\n    redelegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Redelegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            {{ change_decimal(\"MESSAGE_VALUE:amount:amount\") }} as amount,\n            -- MESSAGE_VALUE:amount:amount / pow(10, 6)::integer as amount,\n            message_value:validator_dst_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%MsgBeginRedelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n\n\n    ),\n    src_address as (\n        select\n            tx_id, message_value:validator_src_address::string as validator_src_address\n        from {{ ref(\"silver__messages\") }}\n        where\n            message_type ilike '%MsgBeginRedelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and {{ incremental_load_filter(\"_inserted_timestamp\") }}\n\n    ),\n    union_delegations as (\n        select *\n        from delegated\n        union all\n        select *\n        from message_exec\n        union all\n        select *\n        from undelegated\n        union all\n        select *\n        from redelegated\n    ),\n\nfinal_table AS (\nselect \n    DISTINCT CONCAT(\n            union_delegations.tx_id,\n            '-',\n            action,\n            '-',\n            msg_index,\n            '-',\n            delegator_address\n        ) AS staking_id,\n    blockchain,\n    block_id,\n    block_timestamp,\n    union_delegations.tx_id,\n    tx_succeeded,\n    chain_id,\n    msg_index,\n    action,\n    delegator_address,\n    amount,\n    validator_address,\n    _ingested_at,\n    _inserted_timestamp, \n    src_address.validator_src_address\nfrom union_delegations\nleft outer join src_address on union_delegations.tx_id = src_address.tx_id\n)\n\nSELECT\n    *\nFROM \n    final_table", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/silver__staking.sql", "original_file_path": "models/silver/silver__staking.sql", "name": "silver__staking", "alias": "staking", "checksum": {"name": "sha256", "checksum": "ecd223df8589123f01e2c573160fee1356c74ebeb4e168ba2fadca33ba09568d"}, "tags": [], "refs": [["silver__messages"], ["silver__messages"], ["silver__messages"], ["silver__messages"], ["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {"ACTION": {"name": "ACTION", "description": "The name of the action performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_ADDRESS": {"name": "DELEGATOR_ADDRESS", "description": "The address of the delegator for this staking event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of currency for this action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ADDRESS": {"name": "VALIDATOR_ADDRESS", "description": "The address of the validator who validate the delegation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_SRC_ADDRESS": {"name": "VALIDATOR_SRC_ADDRESS", "description": "validator to remove delegation FROM", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/silver/silver__staking.yml", "compiled_path": "target/compiled/terra/models/silver/silver__staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "incremental", "cluster_by": ["_inserted_timestamp::DATE"], "unique_key": "staking_id"}, "created_at": 1672281843.2956357, "compiled_code": "\n\nwith\n    delegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Delegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            MESSAGE_VALUE:amount:amount/pow(10,6) :: INTEGER as amount,\n            message_value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%msgdelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.staking\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.staking\n)\n\n    ),\n    message_exec as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Delegate' as action,\n            message_value.value:delegator_address::string as delegator_address,\n            message_value.value:amount:amount / pow(10, 6)::integer as amount,\n            message_value.value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n\n        from\n            TERRA_DEV.silver.messages,\n            lateral flatten(message_value:msgs) message_value\n        where\n            message_value.value:\"@type\" ilike '%MsgDelegate'\n            and message_type ilike '%MsgExec%'\n            and tx_succeeded = 'True'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.staking\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.staking\n)\n    ),\n    undelegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Undelegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            MESSAGE_VALUE:amount:amount/pow(10,6) :: INTEGER as amount,\n            message_value:validator_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%msgundelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.staking\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.staking\n)\n\n    ),\n    redelegated as (\n        select\n            'terra' as blockchain,\n            block_id,\n            block_timestamp,\n            tx_id,\n            tx_succeeded,\n            chain_id,\n            message_index as msg_index,\n            'Redelegate' as action,\n            message_value:delegator_address::string as delegator_address,\n            MESSAGE_VALUE:amount:amount/pow(10,6) :: INTEGER as amount,\n            -- MESSAGE_VALUE:amount:amount / pow(10, 6)::integer as amount,\n            message_value:validator_dst_address::string as validator_address,\n            _ingested_at,\n            _inserted_timestamp\n\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%MsgBeginRedelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.staking\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.staking\n)\n\n\n    ),\n    src_address as (\n        select\n            tx_id, message_value:validator_src_address::string as validator_src_address\n        from TERRA_DEV.silver.messages\n        where\n            message_type ilike '%MsgBeginRedelegate%'\n            and attributes:message:module::string = 'staking'\n            and tx_succeeded = 'True'\n            and -- dbt makes it easy to query your target table by using the \"TERRA_DEV.silver.staking\" variable.\n\n\n_inserted_timestamp >= (\n  SELECT\n    MAX(\n      _inserted_timestamp\n    )\n  FROM\n    TERRA_DEV.silver.staking\n)\n\n    ),\n    union_delegations as (\n        select *\n        from delegated\n        union all\n        select *\n        from message_exec\n        union all\n        select *\n        from undelegated\n        union all\n        select *\n        from redelegated\n    ),\n\nfinal_table AS (\nselect \n    DISTINCT CONCAT(\n            union_delegations.tx_id,\n            '-',\n            action,\n            '-',\n            msg_index,\n            '-',\n            delegator_address\n        ) AS staking_id,\n    blockchain,\n    block_id,\n    block_timestamp,\n    union_delegations.tx_id,\n    tx_succeeded,\n    chain_id,\n    msg_index,\n    action,\n    delegator_address,\n    amount,\n    validator_address,\n    _ingested_at,\n    _inserted_timestamp, \n    src_address.validator_src_address\nfrom union_delegations\nleft outer join src_address on union_delegations.tx_id = src_address.tx_id\n)\n\nSELECT\n    *\nFROM \n    final_table", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.silver.staking"}, "model.terra.core__fact_nft_sales": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_nft_sales"], "unique_id": "model.terra.core__fact_nft_sales", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH nft_sales AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__nft_sales') }}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    decimals,\n    purchaser,\n    seller,\n    sales_amount,\n    currency,\n    marketplace,\n    contract_address,\n    token_id\nFROM\n    nft_sales", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_nft_sales.sql", "original_file_path": "models/core/core__fact_nft_sales.sql", "name": "core__fact_nft_sales", "alias": "fact_nft_sales", "checksum": {"name": "sha256", "checksum": "7dca12dd1c6e68de5ed7e64e0ddadbf61b134477dd4a14fc8c71948075c1be7a"}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "This table contains nft sales transactions that happens on various marketplace in the terra2 blockchain", "columns": {"block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "purchaser": {"name": "purchaser", "description": "The wallet address of the user purchasing the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "seller": {"name": "seller", "description": "The wallet address of the user selling the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_amount": {"name": "sales_amount", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_nft_sales.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281844.6783223, "compiled_code": "\n\nWITH nft_sales AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.nft_sales\n)\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    decimals,\n    purchaser,\n    seller,\n    sales_amount,\n    currency,\n    marketplace,\n    contract_address,\n    token_id\nFROM\n    nft_sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_nft_sales"}, "model.terra.core__ez_swaps": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__ez_swaps"], "unique_id": "model.terra.core__ez_swaps", "raw_code": "{{ config(materialized=\"view\", secure=true) }}\n\nwith swap as (select * from {{ ref(\"silver__dex_swaps\") }})\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    trader,\n    from_amount,\n    from_currency,\n    from_decimal,\n    to_amount,\n    to_currency,\n    to_decimal,\n    pool_id\n\nfrom swap", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__ez_swaps.sql", "original_file_path": "models/core/core__ez_swaps.sql", "name": "core__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "1acabededb6d4c02cf2133d95ae49614f4c976fbc3074b5df3a5f883c8652244"}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_currency": {"name": "from_currency", "description": "The currency that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trader": {"name": "trader", "description": "The address of the user that initiated the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_amount": {"name": "from_amount", "description": "The amount that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "from_decimal": {"name": "from_decimal", "description": "Divide the swap_from_amount by POW(10, swap_from_decimal) to get the amount the user swapped.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_amount": {"name": "to_amount", "description": "The amount that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_currency": {"name": "to_currency", "description": "The currency that the user sent to be swapped for another currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "to_decimal": {"name": "to_decimal", "description": "Divide the swap_to_amount by POW(10, swap_to_decimal) to get the amount the user received.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_ids": {"name": "pool_ids", "description": "Identifier for the pool within the module", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__ez_swaps.yml", "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281844.796091, "compiled_code": "\n\nwith swap as (select * from TERRA_DEV.silver.dex_swaps)\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    trader,\n    from_amount,\n    from_currency,\n    from_decimal,\n    to_amount,\n    to_currency,\n    to_decimal,\n    pool_id\n\nfrom swap", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.ez_swaps"}, "model.terra.core__fact_governance_votes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_governance_votes"], "unique_id": "model.terra.core__fact_governance_votes", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nwith governance_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        voter,\n        proposal_id,\n        vote_option,\n        vote_option_text,\n        vote_weight,\n        tx_succeeded\n    from {{ ref('silver__governance_votes') }}\n)\n\nselect * from governance_votes", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_governance_votes.sql", "original_file_path": "models/core/core__fact_governance_votes.sql", "name": "core__fact_governance_votes", "alias": "fact_governance_votes", "checksum": {"name": "sha256", "checksum": "c6cdb95c011fa40a1e2eaa5a8188645169fd94ac0ee8506f3e61245d803789b7"}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "This table contains votes cast on governance proposals.", "columns": {"tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "voter": {"name": "voter", "description": "The address of the validator or delegator who casted this vote.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "proposal_id": {"name": "proposal_id", "description": "Numeric ID that corresponds to the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_option": {"name": "vote_option", "description": "The numerical vote option cast by the voter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_option_text": {"name": "vote_option_text", "description": "The human-readable vote option cast by the voter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vote_weight": {"name": "vote_weight", "description": "The weight of the vote cast by the voter. For now, it's always a full vote: `1`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_governance_votes.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1672281845.501929, "compiled_code": "\n\nwith governance_votes as (\n    select\n        tx_id,\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        voter,\n        proposal_id,\n        vote_option,\n        vote_option_text,\n        vote_weight,\n        tx_succeeded\n    from TERRA_DEV.silver.governance_votes\n)\n\nselect * from governance_votes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_governance_votes"}, "model.terra.core__fact_governance_submit_proposal": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_governance_submit_proposal"], "unique_id": "model.terra.core__fact_governance_submit_proposal", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH governance_submit_proposal AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        proposer,\n        proposal_id,\n        proposal_type\n    FROM\n        {{ ref('silver__governance_submit_proposal') }}\n)\nSELECT\n    *\nFROM\n    governance_submit_proposal", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_governance_submit_proposal.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.sql", "name": "core__fact_governance_submit_proposal", "alias": "fact_governance_submit_proposal", "checksum": {"name": "sha256", "checksum": "92922207eb110e722e3a49e597f65b7e5fbaa9df50da9ae3a50b19cfc28fb02e"}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER": {"name": "PROPOSER", "description": "The address of the validator that submitted the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_ID": {"name": "PROPOSAL_ID", "description": "Numeric ID that corresponds to the proposal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSAL_TYPE": {"name": "PROPOSAL_TYPE", "description": "The type of proposal that was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_governance_submit_proposal.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1672281845.3115423, "compiled_code": "\n\nWITH governance_submit_proposal AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        proposer,\n        proposal_id,\n        proposal_type\n    FROM\n        TERRA_DEV.silver.governance_submit_proposal\n)\nSELECT\n    *\nFROM\n    governance_submit_proposal", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_governance_submit_proposal"}, "model.terra.core__ez_messages": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__ez_messages"], "unique_id": "model.terra.core__ez_messages", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH messages AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__messages') }}\n)\nSELECT\n    message_id,\n    block_timestamp,\n    block_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    message_index,\n    message_type,\n    message_value,\n    attributes\nFROM\n    messages", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__ez_messages.sql", "original_file_path": "models/core/core__ez_messages.sql", "name": "core__ez_messages", "alias": "ez_messages", "checksum": {"name": "sha256", "checksum": "527ca2662c1930fd2f5d2b3732501f34da72e97f8a07164e1751a371ba1552d1"}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain. Messages, events and attributes are parsed and delivered in JSON format with 1 record per transaction, in this ez table.\nThe fact_msgs and fact_msg_attributes models return the same event and attribute data, but with less transformation.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_VALUE": {"name": "MESSAGE_VALUE", "description": "The value of the messages based on the index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTES": {"name": "ATTRIBUTES", "description": "The messages and message events attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__ez_messages.yml", "compiled_path": "target/compiled/terra/models/core/core__ez_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.8340554, "compiled_code": "\n\nWITH messages AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.messages\n)\nSELECT\n    message_id,\n    block_timestamp,\n    block_id,\n    tx_id,\n    tx_succeeded,\n    chain_id,\n    message_index,\n    message_type,\n    message_value,\n    attributes\nFROM\n    messages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.ez_messages"}, "model.terra.core__dim_address_labels": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.terra.labels.address_labels", "model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__dim_address_labels"], "unique_id": "model.terra.core__dim_address_labels", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH labels AS (\n\n    SELECT\n        blockchain,\n        address,\n        creator,\n        l1_label AS label_type,\n        l2_label AS label_subtype,\n        address_name AS label,\n        project_name\n    FROM\n        {{ source(\n            'labels',\n            'address_labels'\n        ) }}\n    WHERE\n        blockchain = 'terra'\n),\ntokens AS (\n    SELECT\n        blockchain,\n        'token_deployment' AS creator,\n        tx_id,\n        label,\n        symbol,\n        address,\n        decimals\n    FROM\n        {{ ref('silver__token_labels') }}\n),\nFINAL AS (\n    SELECT\n        COALESCE(\n            t.blockchain,\n            l.blockchain\n        ) AS blockchain,\n        COALESCE(\n            t.address,\n            l.address\n        ) AS address,\n        COALESCE(\n            t.creator,\n            l.creator\n        ) AS creator,\n        IFF(\n            l.label_type is not null,\n            l.label_type,\n            'token') AS label_type,\n        IFF(\n            l.label_subtype is not null,\n        l.label_subtype,\n        'token_contract'\n        ) as label_subtype\n        ,\n        COALESCE(\n            t.symbol,\n            l.label\n        ) AS label,\n        COALESCE(\n            t.label,\n            l.project_name\n        ) AS project_name,\n        t.decimals,\n        t.tx_id AS deployment_tx_id\n    FROM\n        labels l full\n        JOIN tokens t USING (\n            blockchain,\n            address\n        )\n)\nSELECT\n    *\nFROM\n    FINAL", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__dim_address_labels.sql", "original_file_path": "models/core/core__dim_address_labels.sql", "name": "core__dim_address_labels", "alias": "dim_address_labels", "checksum": {"name": "sha256", "checksum": "0e70f82f49e36e7236321f19832aafb8804a6272cc30b67753a20914647722a5"}, "tags": [], "refs": [["silver__token_labels"]], "sources": [["labels", "address_labels"]], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPLOYMENT_TX_ID": {"name": "DEPLOYMENT_TX_ID", "description": "The transaction id for the deployment of this token or contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The chain address of the account, token, or contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label's creator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project that controls the address associated with the label.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__dim_address_labels.yml", "compiled_path": "target/compiled/terra/models/core/core__dim_address_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.2982152, "compiled_code": "\n\nWITH labels AS (\n\n    SELECT\n        blockchain,\n        address,\n        creator,\n        l1_label AS label_type,\n        l2_label AS label_subtype,\n        address_name AS label,\n        project_name\n    FROM\n        flipside_prod_db.silver_crosschain.address_labels\n    WHERE\n        blockchain = 'terra'\n),\ntokens AS (\n    SELECT\n        blockchain,\n        'token_deployment' AS creator,\n        tx_id,\n        label,\n        symbol,\n        address,\n        decimals\n    FROM\n        TERRA_DEV.silver.token_labels\n),\nFINAL AS (\n    SELECT\n        COALESCE(\n            t.blockchain,\n            l.blockchain\n        ) AS blockchain,\n        COALESCE(\n            t.address,\n            l.address\n        ) AS address,\n        COALESCE(\n            t.creator,\n            l.creator\n        ) AS creator,\n        IFF(\n            l.label_type is not null,\n            l.label_type,\n            'token') AS label_type,\n        IFF(\n            l.label_subtype is not null,\n        l.label_subtype,\n        'token_contract'\n        ) as label_subtype\n        ,\n        COALESCE(\n            t.symbol,\n            l.label\n        ) AS label,\n        COALESCE(\n            t.label,\n            l.project_name\n        ) AS project_name,\n        t.decimals,\n        t.tx_id AS deployment_tx_id\n    FROM\n        labels l full\n        JOIN tokens t USING (\n            blockchain,\n            address\n        )\n)\nSELECT\n    *\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.dim_address_labels"}, "model.terra.core__fact_transactions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_transactions"], "unique_id": "model.terra.core__fact_transactions", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    tx_sender,\n    gas_limit,\n    gas_used,\n    fee_raw / pow(\n        10,\n        6\n    ) AS fee,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx\nFROM\n    {{ ref('silver__transactions') }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_transactions.sql", "original_file_path": "models/core/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "638cf0880b80d7e5c714e8c28aa6ddb339013dea15c2e346cbef901f8bbc4a69"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "This table records all the transactions of the Terra2 blockchain.", "columns": {"TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AUTH_TYPE": {"name": "AUTH_TYPE", "description": "What type of authorization was used, presently single or multi.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AUTHORIZER_PUBLIC_KEY": {"name": "AUTHORIZER_PUBLIC_KEY", "description": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SENDER": {"name": "TX_SENDER", "description": "The address of the sender, or authorizer, of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The max gas limit attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE_RAW": {"name": "FEE_RAW", "description": "The transaction fee attached to the transaction, not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE_DENOM": {"name": "FEE_DENOM", "description": "The token the transaction fee is paid in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo, if any, attached to this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_CODE": {"name": "TX_CODE", "description": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX": {"name": "TX", "description": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_transactions.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.7577279, "compiled_code": "\n\nSELECT\n    tx_id,\n    block_id,\n    block_timestamp,\n    auth_type,\n    authorizer_public_key,\n    tx_sender,\n    gas_limit,\n    gas_used,\n    fee_raw / pow(\n        10,\n        6\n    ) AS fee,\n    fee_denom,\n    memo,\n    codespace,\n    tx_code,\n    tx_succeeded,\n    tx\nFROM\n    TERRA_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_transactions"}, "model.terra.core__fact_messages": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_messages"], "unique_id": "model.terra.core__fact_messages", "raw_code": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__ez_messages') }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_messages.sql", "original_file_path": "models/core/core__fact_messages.sql", "name": "core__fact_messages", "alias": "fact_messages", "checksum": {"name": "sha256", "checksum": "4ab523a50aae6e19183cca65cb7f202b3f05d437d8b4cbf3b45b2181a9ee8170"}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "deprecating soon. This view has been renamed core__ez_messages to avoid confusion with fact_msgs and fact_msg_attributes.", "columns": {"MESSAGE_ID": {"name": "MESSAGE_ID", "description": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_VALUE": {"name": "MESSAGE_VALUE", "description": "The value of the messages based on the index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTES": {"name": "ATTRIBUTES", "description": "The messages and message events attributes", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_messages.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_messages.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view"}, "created_at": 1672281845.749374, "compiled_code": "\n\nSELECT\n    *\nFROM\n    TERRA_DEV.core.ez_messages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_messages"}, "model.terra.core__ez_staking": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__staking", "model.terra.core__dim_address_labels", "model.terra.core__dim_address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__ez_staking"], "unique_id": "model.terra.core__ez_staking", "raw_code": "{{ config(materialized=\"view\", secure=true) }}\n\nwith staking as (select * from {{ ref(\"silver__staking\") }})\n\nselect \n   staking.blockchain,\n   block_id,\n   block_timestamp,\n   tx_id,\n   tx_succeeded,\n   chain_id,\n   msg_index AS message_index,\n   action,\n   delegator_address,\n   amount,\n   validator_address,\n   validator_src_address,\n   validator_label.label AS validator_label,\n   validator_src_label.label AS validator_src_label\n\nfrom staking \nLeft outer JOIN {{ ref('core__dim_address_labels') }} validator_label\nON validator_label.address = staking.validator_address\nLEFT OUTER JOIN {{ ref('core__dim_address_labels') }} validator_src_label\nON validator_src_label.address = staking.validator_src_address", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__ez_staking.sql", "original_file_path": "models/core/core__ez_staking.sql", "name": "core__ez_staking", "alias": "ez_staking", "checksum": {"name": "sha256", "checksum": "e2355d32d58ed42613284779af7329405a94a042c8efcc40dc8f97df9a029aca"}, "tags": [], "refs": [["silver__staking"], ["core__dim_address_labels"], ["core__dim_address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {"ACTION": {"name": "ACTION", "description": "The name of the action performed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_ADDRESS": {"name": "DELEGATOR_ADDRESS", "description": "The address of the delegator for this staking event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of currency for this action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ADDRESS": {"name": "VALIDATOR_ADDRESS", "description": "The address of the validator who validate the delegation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_SRC_ADDRESS": {"name": "VALIDATOR_SRC_ADDRESS", "description": "validator to remove delegation FROM", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__ez_staking.yml", "compiled_path": "target/compiled/terra/models/core/core__ez_staking.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281844.9249132, "compiled_code": "\n\nwith staking as (select * from TERRA_DEV.silver.staking)\n\nselect \n   staking.blockchain,\n   block_id,\n   block_timestamp,\n   tx_id,\n   tx_succeeded,\n   chain_id,\n   msg_index AS message_index,\n   action,\n   delegator_address,\n   amount,\n   validator_address,\n   validator_src_address,\n   validator_label.label AS validator_label,\n   validator_src_label.label AS validator_src_label\n\nfrom staking \nLeft outer JOIN TERRA_DEV.core.dim_address_labels validator_label\nON validator_label.address = staking.validator_address\nLEFT OUTER JOIN TERRA_DEV.core.dim_address_labels validator_src_label\nON validator_src_label.address = staking.validator_src_address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.ez_staking"}, "model.terra.core__fact_msg_attributes": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_msg_attributes"], "unique_id": "model.terra.core__fact_msg_attributes", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH msg_attributes AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__msg_attributes') }}\n)\n\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_index,\n  msg_type,\n  attribute_key,\n  attribute_value,\n  attribute_index\nFROM\n  msg_attributes", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_msg_attributes.sql", "original_file_path": "models/core/core__fact_msg_attributes.sql", "name": "core__fact_msg_attributes", "alias": "fact_msg_attributes", "checksum": {"name": "sha256", "checksum": "8977d0aa231c49fc615c81e9a06c3b0db08905e5b104a5f26d35abef8442cdc3"}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "This table contains all the messages attributes of each transaction event of the Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_KEY": {"name": "ATTRIBUTE_KEY", "description": "The key from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_VALUE": {"name": "ATTRIBUTE_VALUE", "description": "The value from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_INDEX": {"name": "ATTRIBUTE_INDEX", "description": "The position in which attributes occur within a message", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_msg_attributes.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281844.9971628, "compiled_code": "\n\nWITH msg_attributes AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.msg_attributes\n)\n\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_index,\n  msg_type,\n  attribute_key,\n  attribute_value,\n  attribute_index\nFROM\n  msg_attributes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_msg_attributes"}, "model.terra.core__fact_blocks": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_blocks"], "unique_id": "model.terra.core__fact_blocks", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__blocks') }}\n),\nfinal AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        block_hash,\n        tx_count,\n        chain_id,\n        consensus_hash,\n        data_hash,\n        evidence,\n        evidence_hash,\n        block_height,\n        last_block_id,\n        last_commit,\n        last_commit_hash,\n        last_results_hash,\n        next_validators_hash,\n        proposer_address,\n        validators_hash,\n        validator_address_array\n    FROM\n        blocks\n)\n\nSELECT * FROM final", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_blocks.sql", "original_file_path": "models/core/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "468f86175c0c1c60d9834937d00b07769925e43c9ee66cb339d6562314e52d77"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "This table records all the blocks of Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Unique identifier (hash) of this block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONSENSUS_HASH": {"name": "CONSENSUS_HASH", "description": "The consensus hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA_HASH": {"name": "DATA_HASH", "description": "The data hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE": {"name": "EVIDENCE", "description": "The evidence gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVIDENCE_HASH": {"name": "EVIDENCE_HASH", "description": "The evidence hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEIGHT": {"name": "BLOCK_HEIGHT", "description": "The block height is a sequential number of the most recent block in the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_BLOCK_ID": {"name": "LAST_BLOCK_ID", "description": "The last block id taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT": {"name": "LAST_COMMIT", "description": "The last commit gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_COMMIT_HASH": {"name": "LAST_COMMIT_HASH", "description": "The last commit hash gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LAST_RESULTS_HASH": {"name": "LAST_RESULTS_HASH", "description": "The last results hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NEXT_VALIDATORS_HASH": {"name": "NEXT_VALIDATORS_HASH", "description": "The next validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The proposer address taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATORS_HASH": {"name": "VALIDATORS_HASH", "description": "The validators hash taken from the block header.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_ADDRESS_ARRAY": {"name": "VALIDATOR_ADDRESS_ARRAY", "description": "An array of all validators that voted on the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_blocks.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.118503, "compiled_code": "\n\nWITH blocks AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.blocks\n),\nfinal AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        block_hash,\n        tx_count,\n        chain_id,\n        consensus_hash,\n        data_hash,\n        evidence,\n        evidence_hash,\n        block_height,\n        last_block_id,\n        last_commit,\n        last_commit_hash,\n        last_results_hash,\n        next_validators_hash,\n        proposer_address,\n        validators_hash,\n        validator_address_array\n    FROM\n        blocks\n)\n\nSELECT * FROM final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_blocks"}, "model.terra.core__fact_nft_mints": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_nft_mints"], "unique_id": "model.terra.core__fact_nft_mints", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH nft_mints AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__nft_mints') }}\n)\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    contract_address,\n    mint_price,\n    minter,\n    token_id,\n    currency,\n    decimals,\n    mint_id\nfrom nft_mints", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_nft_mints.sql", "original_file_path": "models/core/core__fact_nft_mints.sql", "name": "core__fact_nft_mints", "alias": "fact_nft_mints", "checksum": {"name": "sha256", "checksum": "fe2884e39774850eb349065cb4929f010da901a9daabda4971ff29b5931756f4"}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "This table contains nft mints transactions that happens on various marketplace in the terra2 blockchain", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINTER": {"name": "MINTER", "description": "The wallet address of the user that minted the NFT", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The contract address of the NFT project", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ID": {"name": "TOKEN_ID", "description": "The ID of the NFT that was sold", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE": {"name": "MINT_PRICE", "description": "The price of the mint in tokens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_ID": {"name": "MINT_ID", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_nft_mints.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.642814, "compiled_code": "\n\nWITH nft_mints AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.nft_mints\n)\n\nselect\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    contract_address,\n    mint_price,\n    minter,\n    token_id,\n    currency,\n    decimals,\n    mint_id\nfrom nft_mints", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_nft_mints"}, "model.terra.core__fact_lp_actions": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_lp_actions"], "unique_id": "model.terra.core__fact_lp_actions", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH lp_actions AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__lp_actions') }}\n)\n\nselect \n    block_id,\n    block_timestamp,\n    action_id,\n    tx_id,\n    tx_succeeded,\n    blockchain,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    action,\n    amount,\n    currency,\n    decimals\nfrom\n    lp_actions", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_lp_actions.sql", "original_file_path": "models/core/core__fact_lp_actions.sql", "name": "core__fact_lp_actions", "alias": "fact_lp_actions", "checksum": {"name": "sha256", "checksum": "0ff8c4a39298e092a75aef07a164284ad10d3154d1d129180438839ccf3f0c3a"}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "This table contains actions on liquidity pools (LP) that impact liquidity.\nThese include the creation of LP tokens for providing liquidity, and the\nburning of LP tokens for withdrawing liquidity.", "columns": {"block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action_id": {"name": "action_id", "description": "The unique key of this liquidity pool action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_succeeded": {"name": "tx_succeeded", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "blockchain": {"name": "blockchain", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liquidity_provider_address": {"name": "liquidity_provider_address", "description": "The address of the account providing or withdrawing liquidity.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "action": {"name": "action", "description": "The action performed toward the liquidity pool.\n\nCan be either of:\n\n- 'burn_lp_token' - a burning of `amount` number of `currency`\n- 'mint_lp_token' - a minting of `amount` number of `currency`\n- 'provide_liquidity' - a deposit of `amount` number of `currency` into the pool\n- 'withdraw_liquidity' - a withdraw of `amount` number of `currency` from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pool_address": {"name": "pool_address", "description": "The address of the liquidity pool contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount involved in this liquidity pool action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "decimals": {"name": "decimals", "description": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_lp_actions.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_lp_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281844.918195, "compiled_code": "\n\nWITH lp_actions AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.lp_actions\n)\n\nselect \n    block_id,\n    block_timestamp,\n    action_id,\n    tx_id,\n    tx_succeeded,\n    blockchain,\n    chain_id,\n    pool_address,\n    liquidity_provider_address,\n    action,\n    amount,\n    currency,\n    decimals\nfrom\n    lp_actions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_lp_actions"}, "model.terra.core__fact_msgs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__fact_msgs"], "unique_id": "model.terra.core__fact_msgs", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH messages AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__msgs') }}\n)\n\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_index,\n  msg_type,\n  msg\nFROM\n  messages", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__fact_msgs.sql", "original_file_path": "models/core/core__fact_msgs.sql", "name": "core__fact_msgs", "alias": "fact_msgs", "checksum": {"name": "sha256", "checksum": "320f20a164234a5ee70595562345351e7fb6db8b98c2800f9d694d916bb7746d"}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "This table contains all the messages events of the Terra2 blockchain.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event(s) occuring within the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__fact_msgs.yml", "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.655041, "compiled_code": "\n\nWITH messages AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.msgs\n)\n\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_index,\n  msg_type,\n  msg\nFROM\n  messages", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.fact_msgs"}, "model.terra.core__ez_transfers": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "secure": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "core", "fqn": ["terra", "core", "core__ez_transfers"], "unique_id": "model.terra.core__ez_transfers", "raw_code": "{{ config(\n    materialized = 'view',\n    secure = true\n) }}\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        {{ ref('silver__transfers') }}\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    transfer_id,\n    tx_succeeded,\n    chain_id,\n    message_value,\n    message_type,\n    message_index,\n    amount,\n    currency,\n    sender,\n    receiver,\n    blockchain,\n    transfer_type\nFROM\n    transfers", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "core/core__ez_transfers.sql", "original_file_path": "models/core/core__ez_transfers.sql", "name": "core__ez_transfers", "alias": "ez_transfers", "checksum": {"name": "sha256", "checksum": "9f1f422c6e09a3e94bacf3a0158e8dd2f89c04683208f1750c00284837f3e486"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "This table contains all the transfers that occurred in the Terra2 blockchain.", "columns": {"TRANSFER_ID": {"name": "TRANSFER_ID", "description": "The unique key for each transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "Transaction hash for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "The height of the chain this block corresponds with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The chain id gotten from the block header", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_INDEX": {"name": "MESSAGE_INDEX", "description": "The index of the messages", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_TYPE": {"name": "MESSAGE_TYPE", "description": "The type of the message", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MESSAGE_VALUE": {"name": "MESSAGE_VALUE", "description": "The value of the messages based on the index.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of currency for this action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency of the amount for this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The address of the sender, or authorizer, of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The address of the receiver of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain name, here is Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Determines whether the transfer is coming from one blockchain to another or vice versa.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "terra://models/core/core__ez_transfers.yml", "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"], "materialized": "view", "secure": true}, "created_at": 1672281845.4225237, "compiled_code": "\n\nWITH transfers AS (\n\n    SELECT\n        *\n    FROM\n        TERRA_DEV.silver.transfers\n)\nSELECT\n    block_id,\n    block_timestamp,\n    tx_id,\n    transfer_id,\n    tx_succeeded,\n    chain_id,\n    message_value,\n    message_type,\n    message_index,\n    amount,\n    currency,\n    sender,\n    receiver,\n    blockchain,\n    transfer_type\nFROM\n    transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.core.ez_transfers"}, "test.terra.tests__correct_token_pairs": {"compiled": true, "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.terra.core__dim_address_labels", "model.terra.silver__messages", "model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "tests", "fqn": ["terra", "silver", "dex_lp_actions", "tests__correct_token_pairs"], "unique_id": "test.terra.tests__correct_token_pairs", "raw_code": "with pools as (\n    select\n        address,\n        label\n    from {{ ref('core__dim_address_labels') }}\n    where label_subtype = 'pool'\n),\n\nlp_txs as (\n    select\n        *\n    from {{ ref('silver__messages') }}\n    where message_value:contract in (select address from pools)\n),\n\nwithdraws as (\n    select\n        tx_id,\n        parse_json(try_base64_decode_string(message_value:msg:send:msg)) as decoded_message,\n        attributes:wasm as logs\n    from lp_txs\n    where message_value:msg:send is not null\n      and decoded_message:withdraw_liquidity is not null\n),\n\ntoken_burns as (\n    select\n        tx_id,\n        logs:_contract_address_0::string as currency,\n        logs:withdrawn_share::number as amount,\n        label\n    from withdraws\n    inner join pools on logs:_contract_address_0::string = pools.address\n),\n\nwithdraw_tokens as (\n    select\n        tx_id,\n        regexp_substr(value, $$\\d+$$)::number as amount,\n        regexp_substr(value, $$\\d+(\\D.+)$$, 1, 1, 'e', 1) as currency\n    from withdraws,\n    lateral split_to_table(logs:refund_assets::string, ', ')\n    union all\n    select\n        tx_id,\n        amount,\n        label as currency\n    from token_burns\n),\n\nprovides as (\n    select\n        tx_id,\n        attributes:wasm as logs\n    from lp_txs\n      where message_value:msg:provide_liquidity is not null\n),\n\ntoken_mints as (\n    select\n        tx_id,\n        logs:_contract_address_0::string as currency,\n        logs:share::number as amount,\n        label\n    from provides\n    inner join pools on logs:_contract_address_0::string = pools.address\n),\n\nprovide_tokens as (\n    select\n        tx_id,\n        regexp_substr(value, $$\\d+$$)::number as amount,\n        regexp_substr(value, $$\\d+(\\D.+)$$, 1, 1, 'e', 1) as currency\n    from provides,\n    lateral split_to_table(logs:assets::string, ', ')\n    union all\n    select\n        tx_id,\n        amount,\n        label as currency\n    from token_mints\n),\n\ncombined as (\n    select\n        tx_id,\n        amount,\n        currency\n    from withdraw_tokens\n    union\n    select\n        tx_id,\n        amount,\n        currency\n    from provide_tokens\n),\n\nactual as (\n    select \n        tx_id,\n        amount,\n        currency\n    from {{ ref('silver__lp_actions') }}\n),\n\nexpected as (\n    select\n        *\n    from combined\n),\n\ntest as (\n    (select\n        *\n    from actual\n    except\n    select\n        *\n    from expected)\n    union all\n    (select\n        *\n    from expected\n    except\n    select\n        *\n    from actual)\n)\n\nselect * from test", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "silver/dex_lp_actions/tests__correct_token_pairs.sql", "original_file_path": "tests/silver/dex_lp_actions/tests__correct_token_pairs.sql", "name": "tests__correct_token_pairs", "alias": "correct_token_pairs", "checksum": {"name": "sha256", "checksum": "417d5e92e02cce531c44050ea983f98ed154eb4f488c6e4d392281c34bb6355c"}, "tags": [], "refs": [["core__dim_address_labels"], ["silver__messages"], ["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/tests/silver/dex_lp_actions/tests__correct_token_pairs.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.6949353, "compiled_code": "with pools as (\n    select\n        address,\n        label\n    from TERRA_DEV.core.dim_address_labels\n    where label_subtype = 'pool'\n),\n\nlp_txs as (\n    select\n        *\n    from TERRA_DEV.silver.messages\n    where message_value:contract in (select address from pools)\n),\n\nwithdraws as (\n    select\n        tx_id,\n        parse_json(try_base64_decode_string(message_value:msg:send:msg)) as decoded_message,\n        attributes:wasm as logs\n    from lp_txs\n    where message_value:msg:send is not null\n      and decoded_message:withdraw_liquidity is not null\n),\n\ntoken_burns as (\n    select\n        tx_id,\n        logs:_contract_address_0::string as currency,\n        logs:withdrawn_share::number as amount,\n        label\n    from withdraws\n    inner join pools on logs:_contract_address_0::string = pools.address\n),\n\nwithdraw_tokens as (\n    select\n        tx_id,\n        regexp_substr(value, $$\\d+$$)::number as amount,\n        regexp_substr(value, $$\\d+(\\D.+)$$, 1, 1, 'e', 1) as currency\n    from withdraws,\n    lateral split_to_table(logs:refund_assets::string, ', ')\n    union all\n    select\n        tx_id,\n        amount,\n        label as currency\n    from token_burns\n),\n\nprovides as (\n    select\n        tx_id,\n        attributes:wasm as logs\n    from lp_txs\n      where message_value:msg:provide_liquidity is not null\n),\n\ntoken_mints as (\n    select\n        tx_id,\n        logs:_contract_address_0::string as currency,\n        logs:share::number as amount,\n        label\n    from provides\n    inner join pools on logs:_contract_address_0::string = pools.address\n),\n\nprovide_tokens as (\n    select\n        tx_id,\n        regexp_substr(value, $$\\d+$$)::number as amount,\n        regexp_substr(value, $$\\d+(\\D.+)$$, 1, 1, 'e', 1) as currency\n    from provides,\n    lateral split_to_table(logs:assets::string, ', ')\n    union all\n    select\n        tx_id,\n        amount,\n        label as currency\n    from token_mints\n),\n\ncombined as (\n    select\n        tx_id,\n        amount,\n        currency\n    from withdraw_tokens\n    union\n    select\n        tx_id,\n        amount,\n        currency\n    from provide_tokens\n),\n\nactual as (\n    select \n        tx_id,\n        amount,\n        currency\n    from TERRA_DEV.silver.lp_actions\n),\n\nexpected as (\n    select\n        *\n    from combined\n),\n\ntest as (\n    (select\n        *\n    from actual\n    except\n    select\n        *\n    from expected)\n    union all\n    (select\n        *\n    from expected\n    except\n    select\n        *\n    from actual)\n)\n\nselect * from test", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.tests.correct_token_pairs"}, "operation.terra.terra-on-run-start-0": {"compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.terra.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "terra-on-run-start-0", "fqn": ["terra", "hooks", "terra-on-run-start-0"], "unique_id": "operation.terra.terra-on-run-start-0", "raw_code": "{{create_sps()}}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "hooks/terra-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "terra-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "076b75bb49c7cf27b293499c0c2fdbcb1d7541610bd5a5d85838eca8209069f0"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/./dbt_project.yml/hooks/terra-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"]}, "created_at": 1672281842.7848814, "compiled_code": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.terra.terra-on-run-start-1": {"compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.terra.create_json_merge"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "copy_grants": true, "post-hook": [{"sql": "{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}", "transaction": true, "index": null}], "pre-hook": []}, "database": "TERRA_DEV", "schema": "terra-on-run-start-1", "fqn": ["terra", "hooks", "terra-on-run-start-1"], "unique_id": "operation.terra.terra-on-run-start-1", "raw_code": "{{create_json_merge()}}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "hooks/terra-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "terra-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "076b75bb49c7cf27b293499c0c2fdbcb1d7541610bd5a5d85838eca8209069f0"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/./dbt_project.yml/hooks/terra-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "post-hook": ["{% if target.name == 'prod_cloud' and this.schema != 'bronze' %} grant select on {{ this }} to share terra_mdao {% endif %}"]}, "created_at": 1672281842.7949572, "compiled_code": "CREATE\nOR REPLACE FUNCTION TERRA_DEV.SILVER.json_merge(\n  o1 OBJECT,\n  o2 OBJECT\n) returns object\nlanguage python\nruntime_version = 3.8\nhandler = 'json_merge'\nas $$\ndef json_merge(o1, o2):\n    o1.update(o2)\n    return o1\n$$;", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "test.terra.not_null_silver__dex_swaps_BLOCK_ID.e92ac9632a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__dex_swaps_BLOCK_ID.e92ac9632a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_BLOCK_ID.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_BLOCK_ID", "alias": "dex_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9249341, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT.19eb703d2e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afb3c6a22e1fe0a970423cae435e6fab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT.19eb703d2e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afb3c6a22e1fe0a970423cae435e6fab\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_afb3c6a22e1fe0a970423cae435e6fab.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT", "alias": "dex_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_afb3c6a22e1fe0a970423cae435e6fab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_afb3c6a22e1fe0a970423cae435e6fab"}, "created_at": 1672281842.9274402, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_BLOCK_TIMESTAMP", "alias": "dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9429, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a0efd929fd": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5d6c137760959c743ef91ac8f0a9a8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a0efd929fd", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5d6c137760959c743ef91ac8f0a9a8b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d5d6c137760959c743ef91ac8f0a9a8b.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_d5d6c137760959c743ef91ac8f0a9a8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d5d6c137760959c743ef91ac8f0a9a8b"}, "created_at": 1672281842.9451015, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_BLOCKCHAIN.7ba54e120a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__dex_swaps_BLOCKCHAIN.7ba54e120a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_BLOCKCHAIN", "alias": "dex_swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9511104, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR.4e386a4a96": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7477ec71ca6ff81c077bc40fbbf59382", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR.4e386a4a96", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7477ec71ca6ff81c077bc40fbbf59382\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_7477ec71ca6ff81c077bc40fbbf59382.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR", "alias": "dex_swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_7477ec71ca6ff81c077bc40fbbf59382.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_7477ec71ca6ff81c077bc40fbbf59382"}, "created_at": 1672281842.9532442, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_CHAIN_ID.addadcfa37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__dex_swaps_CHAIN_ID.addadcfa37", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_CHAIN_ID.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_CHAIN_ID", "alias": "dex_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9595442, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.4023154d5a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.4023154d5a", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1", "alias": "dex_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.961648, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.dex_swaps\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.dex_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR.e56210ce59": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_083217805455196fe12664fd72de341e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR.e56210ce59", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_083217805455196fe12664fd72de341e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_083217805455196fe12664fd72de341e.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR", "alias": "dex_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_083217805455196fe12664fd72de341e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_083217805455196fe12664fd72de341e"}, "created_at": 1672281842.971787, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_TX_ID.3f10ba61c8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_TX_ID"], "unique_id": "test.terra.not_null_silver__dex_swaps_TX_ID.3f10ba61c8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_TX_ID.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_TX_ID", "alias": "dex_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9781058, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR.65ef3b20e1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1062f72e3253f9779d28e056d6dc0fa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR.65ef3b20e1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1062f72e3253f9779d28e056d6dc0fa\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a1062f72e3253f9779d28e056d6dc0fa.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR", "alias": "dex_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_a1062f72e3253f9779d28e056d6dc0fa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a1062f72e3253f9779d28e056d6dc0fa"}, "created_at": 1672281842.9802916, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_TX_SUCCEEDED.5843f6eabd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__dex_swaps_TX_SUCCEEDED.5843f6eabd", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_TX_SUCCEEDED", "alias": "dex_swaps_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9865937, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean.a081e7b8fc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["boolean"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b67ad118d64b49156db921aa26433346", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean.a081e7b8fc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b67ad118d64b49156db921aa26433346\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b67ad118d64b49156db921aa26433346.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean", "alias": "dex_swaps_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_b67ad118d64b49156db921aa26433346.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b67ad118d64b49156db921aa26433346"}, "created_at": 1672281842.9887195, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_from_currency.81d3fa180e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_currency", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_from_currency"], "unique_id": "test.terra.not_null_silver__dex_swaps_from_currency.81d3fa180e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_from_currency.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_from_currency", "alias": "dex_swaps_from_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_from_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281842.9945152, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere from_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_from_currency", "column_name": "from_currency", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR.8af82724f1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "from_currency", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff8d7b5da639c299f297c729b58ee1f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR.8af82724f1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff8d7b5da639c299f297c729b58ee1f0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ff8d7b5da639c299f297c729b58ee1f0.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR", "alias": "dex_swaps_from_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_ff8d7b5da639c299f297c729b58ee1f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ff8d7b5da639c299f297c729b58ee1f0"}, "created_at": 1672281842.996635, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_from_currency", "column_name": "from_currency", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps_trader.b1cc26d600": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trader", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps_trader"], "unique_id": "test.terra.not_null_silver__dex_swaps_trader.b1cc26d600", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps_trader.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps_trader", "alias": "dex_swaps_trader", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps_trader.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0029197, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere trader is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps_trader", "column_name": "trader", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR.62a5bb606b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "trader", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e057776b3bea20ccf3c7e3837d212dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR.62a5bb606b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e057776b3bea20ccf3c7e3837d212dd\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1e057776b3bea20ccf3c7e3837d212dd.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR", "alias": "dex_swaps_trader", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_1e057776b3bea20ccf3c7e3837d212dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1e057776b3bea20ccf3c7e3837d212dd"}, "created_at": 1672281843.0050328, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRADER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_trader", "column_name": "trader", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE.2e9ae4edf8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", "DOUBLE"], "column_name": "from_amount", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3b53a57504c80a74ba837eb45c1d72a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE.2e9ae4edf8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3b53a57504c80a74ba837eb45c1d72a0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3b53a57504c80a74ba837eb45c1d72a0.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE", "alias": "dex_swaps_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_3b53a57504c80a74ba837eb45c1d72a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3b53a57504c80a74ba837eb45c1d72a0"}, "created_at": 1672281843.0120416, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'DOUBLE')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_from_amount", "column_name": "from_amount", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT.cc9884771c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "NUMBER", "FLOAT"], "column_name": "from_decimal", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_98b97845e575ae511e9defc5bb107b8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT.cc9884771c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_98b97845e575ae511e9defc5bb107b8b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_98b97845e575ae511e9defc5bb107b8b.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT", "alias": "dex_swaps_from_decimal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_98b97845e575ae511e9defc5bb107b8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_98b97845e575ae511e9defc5bb107b8b"}, "created_at": 1672281843.0186844, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_DECIMAL'\n            and\n            relation_column_type not in ('DECIMAL', 'NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_from_decimal", "column_name": "from_decimal", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL.c6ba11a35c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", "DECIMAL"], "column_name": "to_amount", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4fb8088c429ddc7d15dd5d9eae02733f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL.c6ba11a35c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4fb8088c429ddc7d15dd5d9eae02733f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4fb8088c429ddc7d15dd5d9eae02733f.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL", "alias": "dex_swaps_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_4fb8088c429ddc7d15dd5d9eae02733f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_4fb8088c429ddc7d15dd5d9eae02733f"}, "created_at": 1672281843.0253782, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'DECIMAL')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_to_amount", "column_name": "to_amount", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR.f56203e965": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "to_currency", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04338251a7c41cb3bd5526b065bef3e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR.f56203e965", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04338251a7c41cb3bd5526b065bef3e6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_04338251a7c41cb3bd5526b065bef3e6.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR", "alias": "dex_swaps_to_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_04338251a7c41cb3bd5526b065bef3e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_04338251a7c41cb3bd5526b065bef3e6"}, "created_at": 1672281843.0321698, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_to_currency", "column_name": "to_currency", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT.9e5139044b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "NUMBER", "FLOAT"], "column_name": "to_decimal", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_73ad2116f395638e4327552a1e686eda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT.9e5139044b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_73ad2116f395638e4327552a1e686eda\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_73ad2116f395638e4327552a1e686eda.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT", "alias": "dex_swaps_to_decimal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_73ad2116f395638e4327552a1e686eda.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_73ad2116f395638e4327552a1e686eda"}, "created_at": 1672281843.0381422, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_DECIMAL'\n            and\n            relation_column_type not in ('DECIMAL', 'NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_to_decimal", "column_name": "to_decimal", "file_key_name": "models.silver__dex_swaps"}, "test.terra.not_null_silver__dex_swaps__INSERTED_TIMESTAMP.7f20c40c61": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__dex_swaps__INSERTED_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__dex_swaps__INSERTED_TIMESTAMP.7f20c40c61", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__dex_swaps__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "not_null_silver__dex_swaps__INSERTED_TIMESTAMP", "alias": "dex_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/not_null_silver__dex_swaps__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0447493, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.dex_swaps\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.dex_swaps", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz.5de15e9c20": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["timestamp_ntz"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf8b50a49fb09ce23b59ed8f57bd1f31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz.5de15e9c20", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf8b50a49fb09ce23b59ed8f57bd1f31\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cf8b50a49fb09ce23b59ed8f57bd1f31.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz", "alias": "dex_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_cf8b50a49fb09ce23b59ed8f57bd1f31.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cf8b50a49fb09ce23b59ed8f57bd1f31"}, "created_at": 1672281843.0469036, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR.4c2c520a8b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "pool_ids", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c877d9318bdb2c9c3a184df31d894ff7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR.4c2c520a8b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c877d9318bdb2c9c3a184df31d894ff7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c877d9318bdb2c9c3a184df31d894ff7.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR", "alias": "dex_swaps_pool_ids", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_expectations_expect_column_c877d9318bdb2c9c3a184df31d894ff7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c877d9318bdb2c9c3a184df31d894ff7"}, "created_at": 1672281843.0527515, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('SWAP_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_IDS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.dex_swaps_pool_ids", "column_name": "pool_ids", "file_key_name": "models.silver__dex_swaps"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID.a2a765f055": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["SWAP_ID"], "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1139a329c557fcfedf1eb510cee64ba8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID.a2a765f055", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1139a329c557fcfedf1eb510cee64ba8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_1139a329c557fcfedf1eb510cee64ba8.sql", "original_file_path": "models/silver/silver__dex_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID", "alias": "dex_swaps_SWAP_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__dex_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__dex_swaps.yml/dbt_utils_unique_combination_o_1139a329c557fcfedf1eb510cee64ba8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_1139a329c557fcfedf1eb510cee64ba8"}, "created_at": 1672281843.0589817, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        SWAP_ID\n    from TERRA_DEV.silver.dex_swaps\n    group by SWAP_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.dex_swaps_SWAP_ID", "column_name": null, "file_key_name": "models.silver__dex_swaps"}, "test.terra.unique_silver__transfers_TRANSFER_ID.e27b94f7ee": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__transfers_TRANSFER_ID"], "unique_id": "test.terra.unique_silver__transfers_TRANSFER_ID.e27b94f7ee", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__transfers_TRANSFER_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "unique_silver__transfers_TRANSFER_ID", "alias": "transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/unique_silver__transfers_TRANSFER_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0804327, "compiled_code": "\n    \n    \n\nselect\n    TRANSFER_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.transfers\nwhere TRANSFER_ID is not null\ngroup by TRANSFER_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_TRANSFER_ID.2065553678": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_TRANSFER_ID"], "unique_id": "test.terra.not_null_silver__transfers_TRANSFER_ID.2065553678", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_TRANSFER_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TRANSFER_ID", "alias": "transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_TRANSFER_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0827062, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere TRANSFER_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR.230e8f6d7b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ffc45f54f11d32d30307eb93e6d3bd85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR.230e8f6d7b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ffc45f54f11d32d30307eb93e6d3bd85\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ffc45f54f11d32d30307eb93e6d3bd85.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR", "alias": "transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_ffc45f54f11d32d30307eb93e6d3bd85.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ffc45f54f11d32d30307eb93e6d3bd85"}, "created_at": 1672281843.0848472, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSFER_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_TX_ID.1be05d8ee2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_TX_ID"], "unique_id": "test.terra.not_null_silver__transfers_TX_ID.1be05d8ee2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_TX_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_ID", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0912442, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_e6811ad69d0d534b34fc03d2bff51b3b"}, "created_at": 1672281843.0933602, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.0998104, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f"}, "created_at": 1672281843.1019557, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1082897, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1672281843.110424, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_SUCCEEDED", "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1169136, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN", "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_728394c87bda0878c61248bc68f73738"}, "created_at": 1672281843.1190457, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__transfers_CHAIN_ID.f332cbbf7c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_CHAIN_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_CHAIN_ID", "alias": "transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.124818, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR.d71aaf3142": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_50f9dfcaac1d438a1d29fb45b35f8cc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR.d71aaf3142", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_50f9dfcaac1d438a1d29fb45b35f8cc1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_50f9dfcaac1d438a1d29fb45b35f8cc1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR", "alias": "transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_50f9dfcaac1d438a1d29fb45b35f8cc1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_50f9dfcaac1d438a1d29fb45b35f8cc1"}, "created_at": 1672281843.1269393, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_MESSAGE_INDEX.48341e0be1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_silver__transfers_MESSAGE_INDEX.48341e0be1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_MESSAGE_INDEX.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_MESSAGE_INDEX", "alias": "transfers_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1327415, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER.06c7310fc4": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a1294ff3b7b1c72c353034c635038c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER.06c7310fc4", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a1294ff3b7b1c72c353034c635038c7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4a1294ff3b7b1c72c353034c635038c7.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER", "alias": "transfers_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_4a1294ff3b7b1c72c353034c635038c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_4a1294ff3b7b1c72c353034c635038c7"}, "created_at": 1672281843.1348696, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__transfers_MESSAGE_TYPE.4400b64fe0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transfers_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_silver__transfers_MESSAGE_TYPE.4400b64fe0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transfers_MESSAGE_TYPE.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_MESSAGE_TYPE", "alias": "transfers_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/not_null_silver__transfers_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1406896, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transfers\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transfers_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR.2fb596a3f8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d1601c84d10072a11d0e8acb3088d3dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR.2fb596a3f8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d1601c84d10072a11d0e8acb3088d3dd\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d1601c84d10072a11d0e8acb3088d3dd.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR", "alias": "transfers_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d1601c84d10072a11d0e8acb3088d3dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d1601c84d10072a11d0e8acb3088d3dd"}, "created_at": 1672281843.1428144, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__transfers"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id.e430cac164": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transfer_id"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_5f279d564ebeab386dafc5f414029778", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id.e430cac164", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_5f279d564ebeab386dafc5f414029778\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_5f279d564ebeab386dafc5f414029778.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id", "alias": "transfers_transfer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_5f279d564ebeab386dafc5f414029778.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_5f279d564ebeab386dafc5f414029778"}, "created_at": 1672281843.1486487, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id\n    from TERRA_DEV.silver.transfers\n    group by transfer_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.transfers_transfer_id", "column_name": null, "file_key_name": "models.silver__transfers"}, "test.terra.not_null_silver__governance_submit_proposal_BLOCK_ID.80df3f0930": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_BLOCK_ID.80df3f0930", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_BLOCK_ID.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_BLOCK_ID", "alias": "governance_submit_proposal_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1609154, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.065c6b7366": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e659ce7d6e3e65292fc2b5403b4badc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.065c6b7366", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e659ce7d6e3e65292fc2b5403b4badc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_9e659ce7d6e3e65292fc2b5403b4badc.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT", "alias": "governance_submit_proposal_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_9e659ce7d6e3e65292fc2b5403b4badc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_9e659ce7d6e3e65292fc2b5403b4badc"}, "created_at": 1672281843.1634037, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.59a0f38558": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.59a0f38558", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP", "alias": "governance_submit_proposal_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.1695673, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f1054d98d9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_363502caffcb65ff379ee4ac3ef1ec3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f1054d98d9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_363502caffcb65ff379ee4ac3ef1ec3d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_363502caffcb65ff379ee4ac3ef1ec3d.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "governance_submit_proposal_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_363502caffcb65ff379ee4ac3ef1ec3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_363502caffcb65ff379ee4ac3ef1ec3d"}, "created_at": 1672281843.17205, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_BLOCKCHAIN.908b82f02b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_BLOCKCHAIN.908b82f02b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_BLOCKCHAIN", "alias": "governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.177754, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra.4289fde0f6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "accepted_values_silver__govern_6fdcf51d9e34627bcbedf5725bf75125", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra.4289fde0f6", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver__govern_6fdcf51d9e34627bcbedf5725bf75125\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__govern_6fdcf51d9e34627bcbedf5725bf75125.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra", "alias": "governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/accepted_values_silver__govern_6fdcf51d9e34627bcbedf5725bf75125.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "accepted_values_silver__govern_6fdcf51d9e34627bcbedf5725bf75125"}, "created_at": 1672281843.180262, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_submit_proposal\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.0931733295": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8e16d90d4a0fc695d31162af36f2978", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.0931733295", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8e16d90d4a0fc695d31162af36f2978\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b8e16d90d4a0fc695d31162af36f2978.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR", "alias": "governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_b8e16d90d4a0fc695d31162af36f2978.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b8e16d90d4a0fc695d31162af36f2978"}, "created_at": 1672281843.1858466, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_CHAIN_ID.db4c666e00": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_CHAIN_ID.db4c666e00", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_CHAIN_ID.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_CHAIN_ID", "alias": "governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.192016, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1.32faa38966": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "accepted_values_silver__govern_4c2f3b20ce7cd9b31aa52a8b7347afb4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1.32faa38966", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver__govern_4c2f3b20ce7cd9b31aa52a8b7347afb4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__govern_4c2f3b20ce7cd9b31aa52a8b7347afb4.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1", "alias": "governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/accepted_values_silver__govern_4c2f3b20ce7cd9b31aa52a8b7347afb4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "accepted_values_silver__govern_4c2f3b20ce7cd9b31aa52a8b7347afb4"}, "created_at": 1672281843.1941276, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_submit_proposal\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.dbb25df7d2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c8cd8947ec6105d23c34693330967ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.dbb25df7d2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c8cd8947ec6105d23c34693330967ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2c8cd8947ec6105d23c34693330967ef.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR", "alias": "governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_2c8cd8947ec6105d23c34693330967ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2c8cd8947ec6105d23c34693330967ef"}, "created_at": 1672281843.2000563, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.unique_silver__governance_submit_proposal_TX_ID.63afc1894a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__governance_submit_proposal_TX_ID"], "unique_id": "test.terra.unique_silver__governance_submit_proposal_TX_ID.63afc1894a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__governance_submit_proposal_TX_ID.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "unique_silver__governance_submit_proposal_TX_ID", "alias": "governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/unique_silver__governance_submit_proposal_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2062697, "compiled_code": "\n    \n    \n\nselect\n    TX_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere TX_ID is not null\ngroup by TX_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_TX_ID.8dc772d3ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_TX_ID"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_TX_ID.8dc772d3ad", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_TX_ID.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_TX_ID", "alias": "governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2084167, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__transactions')", "field": "tx_id", "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "relationships_silver__governan_99facdb587cd31b9be59e965a627b9b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_"], "unique_id": "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__governan_99facdb587cd31b9be59e965a627b9b6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__governan_99facdb587cd31b9be59e965a627b9b6.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_", "alias": "governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/relationships_silver__governan_99facdb587cd31b9be59e965a627b9b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__governan_99facdb587cd31b9be59e965a627b9b6"}, "created_at": 1672281843.2105892, "compiled_code": "\n    \n    \n\nwith child as (\n    select TX_ID as from_field\n    from TERRA_DEV.silver.governance_submit_proposal\n    where TX_ID is not null\n),\n\nparent as (\n    select tx_id as to_field\n    from TERRA_DEV.silver.transactions\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR.7af3aa957c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f4489c754bb0313d50837f474a4ca62f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR.7af3aa957c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f4489c754bb0313d50837f474a4ca62f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f4489c754bb0313d50837f474a4ca62f.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR", "alias": "governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_f4489c754bb0313d50837f474a4ca62f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f4489c754bb0313d50837f474a4ca62f"}, "created_at": 1672281843.2212677, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_TX_SUCCEEDED.3728678fd9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_TX_SUCCEEDED.3728678fd9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_TX_SUCCEEDED", "alias": "governance_submit_proposal_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2275085, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean.ff3553163b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["boolean"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d17c4ff45dfda7b7221274a4c96fcd04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean.ff3553163b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d17c4ff45dfda7b7221274a4c96fcd04\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d17c4ff45dfda7b7221274a4c96fcd04.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean", "alias": "governance_submit_proposal_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_d17c4ff45dfda7b7221274a4c96fcd04.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d17c4ff45dfda7b7221274a4c96fcd04"}, "created_at": 1672281843.2296472, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_PROPOSER.51a248ebc4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_PROPOSER"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_PROPOSER.51a248ebc4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_PROPOSER.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_PROPOSER", "alias": "governance_submit_proposal_PROPOSER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_PROPOSER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2354674, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere PROPOSER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_PROPOSER", "column_name": "PROPOSER", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR.29a95924a4": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e3f98a0c81c1011f4a61af82fca8ad1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR.29a95924a4", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e3f98a0c81c1011f4a61af82fca8ad1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3e3f98a0c81c1011f4a61af82fca8ad1.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR", "alias": "governance_submit_proposal_PROPOSER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_3e3f98a0c81c1011f4a61af82fca8ad1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3e3f98a0c81c1011f4a61af82fca8ad1"}, "created_at": 1672281843.237584, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_PROPOSER", "column_name": "PROPOSER", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_ID.b8f0c6f0fa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_PROPOSAL_ID"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_ID.b8f0c6f0fa", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_PROPOSAL_ID.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_PROPOSAL_ID", "alias": "governance_submit_proposal_PROPOSAL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_PROPOSAL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2438285, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere PROPOSAL_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_PROPOSAL_ID", "column_name": "PROPOSAL_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER.c96f72f85c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "PROPOSAL_ID", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6cd6b068d5b51d9df2c5b35ee51a85ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER.c96f72f85c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6cd6b068d5b51d9df2c5b35ee51a85ff\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6cd6b068d5b51d9df2c5b35ee51a85ff.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER", "alias": "governance_submit_proposal_PROPOSAL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_6cd6b068d5b51d9df2c5b35ee51a85ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6cd6b068d5b51d9df2c5b35ee51a85ff"}, "created_at": 1672281843.2459118, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_PROPOSAL_ID", "column_name": "PROPOSAL_ID", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.dbda3680fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_TYPE", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal_PROPOSAL_TYPE"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.dbda3680fd", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal_PROPOSAL_TYPE", "alias": "governance_submit_proposal_PROPOSAL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.251681, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere PROPOSAL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal_PROPOSAL_TYPE", "column_name": "PROPOSAL_TYPE", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.9359900f72": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "STRING"], "column_name": "PROPOSAL_TYPE", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14d2f8e999a6a27aa016dda18f2488a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.9359900f72", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14d2f8e999a6a27aa016dda18f2488a6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_14d2f8e999a6a27aa016dda18f2488a6.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING", "alias": "governance_submit_proposal_PROPOSAL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_14d2f8e999a6a27aa016dda18f2488a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_14d2f8e999a6a27aa016dda18f2488a6"}, "created_at": 1672281843.2537653, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_TYPE'\n            and\n            relation_column_type not in ('VARCHAR', 'STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal_PROPOSAL_TYPE", "column_name": "PROPOSAL_TYPE", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.cfc79bcad1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.cfc79bcad1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP", "alias": "governance_submit_proposal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2599664, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_submit_proposal\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_submit_proposal", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz.df3fa3fdd2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["timestamp_ntz"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_441dae740236d28d7794978060500b84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz.df3fa3fdd2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_441dae740236d28d7794978060500b84\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_441dae740236d28d7794978060500b84.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz", "alias": "governance_submit_proposal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_expectations_expect_column_441dae740236d28d7794978060500b84.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_441dae740236d28d7794978060500b84"}, "created_at": 1672281843.2620497, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_submit_proposal", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID.e7cadc9d82": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__governance_submit_proposal')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a5925586cdec9264bffabb12eb6ae7de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID.e7cadc9d82", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a5925586cdec9264bffabb12eb6ae7de\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_a5925586cdec9264bffabb12eb6ae7de.sql", "original_file_path": "models/silver/silver__governance_submit_proposal.yml", "name": "dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID", "alias": "governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_submit_proposal.yml/dbt_utils_unique_combination_o_a5925586cdec9264bffabb12eb6ae7de.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_a5925586cdec9264bffabb12eb6ae7de"}, "created_at": 1672281843.2678206, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from TERRA_DEV.silver.governance_submit_proposal\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.governance_submit_proposal_TX_ID", "column_name": null, "file_key_name": "models.silver__governance_submit_proposal"}, "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__transactions__inserted_timestamp"], "unique_id": "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__transactions__inserted_timestamp.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions__inserted_timestamp", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transactions.yml/not_null_silver__transactions__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2823424, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.transactions\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.transactions", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__transactions.yml/dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1394dcc1ca98fae690bad1257bbd48c9"}, "created_at": 1672281843.2845726, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_RAW' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__transactions"}, "test.terra.not_null_silver__staking_ACTION.91a24f522a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_ACTION"], "unique_id": "test.terra.not_null_silver__staking_ACTION.91a24f522a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_ACTION.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_ACTION", "alias": "staking_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2969081, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_ACTION", "column_name": "ACTION", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_BLOCKCHAIN.58801fa4bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__staking_BLOCKCHAIN.58801fa4bb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_BLOCKCHAIN", "alias": "staking_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.2994423, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_BLOCK_ID.1d5493faed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__staking_BLOCK_ID.1d5493faed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_BLOCK_ID.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_BLOCK_ID", "alias": "staking_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3015747, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_BLOCK_TIMESTAMP.c6ce91983d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__staking_BLOCK_TIMESTAMP.c6ce91983d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_BLOCK_TIMESTAMP", "alias": "staking_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3037236, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1.8c14a74a71": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d158d5a7c7ce75189533b9fab14685ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1.8c14a74a71", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d158d5a7c7ce75189533b9fab14685ec\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_d158d5a7c7ce75189533b9fab14685ec.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1", "alias": "staking_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_expectations_expect_row_va_d158d5a7c7ce75189533b9fab14685ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_row_va_d158d5a7c7ce75189533b9fab14685ec"}, "created_at": 1672281843.3058653, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.silver.staking\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.staking_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_CHAIN_ID.3ba9c15357": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__staking_CHAIN_ID.3ba9c15357", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_CHAIN_ID.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_CHAIN_ID", "alias": "staking_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3446667, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_DELEGATOR_ADDRESS.36dee98f10": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_DELEGATOR_ADDRESS"], "unique_id": "test.terra.not_null_silver__staking_DELEGATOR_ADDRESS.36dee98f10", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_DELEGATOR_ADDRESS.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_DELEGATOR_ADDRESS", "alias": "staking_DELEGATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_DELEGATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.346834, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere DELEGATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_DELEGATOR_ADDRESS", "column_name": "DELEGATOR_ADDRESS", "file_key_name": "models.silver__staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.bca8b49c5d": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "DELEGATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee2e1f3a2e5717a9bbc36ddbfda36a75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.bca8b49c5d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee2e1f3a2e5717a9bbc36ddbfda36a75\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ee2e1f3a2e5717a9bbc36ddbfda36a75.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_", "alias": "staking_DELEGATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_expectations_expect_column_ee2e1f3a2e5717a9bbc36ddbfda36a75.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ee2e1f3a2e5717a9bbc36ddbfda36a75"}, "created_at": 1672281843.348949, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(DELEGATOR_ADDRESS, 'terra[0-9a-z]{39,39}', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.silver.staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.staking_DELEGATOR_ADDRESS", "column_name": "DELEGATOR_ADDRESS", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_AMOUNT.7d0bf3ba53": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_AMOUNT"], "unique_id": "test.terra.not_null_silver__staking_AMOUNT.7d0bf3ba53", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_AMOUNT.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_AMOUNT", "alias": "staking_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3708525, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__staking"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float.57f1ccc017": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_30d4da5125813b960e0e4ba0e071691f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float.57f1ccc017", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_30d4da5125813b960e0e4ba0e071691f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_30d4da5125813b960e0e4ba0e071691f.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float", "alias": "staking_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_expectations_expect_column_30d4da5125813b960e0e4ba0e071691f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_30d4da5125813b960e0e4ba0e071691f"}, "created_at": 1672281843.3736594, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('STAKING_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_SRC_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.staking_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_TX_ID.79d5b2c618": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_TX_ID"], "unique_id": "test.terra.not_null_silver__staking_TX_ID.79d5b2c618", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_TX_ID.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_TX_ID", "alias": "staking_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3807402, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_TX_SUCCEEDED.94eab542e4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__staking_TX_SUCCEEDED.94eab542e4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_TX_SUCCEEDED", "alias": "staking_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3833213, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__staking"}, "test.terra.not_null_silver__staking_VALIDATOR_ADDRESS.3d65954499": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__staking_VALIDATOR_ADDRESS"], "unique_id": "test.terra.not_null_silver__staking_VALIDATOR_ADDRESS.3d65954499", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__staking_VALIDATOR_ADDRESS.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "not_null_silver__staking_VALIDATOR_ADDRESS", "alias": "staking_VALIDATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/not_null_silver__staking_VALIDATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.3854697, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.staking\nwhere VALIDATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.staking_VALIDATOR_ADDRESS", "column_name": "VALIDATOR_ADDRESS", "file_key_name": "models.silver__staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.f29a9793eb": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terravaloper1[0-9a-z]", "column_name": "VALIDATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27f7e17a0ae6bd09e565e38dcf5db0af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.f29a9793eb", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27f7e17a0ae6bd09e565e38dcf5db0af\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_27f7e17a0ae6bd09e565e38dcf5db0af.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_", "alias": "staking_VALIDATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_expectations_expect_column_27f7e17a0ae6bd09e565e38dcf5db0af.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_27f7e17a0ae6bd09e565e38dcf5db0af"}, "created_at": 1672281843.3876376, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(VALIDATOR_ADDRESS, 'terravaloper1[0-9a-z]', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.silver.staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.staking_VALIDATOR_ADDRESS", "column_name": "VALIDATOR_ADDRESS", "file_key_name": "models.silver__staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.a87768f890": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terravaloper1[0-9a-z]", "column_name": "VALIDATOR_SRC_ADDRESS", "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d21433dacd8261c09a832cbe0bfb299b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.a87768f890", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d21433dacd8261c09a832cbe0bfb299b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d21433dacd8261c09a832cbe0bfb299b.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_", "alias": "staking_VALIDATOR_SRC_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_expectations_expect_column_d21433dacd8261c09a832cbe0bfb299b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d21433dacd8261c09a832cbe0bfb299b"}, "created_at": 1672281843.3941123, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(VALIDATOR_SRC_ADDRESS, 'terravaloper1[0-9a-z]', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.silver.staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.staking_VALIDATOR_SRC_ADDRESS", "column_name": "VALIDATOR_SRC_ADDRESS", "file_key_name": "models.silver__staking"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID.11614d03a0": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["STAKING_ID"], "model": "{{ get_where_subquery(ref('silver__staking')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__staking"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_91316729623b7aeb0a22ae5c36a92f62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID.11614d03a0", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_91316729623b7aeb0a22ae5c36a92f62\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_91316729623b7aeb0a22ae5c36a92f62.sql", "original_file_path": "models/silver/silver__staking.yml", "name": "dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID", "alias": "staking_STAKING_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__staking.yml/dbt_utils_unique_combination_o_91316729623b7aeb0a22ae5c36a92f62.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_91316729623b7aeb0a22ae5c36a92f62"}, "created_at": 1672281843.4004426, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        STAKING_ID\n    from TERRA_DEV.silver.staking\n    group by STAKING_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.staking_STAKING_ID", "column_name": null, "file_key_name": "models.silver__staking"}, "test.terra.unique_silver__msg_attributes_MESSAGE_ID.232c3d33b4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__msg_attributes_MESSAGE_ID"], "unique_id": "test.terra.unique_silver__msg_attributes_MESSAGE_ID.232c3d33b4", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__msg_attributes_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "unique_silver__msg_attributes_MESSAGE_ID", "alias": "msg_attributes_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/unique_silver__msg_attributes_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.4150221, "compiled_code": "\n    \n    \n\nselect\n    MESSAGE_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.msg_attributes\nwhere MESSAGE_ID is not null\ngroup by MESSAGE_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.msg_attributes_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_MESSAGE_ID.1359329b17": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_MESSAGE_ID"], "unique_id": "test.terra.not_null_silver__msg_attributes_MESSAGE_ID.1359329b17", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_MESSAGE_ID", "alias": "msg_attributes_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.4173353, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR.2614ecbecb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ef01ea56fec6145683410b2ce6899b3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR.2614ecbecb", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ef01ea56fec6145683410b2ce6899b3c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ef01ea56fec6145683410b2ce6899b3c.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR", "alias": "msg_attributes_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_ef01ea56fec6145683410b2ce6899b3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ef01ea56fec6145683410b2ce6899b3c"}, "created_at": 1672281843.4194808, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_BLOCK_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_BLOCK_ID", "alias": "msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.425696, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT", "alias": "msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_efe82c7be91b1b413fbb73b28d2e0191"}, "created_at": 1672281843.4278083, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP", "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.4339883, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8"}, "created_at": 1672281843.4361184, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_BLOCKCHAIN.9d8129186b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__msg_attributes_BLOCKCHAIN.9d8129186b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_BLOCKCHAIN", "alias": "msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.442858, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msg_attributes"}, "test.terra.accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.a8eb99e878": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__msg_attributes_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.a8eb99e878", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "accepted_values_silver__msg_attributes_BLOCKCHAIN__terra", "alias": "msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.444983, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.msg_attributes\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR.49c79f99ba": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4608edae346c5af8384334a2c2ed3af2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR.49c79f99ba", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4608edae346c5af8384334a2c2ed3af2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4608edae346c5af8384334a2c2ed3af2.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR", "alias": "msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_4608edae346c5af8384334a2c2ed3af2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_4608edae346c5af8384334a2c2ed3af2"}, "created_at": 1672281843.4506805, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_CHAIN_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_CHAIN_ID", "alias": "msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.4569697, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.57d377cf49": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.57d377cf49", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1", "alias": "msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.459108, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.msg_attributes\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR.10f84b6d48": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12643b7d30d1d94667f2ae08c20f863b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR.10f84b6d48", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12643b7d30d1d94667f2ae08c20f863b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_12643b7d30d1d94667f2ae08c20f863b.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR", "alias": "msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_12643b7d30d1d94667f2ae08c20f863b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_12643b7d30d1d94667f2ae08c20f863b"}, "created_at": 1672281843.4647224, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_TX_ID.34f30240c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_TX_ID"], "unique_id": "test.terra.not_null_silver__msg_attributes_TX_ID.34f30240c0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_TX_ID.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_TX_ID", "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.4706962, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR.a96512f8d5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_972abcbd3782844490dbcf14f556c7f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR.a96512f8d5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_972abcbd3782844490dbcf14f556c7f4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_972abcbd3782844490dbcf14f556c7f4.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR", "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_972abcbd3782844490dbcf14f556c7f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_972abcbd3782844490dbcf14f556c7f4"}, "created_at": 1672281843.4731033, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_TX_SUCCEEDED.cedeb82ac7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__msg_attributes_TX_SUCCEEDED.cedeb82ac7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_TX_SUCCEEDED", "alias": "msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.478648, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN.9895376246": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d1532353edac9718793c2b7b0aa35883", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN.9895376246", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d1532353edac9718793c2b7b0aa35883\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d1532353edac9718793c2b7b0aa35883.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN", "alias": "msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_d1532353edac9718793c2b7b0aa35883.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d1532353edac9718793c2b7b0aa35883"}, "created_at": 1672281843.4810913, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR.86b8c41d0b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a77bf70ece24351928c19469cf8f8ce3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR.86b8c41d0b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a77bf70ece24351928c19469cf8f8ce3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a77bf70ece24351928c19469cf8f8ce3.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR", "alias": "msg_attributes_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_a77bf70ece24351928c19469cf8f8ce3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a77bf70ece24351928c19469cf8f8ce3"}, "created_at": 1672281843.4866352, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_MSG_INDEX"], "unique_id": "test.terra.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_MSG_INDEX.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_MSG_INDEX", "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.492794, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER.696aed84ea": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a9af1b0fe4ea99c9a52cd3d9c541fbcc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER.696aed84ea", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a9af1b0fe4ea99c9a52cd3d9c541fbcc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a9af1b0fe4ea99c9a52cd3d9c541fbcc.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER", "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_a9af1b0fe4ea99c9a52cd3d9c541fbcc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a9af1b0fe4ea99c9a52cd3d9c541fbcc"}, "created_at": 1672281843.4949274, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_MSG_TYPE"], "unique_id": "test.terra.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_MSG_TYPE.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_MSG_TYPE", "alias": "msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5006897, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR.17ab615e68": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2bd89c2c2cc85d367f314494cd83642d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR.17ab615e68", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2bd89c2c2cc85d367f314494cd83642d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2bd89c2c2cc85d367f314494cd83642d.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR", "alias": "msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_2bd89c2c2cc85d367f314494cd83642d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2bd89c2c2cc85d367f314494cd83642d"}, "created_at": 1672281843.5028303, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_KEY.2f7c4d2b9b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_ATTRIBUTE_KEY"], "unique_id": "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_KEY.2f7c4d2b9b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_ATTRIBUTE_KEY.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_ATTRIBUTE_KEY", "alias": "msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_ATTRIBUTE_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5087442, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere ATTRIBUTE_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_ATTRIBUTE_KEY", "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR.a7f75ef027": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6b69bdac06ef959cfe0be73ea8eb60ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR.a7f75ef027", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6b69bdac06ef959cfe0be73ea8eb60ec\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6b69bdac06ef959cfe0be73ea8eb60ec.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR", "alias": "msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_6b69bdac06ef959cfe0be73ea8eb60ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6b69bdac06ef959cfe0be73ea8eb60ec"}, "created_at": 1672281843.5108716, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_KEY'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_ATTRIBUTE_KEY", "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_VALUE.99f5b0d6cf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_ATTRIBUTE_VALUE"], "unique_id": "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_VALUE.99f5b0d6cf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_ATTRIBUTE_VALUE.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_ATTRIBUTE_VALUE", "alias": "msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_ATTRIBUTE_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5167348, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere ATTRIBUTE_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_ATTRIBUTE_VALUE", "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR.4d49a23e6c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_377ead71082bdc24c7dd81df8d7a6008", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR.4d49a23e6c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_377ead71082bdc24c7dd81df8d7a6008\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_377ead71082bdc24c7dd81df8d7a6008.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR", "alias": "msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_377ead71082bdc24c7dd81df8d7a6008.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_377ead71082bdc24c7dd81df8d7a6008"}, "created_at": 1672281843.5188737, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_VALUE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_ATTRIBUTE_VALUE", "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_INDEX.ebb4277390": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msg_attributes_ATTRIBUTE_INDEX"], "unique_id": "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_INDEX.ebb4277390", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msg_attributes_ATTRIBUTE_INDEX.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_ATTRIBUTE_INDEX", "alias": "msg_attributes_ATTRIBUTE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/not_null_silver__msg_attributes_ATTRIBUTE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.524759, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msg_attributes\nwhere ATTRIBUTE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msg_attributes_ATTRIBUTE_INDEX", "column_name": "ATTRIBUTE_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER.fda54d56e0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "ATTRIBUTE_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9ed245a4cdcef943d23205340b7dbd37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER.fda54d56e0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9ed245a4cdcef943d23205340b7dbd37\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_9ed245a4cdcef943d23205340b7dbd37.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER", "alias": "msg_attributes_ATTRIBUTE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_expectations_expect_column_9ed245a4cdcef943d23205340b7dbd37.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_9ed245a4cdcef943d23205340b7dbd37"}, "created_at": 1672281843.5268962, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_ATTRIBUTE_INDEX", "column_name": "ATTRIBUTE_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id.43d4a9c13a": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["message_id"], "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e59f9e88decd5b571edd948532c8fe5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id.43d4a9c13a", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e59f9e88decd5b571edd948532c8fe5b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_e59f9e88decd5b571edd948532c8fe5b.sql", "original_file_path": "models/silver/silver__msg_attributes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id", "alias": "msg_attributes_message_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msg_attributes.yml/dbt_utils_unique_combination_o_e59f9e88decd5b571edd948532c8fe5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_e59f9e88decd5b571edd948532c8fe5b"}, "created_at": 1672281843.532804, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        message_id\n    from TERRA_DEV.silver.msg_attributes\n    group by message_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.msg_attributes_message_id", "column_name": null, "file_key_name": "models.silver__msg_attributes"}, "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5508287, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b44717224814459d13868dfb4e1a4c7e"}, "created_at": 1672281843.5530648, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5593557, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1672281843.5614657, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.5673306, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bd9a81b5e0e313f84cccd05b0d955d14"}, "created_at": 1672281843.5694358, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_HASH"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HASH", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.575232, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_8ad15f636cb12685be9b547c27abdb77"}, "created_at": 1672281843.5773227, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CHAIN_ID", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.583577, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5f249e503d738719b2c03025e42e2b0a"}, "created_at": 1672281843.5856874, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_CONSENSUS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_CONSENSUS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_CONSENSUS_HASH", "alias": "blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_CONSENSUS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.591927, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere CONSENSUS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR", "alias": "blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bb647c9762cdf8f547dcabbdbbf039d8"}, "created_at": 1672281843.5940151, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONSENSUS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_DATA_HASH"], "unique_id": "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_DATA_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_DATA_HASH", "alias": "blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_DATA_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6003444, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere DATA_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR", "alias": "blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_e3f2ac5e808d7ea698d8d308d1576430"}, "created_at": 1672281843.6024399, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_EVIDENCE"], "unique_id": "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_EVIDENCE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EVIDENCE", "alias": "blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_EVIDENCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6087055, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere EVIDENCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "VARIANT"], "column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT", "alias": "blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_061fc0472ef69f225a62da9c5ae8b8d9"}, "created_at": 1672281843.6108286, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE'\n            and\n            relation_column_type not in ('VARCHAR', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_EVIDENCE_HASH"], "unique_id": "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_EVIDENCE_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EVIDENCE_HASH", "alias": "blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_EVIDENCE_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6170747, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere EVIDENCE_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR", "alias": "blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2560290736cdbaf4c593c7437c4917b0"}, "created_at": 1672281843.6191943, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_BLOCK_HEIGHT"], "unique_id": "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEIGHT", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6253908, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER", "alias": "blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cdc58a7fdc5f825580b5c9a0264e124f"}, "created_at": 1672281843.6274831, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_BLOCK_ID.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_BLOCK_ID", "alias": "blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6332304, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT", "alias": "blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6c78fd49f52dbe00c84fa42f50f9adfa"}, "created_at": 1672281843.6353552, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_BLOCK_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_COMMIT"], "unique_id": "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_COMMIT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_COMMIT", "alias": "blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_COMMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6427877, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_COMMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT", "alias": "blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a1ab3e7ada64fb255d2883285441c60b"}, "created_at": 1672281843.6448884, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_COMMIT_HASH"], "unique_id": "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_COMMIT_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_COMMIT_HASH", "alias": "blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_COMMIT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.650723, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_COMMIT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR", "alias": "blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_57eac9d4282e938c38e6732a29b5e136"}, "created_at": 1672281843.6528296, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_LAST_RESULTS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_LAST_RESULTS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_LAST_RESULTS_HASH", "alias": "blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_LAST_RESULTS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6591094, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere LAST_RESULTS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR", "alias": "blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_578f2b38c72ef98d5a15ea19861cca6b"}, "created_at": 1672281843.6612175, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_RESULTS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_NEXT_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_NEXT_VALIDATORS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NEXT_VALIDATORS_HASH", "alias": "blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_NEXT_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.667603, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere NEXT_VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_112a835632045376c2d31024bccbe019\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR", "alias": "blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_112a835632045376c2d31024bccbe019.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_112a835632045376c2d31024bccbe019"}, "created_at": 1672281843.6697283, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_PROPOSER_ADDRESS"], "unique_id": "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PROPOSER_ADDRESS", "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_PROPOSER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6760564, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR", "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_e33a9da8fca5d9e7e3b70a44e100360a"}, "created_at": 1672281843.6781788, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_VALIDATORS_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATORS_HASH", "alias": "blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6845286, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR", "alias": "blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ad48eda0f86495e256b43ac9eeb44bef"}, "created_at": 1672281843.6866722, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.98926ccf35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_ADDRESS_ARRAY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY"], "unique_id": "test.terra.not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.98926ccf35", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY", "alias": "blocks_VALIDATOR_ADDRESS_ARRAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.6930218, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere VALIDATOR_ADDRESS_ARRAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks_VALIDATOR_ADDRESS_ARRAY", "column_name": "VALIDATOR_ADDRESS_ARRAY", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.fc63f1144c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "VALIDATOR_ADDRESS_ARRAY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f04b6d15821de9470dd5d471e10e34a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.fc63f1144c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f04b6d15821de9470dd5d471e10e34a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1f04b6d15821de9470dd5d471e10e34a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT", "alias": "blocks_VALIDATOR_ADDRESS_ARRAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1f04b6d15821de9470dd5d471e10e34a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1f04b6d15821de9470dd5d471e10e34a"}, "created_at": 1672281843.6951652, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_ADDRESS_ARRAY'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_VALIDATOR_ADDRESS_ARRAY", "column_name": "VALIDATOR_ADDRESS_ARRAY", "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__blocks__INSERTED_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks__INSERTED_TIMESTAMP", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/not_null_silver__blocks__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.701876, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.blocks\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.blocks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bf65ab6ab39fe0c1d3b520cc329b4169"}, "created_at": 1672281843.7040343, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_block_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_block_id", "alias": "blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__blocks.yml/dbt_utils_unique_combination_of_columns_silver__blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7099617, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from TERRA_DEV.silver.blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.blocks_block_id", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.terra.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_BLOCK_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_ID", "alias": "nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7243013, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT.487566274a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea9ca8cc0ddb9882dbfbbab22a924c45", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT.487566274a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea9ca8cc0ddb9882dbfbbab22a924c45\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ea9ca8cc0ddb9882dbfbbab22a924c45.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT", "alias": "nft_mints_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_ea9ca8cc0ddb9882dbfbbab22a924c45.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ea9ca8cc0ddb9882dbfbbab22a924c45"}, "created_at": 1672281843.726559, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCK_TIMESTAMP", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7330117, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ef89499fa3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_006095bdba031f41434b5b90d967c5b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ef89499fa3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_006095bdba031f41434b5b90d967c5b5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_006095bdba031f41434b5b90d967c5b5.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_006095bdba031f41434b5b90d967c5b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_006095bdba031f41434b5b90d967c5b5"}, "created_at": 1672281843.7352147, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_BLOCKCHAIN.4b8224fea8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__nft_mints_BLOCKCHAIN.4b8224fea8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_BLOCKCHAIN", "alias": "nft_mints_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7417853, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR.d51c1aaa45": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5e669ea2d385a7e38359dfa1113cf72e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR.d51c1aaa45", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5e669ea2d385a7e38359dfa1113cf72e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5e669ea2d385a7e38359dfa1113cf72e.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR", "alias": "nft_mints_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_5e669ea2d385a7e38359dfa1113cf72e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5e669ea2d385a7e38359dfa1113cf72e"}, "created_at": 1672281843.7439008, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_CHAIN_ID.4fea72c533": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__nft_mints_CHAIN_ID.4fea72c533", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_CHAIN_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_CHAIN_ID", "alias": "nft_mints_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7501447, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR.c974fe9f51": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cfd8ec9dc6b1166064f3af397bdf89f2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR.c974fe9f51", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cfd8ec9dc6b1166064f3af397bdf89f2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cfd8ec9dc6b1166064f3af397bdf89f2.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR", "alias": "nft_mints_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_cfd8ec9dc6b1166064f3af397bdf89f2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cfd8ec9dc6b1166064f3af397bdf89f2"}, "created_at": 1672281843.7522638, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_TX_ID.44c0221884": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_TX_ID"], "unique_id": "test.terra.not_null_silver__nft_mints_TX_ID.44c0221884", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_TX_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_TX_ID", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7585156, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR.43dc724771": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a9c68f7f1b6aedf5f579c6c18ac3be8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR.43dc724771", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a9c68f7f1b6aedf5f579c6c18ac3be8e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a9c68f7f1b6aedf5f579c6c18ac3be8e.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR", "alias": "nft_mints_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_a9c68f7f1b6aedf5f579c6c18ac3be8e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a9c68f7f1b6aedf5f579c6c18ac3be8e"}, "created_at": 1672281843.7606065, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_TX_SUCCEEDED.43b685cb51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__nft_mints_TX_SUCCEEDED.43b685cb51", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_TX_SUCCEEDED", "alias": "nft_mints_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.7668447, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN.f77aed189b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0bb1b663f8605c009821412f1293ae72", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN.f77aed189b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0bb1b663f8605c009821412f1293ae72\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_0bb1b663f8605c009821412f1293ae72.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN", "alias": "nft_mints_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_0bb1b663f8605c009821412f1293ae72.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_0bb1b663f8605c009821412f1293ae72"}, "created_at": 1672281843.7689567, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR.a3451ec2e6": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MINTER", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6655ac87656d5c14b3c8ed5a2606f8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR.a3451ec2e6", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6655ac87656d5c14b3c8ed5a2606f8e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c6655ac87656d5c14b3c8ed5a2606f8e.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR", "alias": "nft_mints_MINTER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_c6655ac87656d5c14b3c8ed5a2606f8e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c6655ac87656d5c14b3c8ed5a2606f8e"}, "created_at": 1672281843.7748682, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MINTER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_MINTER", "column_name": "MINTER", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR.17d74a51e7": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_69f62e8fa7ad283ea76c9485c58fcab4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR.17d74a51e7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_69f62e8fa7ad283ea76c9485c58fcab4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_69f62e8fa7ad283ea76c9485c58fcab4.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR", "alias": "nft_mints_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_69f62e8fa7ad283ea76c9485c58fcab4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_69f62e8fa7ad283ea76c9485c58fcab4"}, "created_at": 1672281843.7810931, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONTRACT_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR.988de005da": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "VARCHAR"], "column_name": "TOKEN_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3670f2f3e3caa8796d227fe1f0aedbf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR.988de005da", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3670f2f3e3caa8796d227fe1f0aedbf5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3670f2f3e3caa8796d227fe1f0aedbf5.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR", "alias": "nft_mints_TOKEN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_3670f2f3e3caa8796d227fe1f0aedbf5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3670f2f3e3caa8796d227fe1f0aedbf5"}, "created_at": 1672281843.7873774, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_ID'\n            and\n            relation_column_type not in ('NUMBER', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_TOKEN_ID", "column_name": "TOKEN_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER.75ca545958": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MINT_PRICE", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37c2610ec9db34d411c5beddfd94fcaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER.75ca545958", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37c2610ec9db34d411c5beddfd94fcaf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_37c2610ec9db34d411c5beddfd94fcaf.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER", "alias": "nft_mints_MINT_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_37c2610ec9db34d411c5beddfd94fcaf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_37c2610ec9db34d411c5beddfd94fcaf"}, "created_at": 1672281843.793289, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MINT_PRICE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_MINT_PRICE", "column_name": "MINT_PRICE", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR.3478f088ec": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1fcd4770aa4ccca25a9bc309b52af5c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR.3478f088ec", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1fcd4770aa4ccca25a9bc309b52af5c4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1fcd4770aa4ccca25a9bc309b52af5c4.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR", "alias": "nft_mints_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_1fcd4770aa4ccca25a9bc309b52af5c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1fcd4770aa4ccca25a9bc309b52af5c4"}, "created_at": 1672281843.7990577, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_CURRENCY", "column_name": "CURRENCY", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER.027ee791a3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fe517d8cedbe8f6b19d28222e4aeb5c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER.027ee791a3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fe517d8cedbe8f6b19d28222e4aeb5c6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_fe517d8cedbe8f6b19d28222e4aeb5c6.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER", "alias": "nft_mints_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_fe517d8cedbe8f6b19d28222e4aeb5c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_fe517d8cedbe8f6b19d28222e4aeb5c6"}, "created_at": 1672281843.8052342, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMAL'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_DECIMAL", "column_name": "DECIMAL", "file_key_name": "models.silver__nft_mints"}, "test.terra.not_null_silver__nft_mints_MINT_ID.d8609e2853": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_mints_MINT_ID"], "unique_id": "test.terra.not_null_silver__nft_mints_MINT_ID.d8609e2853", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_mints_MINT_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "not_null_silver__nft_mints_MINT_ID", "alias": "nft_mints_MINT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/not_null_silver__nft_mints_MINT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.811062, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_mints\nwhere MINT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_mints_MINT_ID", "column_name": "MINT_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.unique_silver__nft_mints_MINT_ID.46519323a6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "MINT_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__nft_mints_MINT_ID"], "unique_id": "test.terra.unique_silver__nft_mints_MINT_ID.46519323a6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__nft_mints_MINT_ID.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "unique_silver__nft_mints_MINT_ID", "alias": "nft_mints_MINT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/unique_silver__nft_mints_MINT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.8131545, "compiled_code": "\n    \n    \n\nselect\n    MINT_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.nft_mints\nwhere MINT_ID is not null\ngroup by MINT_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.nft_mints_MINT_ID", "column_name": "MINT_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR.4033da91bc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MINT_ID", "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37714a4b7084056e15cd5e648ebb1948", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR.4033da91bc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37714a4b7084056e15cd5e648ebb1948\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_37714a4b7084056e15cd5e648ebb1948.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR", "alias": "nft_mints_MINT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_expectations_expect_column_37714a4b7084056e15cd5e648ebb1948.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_37714a4b7084056e15cd5e648ebb1948"}, "created_at": 1672281843.815252, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINT_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MINT_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_mints_MINT_ID", "column_name": "MINT_ID", "file_key_name": "models.silver__nft_mints"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID.467eb8880e": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["MINT_ID"], "model": "{{ get_where_subquery(ref('silver__nft_mints')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_mints"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_381b3e05b2da6b4c8d08ce67b57dcdfe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID.467eb8880e", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_381b3e05b2da6b4c8d08ce67b57dcdfe\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_381b3e05b2da6b4c8d08ce67b57dcdfe.sql", "original_file_path": "models/silver/silver__nft_mints.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID", "alias": "nft_mints_MINT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_mints.yml/dbt_utils_unique_combination_o_381b3e05b2da6b4c8d08ce67b57dcdfe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_381b3e05b2da6b4c8d08ce67b57dcdfe"}, "created_at": 1672281843.8215163, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        MINT_ID\n    from TERRA_DEV.silver.nft_mints\n    group by MINT_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.nft_mints_MINT_ID", "column_name": null, "file_key_name": "models.silver__nft_mints"}, "test.terra.unique_silver__governance_votes_tx_id.c0612f2d27": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__governance_votes_tx_id"], "unique_id": "test.terra.unique_silver__governance_votes_tx_id.c0612f2d27", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__governance_votes_tx_id.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "unique_silver__governance_votes_tx_id", "alias": "governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/unique_silver__governance_votes_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.8357506, "compiled_code": "\n    \n    \n\nselect\n    tx_id as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.governance_votes\nwhere tx_id is not null\ngroup by tx_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_tx_id.df8b3c05ef": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_tx_id"], "unique_id": "test.terra.not_null_silver__governance_votes_tx_id.df8b3c05ef", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_tx_id.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_tx_id", "alias": "governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.8379433, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__transactions')", "field": "tx_id", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "relationships_silver__governan_504acec197fe7958789d00c6138c43d5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_"], "unique_id": "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__governan_504acec197fe7958789d00c6138c43d5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__governan_504acec197fe7958789d00c6138c43d5.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_", "alias": "governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/relationships_silver__governan_504acec197fe7958789d00c6138c43d5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__governan_504acec197fe7958789d00c6138c43d5"}, "created_at": 1672281843.840061, "compiled_code": "\n    \n    \n\nwith child as (\n    select tx_id as from_field\n    from TERRA_DEV.silver.governance_votes\n    where tx_id is not null\n),\n\nparent as (\n    select tx_id as to_field\n    from TERRA_DEV.silver.transactions\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar.c04b58bbb3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_adbc90f391ada932e357d3640abb6928", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar.c04b58bbb3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_adbc90f391ada932e357d3640abb6928\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_adbc90f391ada932e357d3640abb6928.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar", "alias": "governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_adbc90f391ada932e357d3640abb6928.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_adbc90f391ada932e357d3640abb6928"}, "created_at": 1672281843.9106796, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_block_id.b246709bad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_block_id"], "unique_id": "test.terra.not_null_silver__governance_votes_block_id.b246709bad", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_block_id.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_block_id", "alias": "governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9172351, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__blocks')", "field": "block_id", "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks", "model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "relationships_silver__governan_483bba55b822f9d80b814cd350527590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_"], "unique_id": "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__governan_483bba55b822f9d80b814cd350527590\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__governan_483bba55b822f9d80b814cd350527590.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_", "alias": "governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"], ["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/relationships_silver__governan_483bba55b822f9d80b814cd350527590.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__governan_483bba55b822f9d80b814cd350527590"}, "created_at": 1672281843.9194205, "compiled_code": "\n    \n    \n\nwith child as (\n    select block_id as from_field\n    from TERRA_DEV.silver.governance_votes\n    where block_id is not null\n),\n\nparent as (\n    select block_id as to_field\n    from TERRA_DEV.silver.blocks\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number.3e02ae1992": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d3a82f20d3dc52e76afba7e08b5137bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number.3e02ae1992", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d3a82f20d3dc52e76afba7e08b5137bf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d3a82f20d3dc52e76afba7e08b5137bf.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number", "alias": "governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_d3a82f20d3dc52e76afba7e08b5137bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d3a82f20d3dc52e76afba7e08b5137bf"}, "created_at": 1672281843.9260447, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_block_timestamp.bcff62180d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_block_timestamp"], "unique_id": "test.terra.not_null_silver__governance_votes_block_timestamp.bcff62180d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_block_timestamp.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_block_timestamp", "alias": "governance_votes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9318678, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz.2af65aa681": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["timestamp_ntz"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd94a756435dd3900719d26372aa1222", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz.2af65aa681", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd94a756435dd3900719d26372aa1222\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cd94a756435dd3900719d26372aa1222.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz", "alias": "governance_votes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_cd94a756435dd3900719d26372aa1222.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cd94a756435dd3900719d26372aa1222"}, "created_at": 1672281843.9339838, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_blockchain.917e05598d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_blockchain"], "unique_id": "test.terra.not_null_silver__governance_votes_blockchain.917e05598d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_blockchain.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_blockchain", "alias": "governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_blockchain.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.939804, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere blockchain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__governance_votes"}, "test.terra.accepted_values_silver__governance_votes_blockchain__terra.1313faedfb": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_votes_blockchain__terra"], "unique_id": "test.terra.accepted_values_silver__governance_votes_blockchain__terra.1313faedfb", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__governance_votes_blockchain__terra.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "accepted_values_silver__governance_votes_blockchain__terra", "alias": "governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/accepted_values_silver__governance_votes_blockchain__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9418974, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        blockchain as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_votes\n    group by blockchain\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar.dafe25a3ec": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5415794eaedaf88d24fad8f3a6b0d69b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar.dafe25a3ec", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5415794eaedaf88d24fad8f3a6b0d69b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5415794eaedaf88d24fad8f3a6b0d69b.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar", "alias": "governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_5415794eaedaf88d24fad8f3a6b0d69b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5415794eaedaf88d24fad8f3a6b0d69b"}, "created_at": 1672281843.9474914, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_chain_id.0ba2f00811": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_chain_id"], "unique_id": "test.terra.not_null_silver__governance_votes_chain_id.0ba2f00811", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_chain_id.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_chain_id", "alias": "governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9536366, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.accepted_values_silver__governance_votes_chain_id__phoenix_1.2bb13b7f2f": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_votes_chain_id__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__governance_votes_chain_id__phoenix_1.2bb13b7f2f", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__governance_votes_chain_id__phoenix_1.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "accepted_values_silver__governance_votes_chain_id__phoenix_1", "alias": "governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/accepted_values_silver__governance_votes_chain_id__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9557612, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        chain_id as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_votes\n    group by chain_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar.1cae213c3b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d547e014a3638b6ad71ef7a774518518", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar.1cae213c3b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d547e014a3638b6ad71ef7a774518518\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d547e014a3638b6ad71ef7a774518518.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar", "alias": "governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_d547e014a3638b6ad71ef7a774518518.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d547e014a3638b6ad71ef7a774518518"}, "created_at": 1672281843.961277, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_voter.b79dcecfed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "voter", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_voter"], "unique_id": "test.terra.not_null_silver__governance_votes_voter.b79dcecfed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_voter.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_voter", "alias": "governance_votes_voter", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_voter.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9674828, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere voter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_voter", "column_name": "voter", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar.a5818854a1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "voter", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_87789bf188d7289191c7f81b5cd2c3e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar.a5818854a1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_87789bf188d7289191c7f81b5cd2c3e5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_87789bf188d7289191c7f81b5cd2c3e5.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar", "alias": "governance_votes_voter", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_87789bf188d7289191c7f81b5cd2c3e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_87789bf188d7289191c7f81b5cd2c3e5"}, "created_at": 1672281843.96959, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_voter", "column_name": "voter", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_proposal_id.9f2a182ae5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposal_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_proposal_id"], "unique_id": "test.terra.not_null_silver__governance_votes_proposal_id.9f2a182ae5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_proposal_id.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_proposal_id", "alias": "governance_votes_proposal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_proposal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.97578, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere proposal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_proposal_id", "column_name": "proposal_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number.c89486b041": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "proposal_id", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_69541929cd700d4bc55d62fd2c6adae1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number.c89486b041", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_69541929cd700d4bc55d62fd2c6adae1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_69541929cd700d4bc55d62fd2c6adae1.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number", "alias": "governance_votes_proposal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_69541929cd700d4bc55d62fd2c6adae1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_69541929cd700d4bc55d62fd2c6adae1"}, "created_at": 1672281843.977877, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_proposal_id", "column_name": "proposal_id", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_vote_option.0608f8a31e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_option", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_vote_option"], "unique_id": "test.terra.not_null_silver__governance_votes_vote_option.0608f8a31e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_vote_option.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_vote_option", "alias": "governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_vote_option.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281843.9835901, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere vote_option is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1.48f56d4f06": {"test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 1, "max_value": 4, "column_name": "vote_option", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be643ab6c3d7d0a92993d9e2a09f296d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_between_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1.48f56d4f06", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be643ab6c3d7d0a92993d9e2a09f296d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_be643ab6c3d7d0a92993d9e2a09f296d.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1", "alias": "governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_be643ab6c3d7d0a92993d9e2a09f296d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_be643ab6c3d7d0a92993d9e2a09f296d"}, "created_at": 1672281843.9856822, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and vote_option >= 1 and vote_option <= 4\n)\n as expression\n\n\n    from TERRA_DEV.silver.governance_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_between_silver.governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number.de16532ee1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "vote_option", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b518b1c1a5236a0f8501001662994ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number.de16532ee1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b518b1c1a5236a0f8501001662994ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_0b518b1c1a5236a0f8501001662994ef.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number", "alias": "governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_0b518b1c1a5236a0f8501001662994ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_0b518b1c1a5236a0f8501001662994ef"}, "created_at": 1672281843.9989147, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_OPTION'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_vote_option_text.618c8b20cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_vote_option_text"], "unique_id": "test.terra.not_null_silver__governance_votes_vote_option_text.618c8b20cc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_vote_option_text.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_vote_option_text", "alias": "governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_vote_option_text.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0056276, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere vote_option_text is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.silver__governance_votes"}, "test.terra.accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.4ff3c1834e": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "Abstain", "No", "NoWithVeto"], "column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "accepted_values_silver__govern_82bfabe82d1ff1bb58a559e913de8b51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto"], "unique_id": "test.terra.accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.4ff3c1834e", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver__govern_82bfabe82d1ff1bb58a559e913de8b51\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__govern_82bfabe82d1ff1bb58a559e913de8b51.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto", "alias": "governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/accepted_values_silver__govern_82bfabe82d1ff1bb58a559e913de8b51.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "accepted_values_silver__govern_82bfabe82d1ff1bb58a559e913de8b51"}, "created_at": 1672281844.007767, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        vote_option_text as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_votes\n    group by vote_option_text\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','Abstain','No','NoWithVeto'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar.2f3898295e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14219eb8bf930ccb0195f220cd06a19f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar.2f3898295e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14219eb8bf930ccb0195f220cd06a19f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_14219eb8bf930ccb0195f220cd06a19f.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar", "alias": "governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_14219eb8bf930ccb0195f220cd06a19f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_14219eb8bf930ccb0195f220cd06a19f"}, "created_at": 1672281844.0149674, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_OPTION_TEXT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_vote_weight.58df7a828a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_weight", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_vote_weight"], "unique_id": "test.terra.not_null_silver__governance_votes_vote_weight.58df7a828a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_vote_weight.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_vote_weight", "alias": "governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_vote_weight.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0212045, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere vote_weight is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.silver__governance_votes"}, "test.terra.accepted_values_silver__governance_votes_vote_weight__1.a543ecdc40": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1], "column_name": "vote_weight", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__governance_votes_vote_weight__1"], "unique_id": "test.terra.accepted_values_silver__governance_votes_vote_weight__1.a543ecdc40", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__governance_votes_vote_weight__1.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "accepted_values_silver__governance_votes_vote_weight__1", "alias": "governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/accepted_values_silver__governance_votes_vote_weight__1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0234573, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        vote_weight as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.governance_votes\n    group by vote_weight\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number.1c2ecc79dd": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "vote_weight", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_657dcb6f73c4f0c81022c21e5f314da1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number.1c2ecc79dd", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_657dcb6f73c4f0c81022c21e5f314da1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_657dcb6f73c4f0c81022c21e5f314da1.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number", "alias": "governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_657dcb6f73c4f0c81022c21e5f314da1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_657dcb6f73c4f0c81022c21e5f314da1"}, "created_at": 1672281844.0287123, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_WEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes_tx_succeeded.d7ac3d5eed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes_tx_succeeded"], "unique_id": "test.terra.not_null_silver__governance_votes_tx_succeeded.d7ac3d5eed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes_tx_succeeded.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes_tx_succeeded", "alias": "governance_votes_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0342655, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean.cb89774290": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["boolean"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_90ef81bdcff2640a3c2ee8d0b8bd97e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean.cb89774290", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_90ef81bdcff2640a3c2ee8d0b8bd97e3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_90ef81bdcff2640a3c2ee8d0b8bd97e3.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean", "alias": "governance_votes_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_90ef81bdcff2640a3c2ee8d0b8bd97e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_90ef81bdcff2640a3c2ee8d0b8bd97e3"}, "created_at": 1672281844.0367098, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__governance_votes__inserted_timestamp.9f89102be5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__governance_votes__inserted_timestamp"], "unique_id": "test.terra.not_null_silver__governance_votes__inserted_timestamp.9f89102be5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__governance_votes__inserted_timestamp.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "not_null_silver__governance_votes__inserted_timestamp", "alias": "governance_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/not_null_silver__governance_votes__inserted_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0422883, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.governance_votes\nwhere _inserted_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.governance_votes", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz.68921ad682": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["timestamp_ntz"], "column_name": "_inserted_timestamp", "model": "{{ get_where_subquery(ref('silver__governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c197483793012f820f0473662688d023", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz.68921ad682", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c197483793012f820f0473662688d023\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c197483793012f820f0473662688d023.sql", "original_file_path": "models/silver/silver__governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz", "alias": "governance_votes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__governance_votes.yml/dbt_expectations_expect_column_c197483793012f820f0473662688d023.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c197483793012f820f0473662688d023"}, "created_at": 1672281844.0447223, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.governance_votes", "column_name": "_inserted_timestamp", "file_key_name": "models.silver__governance_votes"}, "test.terra.not_null_silver__token_labels_BLOCK_TIMESTAMP.4bab832ad2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__token_labels_BLOCK_TIMESTAMP.4bab832ad2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_BLOCK_TIMESTAMP", "alias": "token_labels_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0585842, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.062d3526af": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ffc0d27506f6683dd87678fdf21e7ba5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.062d3526af", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ffc0d27506f6683dd87678fdf21e7ba5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ffc0d27506f6683dd87678fdf21e7ba5.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "token_labels_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_ffc0d27506f6683dd87678fdf21e7ba5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ffc0d27506f6683dd87678fdf21e7ba5"}, "created_at": 1672281844.0608456, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_BLOCKCHAIN.d9542e6db2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__token_labels_BLOCKCHAIN.d9542e6db2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_BLOCKCHAIN", "alias": "token_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.066752, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR.4bed36173d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_81f614005a15b13c1627d9199454dd2e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR.4bed36173d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_81f614005a15b13c1627d9199454dd2e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_81f614005a15b13c1627d9199454dd2e.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR", "alias": "token_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_81f614005a15b13c1627d9199454dd2e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_81f614005a15b13c1627d9199454dd2e"}, "created_at": 1672281844.068884, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_TX_ID.ffb78ba8fc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_TX_ID"], "unique_id": "test.terra.not_null_silver__token_labels_TX_ID.ffb78ba8fc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_TX_ID.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_TX_ID", "alias": "token_labels_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0752964, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR.c1ee925822": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c4924ee74e2309a152e68f79a781a483", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR.c1ee925822", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c4924ee74e2309a152e68f79a781a483\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c4924ee74e2309a152e68f79a781a483.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR", "alias": "token_labels_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_c4924ee74e2309a152e68f79a781a483.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c4924ee74e2309a152e68f79a781a483"}, "created_at": 1672281844.0774193, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_LABEL.81e47ba4d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_LABEL"], "unique_id": "test.terra.not_null_silver__token_labels_LABEL.81e47ba4d9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_LABEL.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_LABEL", "alias": "token_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.083744, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_LABEL", "column_name": "LABEL", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR.4dcb4ce956": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_77249682aca3f866c5d1703e5153856c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR.4dcb4ce956", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_77249682aca3f866c5d1703e5153856c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_77249682aca3f866c5d1703e5153856c.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR", "alias": "token_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_77249682aca3f866c5d1703e5153856c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_77249682aca3f866c5d1703e5153856c"}, "created_at": 1672281844.0858407, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_LABEL", "column_name": "LABEL", "file_key_name": "models.silver__token_labels"}, "test.terra.unique_silver__token_labels_ADDRESS.f5cc09210f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__token_labels_ADDRESS"], "unique_id": "test.terra.unique_silver__token_labels_ADDRESS.f5cc09210f", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__token_labels_ADDRESS.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "unique_silver__token_labels_ADDRESS", "alias": "token_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/unique_silver__token_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0921519, "compiled_code": "\n    \n    \n\nselect\n    ADDRESS as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.token_labels\nwhere ADDRESS is not null\ngroup by ADDRESS\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.token_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_ADDRESS.95a925fdac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_ADDRESS"], "unique_id": "test.terra.not_null_silver__token_labels_ADDRESS.95a925fdac", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_ADDRESS.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_ADDRESS", "alias": "token_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.0942225, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR.c3efad0a50": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7fbdcb750361cfc95ae62fe2fa11f9b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR.c3efad0a50", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7fbdcb750361cfc95ae62fe2fa11f9b0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_7fbdcb750361cfc95ae62fe2fa11f9b0.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR", "alias": "token_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_7fbdcb750361cfc95ae62fe2fa11f9b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_7fbdcb750361cfc95ae62fe2fa11f9b0"}, "created_at": 1672281844.0963335, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_SYMBOL.3baa013084": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_SYMBOL"], "unique_id": "test.terra.not_null_silver__token_labels_SYMBOL.3baa013084", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_SYMBOL.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_SYMBOL", "alias": "token_labels_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_SYMBOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.102693, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere SYMBOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR.35103f428b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f25d25c1b6e362bc95094e02585b3bee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR.35103f428b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f25d25c1b6e362bc95094e02585b3bee\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f25d25c1b6e362bc95094e02585b3bee.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR", "alias": "token_labels_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_f25d25c1b6e362bc95094e02585b3bee.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f25d25c1b6e362bc95094e02585b3bee"}, "created_at": 1672281844.1048007, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.silver__token_labels"}, "test.terra.not_null_silver__token_labels_DECIMALS.7abc70a23b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__token_labels_DECIMALS"], "unique_id": "test.terra.not_null_silver__token_labels_DECIMALS.7abc70a23b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__token_labels_DECIMALS.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "not_null_silver__token_labels_DECIMALS", "alias": "token_labels_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/not_null_silver__token_labels_DECIMALS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1117704, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.token_labels\nwhere DECIMALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.token_labels_DECIMALS", "column_name": "DECIMALS", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER.6d36153379": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float", "NUMBER"], "column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baa8d7824fcb8917eb07b3d34fcfe9da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER.6d36153379", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_baa8d7824fcb8917eb07b3d34fcfe9da\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_baa8d7824fcb8917eb07b3d34fcfe9da.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER", "alias": "token_labels_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_baa8d7824fcb8917eb07b3d34fcfe9da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_baa8d7824fcb8917eb07b3d34fcfe9da"}, "created_at": 1672281844.1138742, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_DECIMALS", "column_name": "DECIMALS", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR.b31987ac15": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ea98e3f8ccc82e17dcf715dc7a645842", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR.b31987ac15", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ea98e3f8ccc82e17dcf715dc7a645842\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ea98e3f8ccc82e17dcf715dc7a645842.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR", "alias": "token_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_ea98e3f8ccc82e17dcf715dc7a645842.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_ea98e3f8ccc82e17dcf715dc7a645842"}, "created_at": 1672281844.1206045, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_CREATOR", "column_name": "CREATOR", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR.5b257c3121": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2669454b2ad6c0aefa0f2f3ba494ba4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR.5b257c3121", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2669454b2ad6c0aefa0f2f3ba494ba4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b2669454b2ad6c0aefa0f2f3ba494ba4.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR", "alias": "token_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_b2669454b2ad6c0aefa0f2f3ba494ba4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b2669454b2ad6c0aefa0f2f3ba494ba4"}, "created_at": 1672281844.1268637, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR.d91a590606": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c0511c20bbda04cea137053d06297b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR.d91a590606", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c0511c20bbda04cea137053d06297b8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6c0511c20bbda04cea137053d06297b8.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR", "alias": "token_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_6c0511c20bbda04cea137053d06297b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6c0511c20bbda04cea137053d06297b8"}, "created_at": 1672281844.133128, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR.ee7aac0536": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4b44e45188bac5bb97539365371b1b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR.ee7aac0536", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4b44e45188bac5bb97539365371b1b7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d4b44e45188bac5bb97539365371b1b7.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR", "alias": "token_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_expectations_expect_column_d4b44e45188bac5bb97539365371b1b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d4b44e45188bac5bb97539365371b1b7"}, "created_at": 1672281844.1394174, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROJECT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.token_labels_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.silver__token_labels"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__token_labels_address.2e65ca4f07": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["address"], "model": "{{ get_where_subquery(ref('silver__token_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__token_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b8419450321795171f00c68c9ea25e86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__token_labels_address"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__token_labels_address.2e65ca4f07", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b8419450321795171f00c68c9ea25e86\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_b8419450321795171f00c68c9ea25e86.sql", "original_file_path": "models/silver/silver__token_labels.yml", "name": "dbt_utils_unique_combination_of_columns_silver__token_labels_address", "alias": "token_labels_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__token_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__token_labels.yml/dbt_utils_unique_combination_o_b8419450321795171f00c68c9ea25e86.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_b8419450321795171f00c68c9ea25e86"}, "created_at": 1672281844.1453629, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address\n    from TERRA_DEV.silver.token_labels\n    group by address\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.token_labels_address", "column_name": null, "file_key_name": "models.silver__token_labels"}, "test.terra.unique_silver__nft_sales_unique_id.a34598105c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__nft_sales_unique_id"], "unique_id": "test.terra.unique_silver__nft_sales_unique_id.a34598105c", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__nft_sales_unique_id.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "unique_silver__nft_sales_unique_id", "alias": "nft_sales_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/unique_silver__nft_sales_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1598303, "compiled_code": "\n    \n    \n\nselect\n    unique_id as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.nft_sales\nwhere unique_id is not null\ngroup by unique_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.nft_sales_unique_id", "column_name": "unique_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_unique_id.e87cf641d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_unique_id"], "unique_id": "test.terra.not_null_silver__nft_sales_unique_id.e87cf641d1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_unique_id.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_unique_id", "alias": "nft_sales_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_unique_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1620424, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere unique_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_unique_id", "column_name": "unique_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar.1ad4a2d7b2": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "unique_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2e366f9524eef34d4a1a15ce9b6897d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar.1ad4a2d7b2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2e366f9524eef34d4a1a15ce9b6897d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a2e366f9524eef34d4a1a15ce9b6897d.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar", "alias": "nft_sales_unique_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_a2e366f9524eef34d4a1a15ce9b6897d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a2e366f9524eef34d4a1a15ce9b6897d"}, "created_at": 1672281844.1642056, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'UNIQUE_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.nft_sales_unique_id", "column_name": "unique_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_block_id.6b8ae85cc7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_block_id"], "unique_id": "test.terra.not_null_silver__nft_sales_block_id.6b8ae85cc7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_block_id.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_block_id", "alias": "nft_sales_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1716285, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_block_id", "column_name": "block_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT.1e3b411b22": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9739e17d763c18429b497c50b14e3d6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT.1e3b411b22", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9739e17d763c18429b497c50b14e3d6f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_9739e17d763c18429b497c50b14e3d6f.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT", "alias": "nft_sales_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_9739e17d763c18429b497c50b14e3d6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_9739e17d763c18429b497c50b14e3d6f"}, "created_at": 1672281844.1737509, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_block_id", "column_name": "block_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_block_timestamp.1ea5fe220e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_block_timestamp"], "unique_id": "test.terra.not_null_silver__nft_sales_block_timestamp.1ea5fe220e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_block_timestamp.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_block_timestamp", "alias": "nft_sales_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1800852, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz.fac3defc53": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aa096ccb2e777650d3f80e85aa4a3858", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz.fac3defc53", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aa096ccb2e777650d3f80e85aa4a3858\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_aa096ccb2e777650d3f80e85aa4a3858.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz", "alias": "nft_sales_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_aa096ccb2e777650d3f80e85aa4a3858.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_aa096ccb2e777650d3f80e85aa4a3858"}, "created_at": 1672281844.182188, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.nft_sales_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_tx_id.52567b28a5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_tx_id"], "unique_id": "test.terra.not_null_silver__nft_sales_tx_id.52567b28a5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_tx_id.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_tx_id", "alias": "nft_sales_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1881585, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR.03f27d4e32": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f3fa3a352506f54c9586a14e233aaa8b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR.03f27d4e32", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f3fa3a352506f54c9586a14e233aaa8b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f3fa3a352506f54c9586a14e233aaa8b.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR", "alias": "nft_sales_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_f3fa3a352506f54c9586a14e233aaa8b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f3fa3a352506f54c9586a14e233aaa8b"}, "created_at": 1672281844.1902518, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_tx_succeeded.8b4a8f3210": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_tx_succeeded"], "unique_id": "test.terra.not_null_silver__nft_sales_tx_succeeded.8b4a8f3210", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_tx_succeeded.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_tx_succeeded", "alias": "nft_sales_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.1965237, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN.4f3e9b4781": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_59d5b7ca209fe394d9ca534f1e1dc6f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN.4f3e9b4781", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_59d5b7ca209fe394d9ca534f1e1dc6f6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_59d5b7ca209fe394d9ca534f1e1dc6f6.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN", "alias": "nft_sales_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_59d5b7ca209fe394d9ca534f1e1dc6f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_59d5b7ca209fe394d9ca534f1e1dc6f6"}, "created_at": 1672281844.1986668, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_chain_id.e01ecf1619": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_chain_id"], "unique_id": "test.terra.not_null_silver__nft_sales_chain_id.e01ecf1619", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_chain_id.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_chain_id", "alias": "nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2046278, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.accepted_values_silver__nft_sales_chain_id__phoenix_1.4910d24029": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__nft_sales_chain_id__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__nft_sales_chain_id__phoenix_1.4910d24029", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__nft_sales_chain_id__phoenix_1.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "accepted_values_silver__nft_sales_chain_id__phoenix_1", "alias": "nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/accepted_values_silver__nft_sales_chain_id__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2067466, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        chain_id as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.nft_sales\n    group by chain_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR.7e1d5f429a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80bd89806d8d394ef0e7fed122cf949a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR.7e1d5f429a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80bd89806d8d394ef0e7fed122cf949a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_80bd89806d8d394ef0e7fed122cf949a.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR", "alias": "nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_80bd89806d8d394ef0e7fed122cf949a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_80bd89806d8d394ef0e7fed122cf949a"}, "created_at": 1672281844.2131984, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_blockchain.33e23b43cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_blockchain"], "unique_id": "test.terra.not_null_silver__nft_sales_blockchain.33e23b43cc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_blockchain.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_blockchain", "alias": "nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_blockchain.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2194896, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere blockchain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__nft_sales"}, "test.terra.accepted_values_silver__nft_sales_blockchain__terra.b3af3d6472": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__nft_sales_blockchain__terra"], "unique_id": "test.terra.accepted_values_silver__nft_sales_blockchain__terra.b3af3d6472", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__nft_sales_blockchain__terra.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "accepted_values_silver__nft_sales_blockchain__terra", "alias": "nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/accepted_values_silver__nft_sales_blockchain__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2216089, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        blockchain as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.nft_sales\n    group by blockchain\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR.1e92e15aa9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_686086c86820896f32e731640ba45305", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR.1e92e15aa9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_686086c86820896f32e731640ba45305\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_686086c86820896f32e731640ba45305.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR", "alias": "nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_686086c86820896f32e731640ba45305.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_686086c86820896f32e731640ba45305"}, "created_at": 1672281844.2273324, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_purchaser.86d6ee5596": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchaser", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_purchaser"], "unique_id": "test.terra.not_null_silver__nft_sales_purchaser.86d6ee5596", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_purchaser.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_purchaser", "alias": "nft_sales_purchaser", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_purchaser.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2336855, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere purchaser is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_purchaser", "column_name": "purchaser", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR.f66fa138e1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "purchaser", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3911171c81a1eb8f955f123328e4cb51", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR.f66fa138e1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3911171c81a1eb8f955f123328e4cb51\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3911171c81a1eb8f955f123328e4cb51.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR", "alias": "nft_sales_purchaser", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_3911171c81a1eb8f955f123328e4cb51.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3911171c81a1eb8f955f123328e4cb51"}, "created_at": 1672281844.2358813, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PURCHASER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_purchaser", "column_name": "purchaser", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_seller.5f87626aad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "seller", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_seller"], "unique_id": "test.terra.not_null_silver__nft_sales_seller.5f87626aad", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_seller.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_seller", "alias": "nft_sales_seller", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_seller.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2421608, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere seller is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_seller", "column_name": "seller", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR.381a66eb49": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "seller", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f6c17c2f6601490ddc34895521b63dbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR.381a66eb49", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f6c17c2f6601490ddc34895521b63dbd\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f6c17c2f6601490ddc34895521b63dbd.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR", "alias": "nft_sales_seller", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_f6c17c2f6601490ddc34895521b63dbd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f6c17c2f6601490ddc34895521b63dbd"}, "created_at": 1672281844.2443402, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SELLER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_seller", "column_name": "seller", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_sales_amount.5bb89c4043": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_amount", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_sales_amount"], "unique_id": "test.terra.not_null_silver__nft_sales_sales_amount.5bb89c4043", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_sales_amount.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_sales_amount", "alias": "nft_sales_sales_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_sales_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2506623, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere sales_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_sales_amount", "column_name": "sales_amount", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT.f06d20a3b9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "sales_amount", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_94b72fcbe7abee1f7beca3f1ad2b13a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT.f06d20a3b9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_94b72fcbe7abee1f7beca3f1ad2b13a4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_94b72fcbe7abee1f7beca3f1ad2b13a4.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT", "alias": "nft_sales_sales_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_94b72fcbe7abee1f7beca3f1ad2b13a4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_94b72fcbe7abee1f7beca3f1ad2b13a4"}, "created_at": 1672281844.2527776, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SALES_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_sales_amount", "column_name": "sales_amount", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_currency.d2d4883210": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_currency"], "unique_id": "test.terra.not_null_silver__nft_sales_currency.d2d4883210", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_currency.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_currency", "alias": "nft_sales_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2590842, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_currency", "column_name": "currency", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR.4e3f2cbe41": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "currency", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d414c8899ccdf3cbb04ce077aaf22d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR.4e3f2cbe41", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d414c8899ccdf3cbb04ce077aaf22d2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6d414c8899ccdf3cbb04ce077aaf22d2.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR", "alias": "nft_sales_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_6d414c8899ccdf3cbb04ce077aaf22d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6d414c8899ccdf3cbb04ce077aaf22d2"}, "created_at": 1672281844.2611928, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_currency", "column_name": "currency", "file_key_name": "models.silver__nft_sales"}, "test.terra.not_null_silver__nft_sales_decimals.eee63c2b4c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__nft_sales_decimals"], "unique_id": "test.terra.not_null_silver__nft_sales_decimals.eee63c2b4c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__nft_sales_decimals.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "not_null_silver__nft_sales_decimals", "alias": "nft_sales_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/not_null_silver__nft_sales_decimals.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2674744, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.nft_sales\nwhere decimals is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.nft_sales_decimals", "column_name": "decimals", "file_key_name": "models.silver__nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER.af1b95ab24": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_649a3016fdf17cdc65419f28aa52f8bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER.af1b95ab24", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_649a3016fdf17cdc65419f28aa52f8bf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_649a3016fdf17cdc65419f28aa52f8bf.sql", "original_file_path": "models/silver/silver__nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER", "alias": "nft_sales_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__nft_sales.yml/dbt_expectations_expect_column_649a3016fdf17cdc65419f28aa52f8bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_649a3016fdf17cdc65419f28aa52f8bf"}, "created_at": 1672281844.269591, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.nft_sales_decimals", "column_name": "decimals", "file_key_name": "models.silver__nft_sales"}, "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__messages_MESSAGE_ID"], "unique_id": "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__messages_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "unique_silver__messages_MESSAGE_ID", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/unique_silver__messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2827518, "compiled_code": "\n    \n    \n\nselect\n    MESSAGE_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_ID is not null\ngroup by MESSAGE_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_ID"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_ID", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.284951, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR", "alias": "messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_808c5d33b6170911d76abb9a6c299b77"}, "created_at": 1672281844.2871425, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_BLOCK_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_BLOCK_ID", "alias": "messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.2936373, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT", "alias": "messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a5abd4fa9f337e867b167988514fdb17"}, "created_at": 1672281844.295776, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_BLOCK_TIMESTAMP", "alias": "messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3021126, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_c968fbf76a6120f552b6467dd8f7dc02"}, "created_at": 1672281844.3042824, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_TX_ID.084bc612c0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_TX_ID"], "unique_id": "test.terra.not_null_silver__messages_TX_ID.084bc612c0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_TX_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_TX_ID", "alias": "messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3112001, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR", "alias": "messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f3bb67c2e2b94097c8695ca73d86bfab"}, "created_at": 1672281844.3132956, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_TX_SUCCEEDED", "alias": "messages_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3192024, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN", "alias": "messages_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6c740b00df08517d93451d1707159f1f"}, "created_at": 1672281844.3213007, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_CHAIN_ID.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_CHAIN_ID", "alias": "messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3272538, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR", "alias": "messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_353afb8aed533d571cef4ad789884605"}, "created_at": 1672281844.3293738, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_INDEX.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_INDEX", "alias": "messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3352234, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER", "alias": "messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3044cc9531ac3d1dd1bdcf23051b54ee"}, "created_at": 1672281844.337311, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_MESSAGE_TYPE.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_MESSAGE_TYPE", "alias": "messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3431242, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR", "alias": "messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f20ae6e23d784dbd97e0f496dadb5265"}, "created_at": 1672281844.3452206, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.silver__messages"}, "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__messages_ATTRIBUTES"], "unique_id": "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__messages_ATTRIBUTES.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "not_null_silver__messages_ATTRIBUTES", "alias": "messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/not_null_silver__messages_ATTRIBUTES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3510983, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.messages\nwhere ATTRIBUTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.silver__messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2de7436138259045e43776986b51828f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT", "alias": "messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_expectations_expect_column_2de7436138259045e43776986b51828f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_2de7436138259045e43776986b51828f"}, "created_at": 1672281844.353205, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTES'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.silver__messages"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["message_id"], "model": "{{ get_where_subquery(ref('silver__messages')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__messages"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__messages_message_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f.sql", "original_file_path": "models/silver/silver__messages.yml", "name": "dbt_utils_unique_combination_of_columns_silver__messages_message_id", "alias": "messages_message_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__messages.yml/dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_utils_unique_combination_o_0c56d4226c6c2e3da1561ab235331a2f"}, "created_at": 1672281844.3591137, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        message_id\n    from TERRA_DEV.silver.messages\n    group by message_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.messages_message_id", "column_name": null, "file_key_name": "models.silver__messages"}, "test.terra.unique_silver__msgs_MESSAGE_ID.83bad7bef2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__msgs_MESSAGE_ID"], "unique_id": "test.terra.unique_silver__msgs_MESSAGE_ID.83bad7bef2", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__msgs_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "unique_silver__msgs_MESSAGE_ID", "alias": "msgs_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/unique_silver__msgs_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.372854, "compiled_code": "\n    \n    \n\nselect\n    MESSAGE_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.msgs\nwhere MESSAGE_ID is not null\ngroup by MESSAGE_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.msgs_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_MESSAGE_ID.436e3803e5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_MESSAGE_ID"], "unique_id": "test.terra.not_null_silver__msgs_MESSAGE_ID.436e3803e5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_MESSAGE_ID", "alias": "msgs_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3750563, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR.4816a5174b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_44c27e9b3190badc3fa57c4c60f96d00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR.4816a5174b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_44c27e9b3190badc3fa57c4c60f96d00\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_44c27e9b3190badc3fa57c4c60f96d00.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR", "alias": "msgs_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_44c27e9b3190badc3fa57c4c60f96d00.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_44c27e9b3190badc3fa57c4c60f96d00"}, "created_at": 1672281844.377191, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_BLOCK_ID.1de1a37994": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_BLOCK_ID"], "unique_id": "test.terra.not_null_silver__msgs_BLOCK_ID.1de1a37994", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_BLOCK_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_BLOCK_ID", "alias": "msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3835416, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT", "alias": "msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a82a71b2a18c20c89390e505bb3d6678"}, "created_at": 1672281844.3856363, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_BLOCK_TIMESTAMP", "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3918896, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0"}, "created_at": 1672281844.393967, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_BLOCKCHAIN.5236da2509": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_BLOCKCHAIN"], "unique_id": "test.terra.not_null_silver__msgs_BLOCKCHAIN.5236da2509", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_BLOCKCHAIN", "alias": "msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.3998275, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msgs"}, "test.terra.accepted_values_silver__msgs_BLOCKCHAIN__terra.1e13cf0ea4": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__msgs_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_silver__msgs_BLOCKCHAIN__terra.1e13cf0ea4", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__msgs_BLOCKCHAIN__terra.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "accepted_values_silver__msgs_BLOCKCHAIN__terra", "alias": "msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/accepted_values_silver__msgs_BLOCKCHAIN__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4019043, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.msgs\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR.d4724b33fb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08cc1719c91ad112b291d2ebf8e080ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR.d4724b33fb", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08cc1719c91ad112b291d2ebf8e080ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_08cc1719c91ad112b291d2ebf8e080ef.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR", "alias": "msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_08cc1719c91ad112b291d2ebf8e080ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_08cc1719c91ad112b291d2ebf8e080ef"}, "created_at": 1672281844.408404, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_CHAIN_ID.41ac59beba": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_CHAIN_ID"], "unique_id": "test.terra.not_null_silver__msgs_CHAIN_ID.41ac59beba", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_CHAIN_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_CHAIN_ID", "alias": "msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4145799, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msgs"}, "test.terra.accepted_values_silver__msgs_CHAIN_ID__phoenix_1.7396fb9d57": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__msgs_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__msgs_CHAIN_ID__phoenix_1.7396fb9d57", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__msgs_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "accepted_values_silver__msgs_CHAIN_ID__phoenix_1", "alias": "msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/accepted_values_silver__msgs_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.416693, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.msgs\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR.5060cbda07": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f6cd256f24a75d86d857866e0ea5a980", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR.5060cbda07", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f6cd256f24a75d86d857866e0ea5a980\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f6cd256f24a75d86d857866e0ea5a980.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR", "alias": "msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_f6cd256f24a75d86d857866e0ea5a980.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f6cd256f24a75d86d857866e0ea5a980"}, "created_at": 1672281844.4223106, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_TX_ID.59a107fa1e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_TX_ID"], "unique_id": "test.terra.not_null_silver__msgs_TX_ID.59a107fa1e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_TX_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_TX_ID", "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4282603, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR.c27c3737ce": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f2635474dd0be89769d367d5ad197238", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR.c27c3737ce", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f2635474dd0be89769d367d5ad197238\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f2635474dd0be89769d367d5ad197238.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR", "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_f2635474dd0be89769d367d5ad197238.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f2635474dd0be89769d367d5ad197238"}, "created_at": 1672281844.4306886, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_TX_SUCCEEDED.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_TX_SUCCEEDED", "alias": "msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4362571, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN", "alias": "msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5c3bb1b405488f550c7e12972506b3ed"}, "created_at": 1672281844.4387207, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR.8d68d19171": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afe2ef11bd74756445ff279b0ec96b65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR.8d68d19171", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afe2ef11bd74756445ff279b0ec96b65\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_afe2ef11bd74756445ff279b0ec96b65.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR", "alias": "msgs_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_afe2ef11bd74756445ff279b0ec96b65.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_afe2ef11bd74756445ff279b0ec96b65"}, "created_at": 1672281844.4442737, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_MSG_INDEX.227765e0bf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_MSG_INDEX"], "unique_id": "test.terra.not_null_silver__msgs_MSG_INDEX.227765e0bf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_MSG_INDEX.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_MSG_INDEX", "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4505322, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER.447eb58545": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_602be3dc33629c547f4dd8fbee1eddab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER.447eb58545", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_602be3dc33629c547f4dd8fbee1eddab\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_602be3dc33629c547f4dd8fbee1eddab.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER", "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_602be3dc33629c547f4dd8fbee1eddab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_602be3dc33629c547f4dd8fbee1eddab"}, "created_at": 1672281844.4526656, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_MSG_TYPE.312b195565": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_MSG_TYPE"], "unique_id": "test.terra.not_null_silver__msgs_MSG_TYPE.312b195565", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_MSG_TYPE.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_MSG_TYPE", "alias": "msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4585862, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR.d6218c616b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_30121f7d928629924e3e43ff47ebd932", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR.d6218c616b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_30121f7d928629924e3e43ff47ebd932\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_30121f7d928629924e3e43ff47ebd932.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR", "alias": "msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_30121f7d928629924e3e43ff47ebd932.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_30121f7d928629924e3e43ff47ebd932"}, "created_at": 1672281844.4607027, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msgs"}, "test.terra.not_null_silver__msgs_MSG.140acfecdc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__msgs_MSG"], "unique_id": "test.terra.not_null_silver__msgs_MSG.140acfecdc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__msgs_MSG.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "not_null_silver__msgs_MSG", "alias": "msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/not_null_silver__msgs_MSG.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4666572, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.msgs\nwhere MSG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.msgs_MSG", "column_name": "MSG", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT.8296dbb7a2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "MSG", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3122fb5bcc2787933eec986e2a9919c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT.8296dbb7a2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3122fb5bcc2787933eec986e2a9919c3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3122fb5bcc2787933eec986e2a9919c3.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT", "alias": "msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_expectations_expect_column_3122fb5bcc2787933eec986e2a9919c3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_3122fb5bcc2787933eec986e2a9919c3"}, "created_at": 1672281844.4687874, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG", "column_name": "MSG", "file_key_name": "models.silver__msgs"}, "test.terra.dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.571d9ca9db": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["MESSAGE_ID"], "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["terra", "silver", "dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.571d9ca9db", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.sql", "original_file_path": "models/silver/silver__msgs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID", "alias": "msgs_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__msgs.yml/dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4747, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        MESSAGE_ID\n    from TERRA_DEV.silver.msgs\n    group by MESSAGE_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_silver.msgs_MESSAGE_ID", "column_name": null, "file_key_name": "models.silver__msgs"}, "test.terra.unique_silver__lp_actions_action_id.8feba30e90": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "action_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_silver", "fqn": ["terra", "silver", "unique_silver__lp_actions_action_id"], "unique_id": "test.terra.unique_silver__lp_actions_action_id.8feba30e90", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_silver__lp_actions_action_id.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "unique_silver__lp_actions_action_id", "alias": "lp_actions_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/unique_silver__lp_actions_action_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4887743, "compiled_code": "\n    \n    \n\nselect\n    action_id as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.silver.lp_actions\nwhere action_id is not null\ngroup by action_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_silver.lp_actions_action_id", "column_name": "action_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_action_id.1895f31cc6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "action_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_action_id"], "unique_id": "test.terra.not_null_silver__lp_actions_action_id.1895f31cc6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_action_id.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_action_id", "alias": "lp_actions_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_action_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.4911137, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere action_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_action_id", "column_name": "action_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar.575f5a8bca": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "action_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_734e543cd3a34eb8e49ac9d2869050b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar.575f5a8bca", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_734e543cd3a34eb8e49ac9d2869050b0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_734e543cd3a34eb8e49ac9d2869050b0.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar", "alias": "lp_actions_action_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_734e543cd3a34eb8e49ac9d2869050b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_734e543cd3a34eb8e49ac9d2869050b0"}, "created_at": 1672281844.4933593, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_action_id", "column_name": "action_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_block_id.612586a7cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_block_id"], "unique_id": "test.terra.not_null_silver__lp_actions_block_id.612586a7cb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_block_id.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_block_id", "alias": "lp_actions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5000336, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_block_id", "column_name": "block_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__blocks')", "field": "block_id", "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks", "model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "relationships_silver__lp_actio_c9bb9438aeef9b419c846c67984e7673", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_"], "unique_id": "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__lp_actio_c9bb9438aeef9b419c846c67984e7673\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__lp_actio_c9bb9438aeef9b419c846c67984e7673.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_", "alias": "lp_actions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"], ["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/relationships_silver__lp_actio_c9bb9438aeef9b419c846c67984e7673.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__lp_actio_c9bb9438aeef9b419c846c67984e7673"}, "created_at": 1672281844.5023005, "compiled_code": "\n    \n    \n\nwith child as (\n    select block_id as from_field\n    from TERRA_DEV.silver.lp_actions\n    where block_id is not null\n),\n\nparent as (\n    select block_id as to_field\n    from TERRA_DEV.silver.blocks\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.lp_actions_block_id", "column_name": "block_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number.145aae2b01": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "block_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a3a0534eb5c83d445f4ab8936c6ee90b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number.145aae2b01", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a3a0534eb5c83d445f4ab8936c6ee90b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a3a0534eb5c83d445f4ab8936c6ee90b.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number", "alias": "lp_actions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_a3a0534eb5c83d445f4ab8936c6ee90b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_a3a0534eb5c83d445f4ab8936c6ee90b"}, "created_at": 1672281844.511292, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_block_id", "column_name": "block_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_block_timestamp.8ad214d7f5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_block_timestamp"], "unique_id": "test.terra.not_null_silver__lp_actions_block_timestamp.8ad214d7f5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_block_timestamp.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_block_timestamp", "alias": "lp_actions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5180836, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz.dea7337aaa": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f91b802a4e7e094ae2526e5e1e0f9c36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz.dea7337aaa", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f91b802a4e7e094ae2526e5e1e0f9c36\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f91b802a4e7e094ae2526e5e1e0f9c36.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz", "alias": "lp_actions_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_f91b802a4e7e094ae2526e5e1e0f9c36.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f91b802a4e7e094ae2526e5e1e0f9c36"}, "created_at": 1672281844.5203454, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_tx_id.468a921096": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_tx_id"], "unique_id": "test.terra.not_null_silver__lp_actions_tx_id.468a921096", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_tx_id.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_tx_id", "alias": "lp_actions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.526423, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__transactions')", "field": "tx_id", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions", "model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "relationships_silver__lp_actio_af066b71872a9523746351bb07e5bfc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_"], "unique_id": "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__lp_actio_af066b71872a9523746351bb07e5bfc6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__lp_actio_af066b71872a9523746351bb07e5bfc6.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_", "alias": "lp_actions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/relationships_silver__lp_actio_af066b71872a9523746351bb07e5bfc6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__lp_actio_af066b71872a9523746351bb07e5bfc6"}, "created_at": 1672281844.5286217, "compiled_code": "\n    \n    \n\nwith child as (\n    select tx_id as from_field\n    from TERRA_DEV.silver.lp_actions\n    where tx_id is not null\n),\n\nparent as (\n    select tx_id as to_field\n    from TERRA_DEV.silver.transactions\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.lp_actions_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar.63e96990ee": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_36157ad204fac0e7c53e020908a49f16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar.63e96990ee", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_36157ad204fac0e7c53e020908a49f16\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_36157ad204fac0e7c53e020908a49f16.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar", "alias": "lp_actions_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_36157ad204fac0e7c53e020908a49f16.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_36157ad204fac0e7c53e020908a49f16"}, "created_at": 1672281844.5353434, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_tx_id", "column_name": "tx_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_tx_succeeded.7ffb92c629": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_tx_succeeded"], "unique_id": "test.terra.not_null_silver__lp_actions_tx_succeeded.7ffb92c629", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_tx_succeeded.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_tx_succeeded", "alias": "lp_actions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5409565, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean.a717827478": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "boolean", "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_775822d9edee94f5203283d8c631a8ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean.a717827478", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_775822d9edee94f5203283d8c631a8ea\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_775822d9edee94f5203283d8c631a8ea.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean", "alias": "lp_actions_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_775822d9edee94f5203283d8c631a8ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_775822d9edee94f5203283d8c631a8ea"}, "created_at": 1672281844.5434268, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_chain_id.92b09a5867": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_chain_id"], "unique_id": "test.terra.not_null_silver__lp_actions_chain_id.92b09a5867", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_chain_id.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_chain_id", "alias": "lp_actions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.549177, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.accepted_values_silver__lp_actions_chain_id__phoenix_1.bcbc85a705": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__lp_actions_chain_id__phoenix_1"], "unique_id": "test.terra.accepted_values_silver__lp_actions_chain_id__phoenix_1.bcbc85a705", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__lp_actions_chain_id__phoenix_1.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "accepted_values_silver__lp_actions_chain_id__phoenix_1", "alias": "lp_actions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/accepted_values_silver__lp_actions_chain_id__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5516353, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        chain_id as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.lp_actions\n    group by chain_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.lp_actions_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar.96fbe9872a": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "chain_id", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5eb9d8c80d21f876d312957ee8000439", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar.96fbe9872a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5eb9d8c80d21f876d312957ee8000439\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5eb9d8c80d21f876d312957ee8000439.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar", "alias": "lp_actions_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_5eb9d8c80d21f876d312957ee8000439.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_5eb9d8c80d21f876d312957ee8000439"}, "created_at": 1672281844.5569587, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_chain_id", "column_name": "chain_id", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_blockchain.4f0a107928": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_blockchain"], "unique_id": "test.terra.not_null_silver__lp_actions_blockchain.4f0a107928", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_blockchain.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_blockchain", "alias": "lp_actions_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_blockchain.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5628908, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere blockchain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__lp_actions"}, "test.terra.accepted_values_silver__lp_actions_blockchain__terra.2393767af9": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__lp_actions_blockchain__terra"], "unique_id": "test.terra.accepted_values_silver__lp_actions_blockchain__terra.2393767af9", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__lp_actions_blockchain__terra.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "accepted_values_silver__lp_actions_blockchain__terra", "alias": "lp_actions_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/accepted_values_silver__lp_actions_blockchain__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5649936, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        blockchain as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.lp_actions\n    group by blockchain\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.lp_actions_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar.dbe4369548": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "blockchain", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b7b3255db3243c54238c78035cab5c3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar.dbe4369548", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b7b3255db3243c54238c78035cab5c3e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b7b3255db3243c54238c78035cab5c3e.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar", "alias": "lp_actions_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_b7b3255db3243c54238c78035cab5c3e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_b7b3255db3243c54238c78035cab5c3e"}, "created_at": 1672281844.5706503, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_blockchain", "column_name": "blockchain", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_liquidity_provider_address.aba666ba5e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "liquidity_provider_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_liquidity_provider_address"], "unique_id": "test.terra.not_null_silver__lp_actions_liquidity_provider_address.aba666ba5e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_liquidity_provider_address.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_liquidity_provider_address", "alias": "lp_actions_liquidity_provider_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_liquidity_provider_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5765762, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere liquidity_provider_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_liquidity_provider_address", "column_name": "liquidity_provider_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar.d688ace707": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "liquidity_provider_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4816bd42fa14c25bb1ea32cf9f519e61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar.d688ace707", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4816bd42fa14c25bb1ea32cf9f519e61\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4816bd42fa14c25bb1ea32cf9f519e61.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar", "alias": "lp_actions_liquidity_provider_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_4816bd42fa14c25bb1ea32cf9f519e61.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_4816bd42fa14c25bb1ea32cf9f519e61"}, "created_at": 1672281844.5787497, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LIQUIDITY_PROVIDER_ADDRESS'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_liquidity_provider_address", "column_name": "liquidity_provider_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_.c3e67fb7aa": {"test_metadata": {"name": "expect_column_values_to_match_like_pattern", "kwargs": {"like_pattern": "terra%", "column_name": "liquidity_provider_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bae177ce0272898fd4e51ae98ea7f577", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_like_pattern_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_.c3e67fb7aa", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_like_pattern(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bae177ce0272898fd4e51ae98ea7f577\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bae177ce0272898fd4e51ae98ea7f577.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_", "alias": "lp_actions_liquidity_provider_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_bae177ce0272898fd4e51ae98ea7f577.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_bae177ce0272898fd4e51ae98ea7f577"}, "created_at": 1672281844.584765, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \nliquidity_provider_address  like 'terra%'\n as expression\n\n\n    from TERRA_DEV.silver.lp_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_like_pattern_silver.lp_actions_liquidity_provider_address", "column_name": "liquidity_provider_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_action.7ac5d6f78e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "action", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_action"], "unique_id": "test.terra.not_null_silver__lp_actions_action.7ac5d6f78e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_action.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_action", "alias": "lp_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_action.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.5948744, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere action is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_action", "column_name": "action", "file_key_name": "models.silver__lp_actions"}, "test.terra.accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity.5373dcd0ce": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["burn_lp_token", "mint_lp_token", "provide_liquidity", "withdraw_liquidity"], "column_name": "action", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "accepted_values_silver__lp_act_7ad66ab91c69f059c2259f27b1479f89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_silver", "fqn": ["terra", "silver", "accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity"], "unique_id": "test.terra.accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity.5373dcd0ce", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_silver__lp_act_7ad66ab91c69f059c2259f27b1479f89\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_silver__lp_act_7ad66ab91c69f059c2259f27b1479f89.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity", "alias": "lp_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/accepted_values_silver__lp_act_7ad66ab91c69f059c2259f27b1479f89.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "accepted_values_silver__lp_act_7ad66ab91c69f059c2259f27b1479f89"}, "created_at": 1672281844.597049, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        action as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.silver.lp_actions\n    group by action\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'burn_lp_token','mint_lp_token','provide_liquidity','withdraw_liquidity'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_silver.lp_actions_action", "column_name": "action", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar.fcc850cc15": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "action", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb2c883b154cdf03b1930942fb296d45", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar.fcc850cc15", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb2c883b154cdf03b1930942fb296d45\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cb2c883b154cdf03b1930942fb296d45.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar", "alias": "lp_actions_action", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_cb2c883b154cdf03b1930942fb296d45.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_cb2c883b154cdf03b1930942fb296d45"}, "created_at": 1672281844.6043782, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ACTION'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_action", "column_name": "action", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_pool_address.f4c321d743": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_pool_address"], "unique_id": "test.terra.not_null_silver__lp_actions_pool_address.f4c321d743", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_pool_address.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_pool_address", "alias": "lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_pool_address.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.6112015, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere pool_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_pool_address", "column_name": "pool_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('core__dim_address_labels')", "field": "address", "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__dim_address_labels", "model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "relationships_silver__lp_actio_24d77670f437e748d2a34c08b69e0abc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_silver", "fqn": ["terra", "silver", "relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_"], "unique_id": "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_silver__lp_actio_24d77670f437e748d2a34c08b69e0abc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_silver__lp_actio_24d77670f437e748d2a34c08b69e0abc.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_", "alias": "lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_address_labels"], ["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/relationships_silver__lp_actio_24d77670f437e748d2a34c08b69e0abc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "relationships_silver__lp_actio_24d77670f437e748d2a34c08b69e0abc"}, "created_at": 1672281844.61333, "compiled_code": "\n    \n    \n\nwith child as (\n    select pool_address as from_field\n    from TERRA_DEV.silver.lp_actions\n    where pool_address is not null\n),\n\nparent as (\n    select address as to_field\n    from TERRA_DEV.core.dim_address_labels\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_silver.lp_actions_pool_address", "column_name": "pool_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar.fa13bb082b": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cda690e19fb1f30eaa29dbd68cb5a76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar.fa13bb082b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cda690e19fb1f30eaa29dbd68cb5a76\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1cda690e19fb1f30eaa29dbd68cb5a76.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar", "alias": "lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_1cda690e19fb1f30eaa29dbd68cb5a76.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_1cda690e19fb1f30eaa29dbd68cb5a76"}, "created_at": 1672281844.6201952, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_ADDRESS'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_pool_address", "column_name": "pool_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_.7257f1eb85": {"test_metadata": {"name": "expect_column_values_to_match_like_pattern", "kwargs": {"like_pattern": "terra%", "column_name": "pool_address", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afcc0f2aa3cbce38442ee971df699d4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_like_pattern_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_.7257f1eb85", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_like_pattern(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afcc0f2aa3cbce38442ee971df699d4e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_afcc0f2aa3cbce38442ee971df699d4e.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_", "alias": "lp_actions_pool_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_afcc0f2aa3cbce38442ee971df699d4e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_afcc0f2aa3cbce38442ee971df699d4e"}, "created_at": 1672281844.6261854, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \npool_address  like 'terra%'\n as expression\n\n\n    from TERRA_DEV.silver.lp_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_like_pattern_silver.lp_actions_pool_address", "column_name": "pool_address", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_amount.13c03f504d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amount", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_amount"], "unique_id": "test.terra.not_null_silver__lp_actions_amount.13c03f504d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_amount.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_amount", "alias": "lp_actions_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.6326113, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_amount", "column_name": "amount", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number.cc87f632e7": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "amount", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6313dfd5107b2e11a811bc56fe654bbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number.cc87f632e7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6313dfd5107b2e11a811bc56fe654bbb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6313dfd5107b2e11a811bc56fe654bbb.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number", "alias": "lp_actions_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_6313dfd5107b2e11a811bc56fe654bbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_6313dfd5107b2e11a811bc56fe654bbb"}, "created_at": 1672281844.6348174, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_amount", "column_name": "amount", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0.7049ba3596": {"test_metadata": {"name": "expect_column_min_to_be_between", "kwargs": {"min_value": 0, "column_name": "amount", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_min_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0af7ffc59aa98fe11744c4bb5c5046f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_min_to_be_between_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0"], "unique_id": "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0.7049ba3596", "raw_code": "{{ dbt_expectations.test_expect_column_min_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0af7ffc59aa98fe11744c4bb5c5046f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f0af7ffc59aa98fe11744c4bb5c5046f.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0", "alias": "lp_actions_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_f0af7ffc59aa98fe11744c4bb5c5046f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_f0af7ffc59aa98fe11744c4bb5c5046f"}, "created_at": 1672281844.6410298, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and min(amount) >= 0\n)\n as expression\n\n\n    from TERRA_DEV.silver.lp_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_min_to_be_between_silver.lp_actions_amount", "column_name": "amount", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_silver__lp_actions_currency.15f91bb63e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_currency"], "unique_id": "test.terra.not_null_silver__lp_actions_currency.15f91bb63e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_currency.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_currency", "alias": "lp_actions_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/not_null_silver__lp_actions_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn"}, "created_at": 1672281844.64949, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.silver.lp_actions\nwhere currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_silver.lp_actions_currency", "column_name": "currency", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar.d0950ecf3c": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "varchar", "column_name": "currency", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d9e812871f9d02710706d8f44c656cdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar.d0950ecf3c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d9e812871f9d02710706d8f44c656cdb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d9e812871f9d02710706d8f44c656cdb.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar", "alias": "lp_actions_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_d9e812871f9d02710706d8f44c656cdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d9e812871f9d02710706d8f44c656cdb"}, "created_at": 1672281844.6520345, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LIQUIDITY_PROVIDER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCY'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_silver.lp_actions_currency", "column_name": "currency", "file_key_name": "models.silver__lp_actions"}, "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0.b85cc40115": {"test_metadata": {"name": "expect_column_min_to_be_between", "kwargs": {"min_value": 0, "column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_min_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__lp_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d9fe427516dc72125a9b611922395378", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_min_to_be_between_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0"], "unique_id": "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0.b85cc40115", "raw_code": "{{ dbt_expectations.test_expect_column_min_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d9fe427516dc72125a9b611922395378\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d9fe427516dc72125a9b611922395378.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0", "alias": "lp_actions_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/silver/silver__lp_actions.yml/dbt_expectations_expect_column_d9fe427516dc72125a9b611922395378.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "alias": "dbt_expectations_expect_column_d9fe427516dc72125a9b611922395378"}, "created_at": 1672281844.666425, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and min(decimals) >= 0\n)\n as expression\n\n\n    from TERRA_DEV.silver.lp_actions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_min_to_be_between_silver.lp_actions_decimals", "column_name": "decimals", "file_key_name": "models.silver__lp_actions"}, "test.terra.not_null_core__fact_nft_sales_block_id.6a8cf5dbe3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_block_id"], "unique_id": "test.terra.not_null_core__fact_nft_sales_block_id.6a8cf5dbe3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_block_id.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_block_id", "alias": "fact_nft_sales_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.6797, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT.1a263806c8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_39beef471461fe466a5d55629fb8a031", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT.1a263806c8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_39beef471461fe466a5d55629fb8a031\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_39beef471461fe466a5d55629fb8a031.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT", "alias": "fact_nft_sales_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_39beef471461fe466a5d55629fb8a031.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_39beef471461fe466a5d55629fb8a031"}, "created_at": 1672281844.6820338, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_block_timestamp.a99e8d84cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_block_timestamp"], "unique_id": "test.terra.not_null_core__fact_nft_sales_block_timestamp.a99e8d84cb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_block_timestamp.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_block_timestamp", "alias": "fact_nft_sales_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.6887853, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz.2e773f3079": {"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "timestamp_ntz", "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aa04859cca277de27fddeec8264fb808", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz.2e773f3079", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aa04859cca277de27fddeec8264fb808\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_aa04859cca277de27fddeec8264fb808.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz", "alias": "fact_nft_sales_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_aa04859cca277de27fddeec8264fb808.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_aa04859cca277de27fddeec8264fb808"}, "created_at": 1672281844.691038, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_of_type_core.fact_nft_sales_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_tx_id.243389477f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_tx_id"], "unique_id": "test.terra.not_null_core__fact_nft_sales_tx_id.243389477f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_tx_id.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_tx_id", "alias": "fact_nft_sales_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.6973007, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR.f9740358f1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eaf64d09fb73f626bb4692be7e2928a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR.f9740358f1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eaf64d09fb73f626bb4692be7e2928a0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_eaf64d09fb73f626bb4692be7e2928a0.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR", "alias": "fact_nft_sales_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_eaf64d09fb73f626bb4692be7e2928a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_eaf64d09fb73f626bb4692be7e2928a0"}, "created_at": 1672281844.6995711, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_tx_succeeded.484054b419": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_tx_succeeded"], "unique_id": "test.terra.not_null_core__fact_nft_sales_tx_succeeded.484054b419", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_tx_succeeded.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_tx_succeeded", "alias": "fact_nft_sales_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.706255, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN.7f6defb7dc": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c7f24a4af1a116cedb98fb8e8722eefa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN.7f6defb7dc", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c7f24a4af1a116cedb98fb8e8722eefa\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c7f24a4af1a116cedb98fb8e8722eefa.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN", "alias": "fact_nft_sales_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_c7f24a4af1a116cedb98fb8e8722eefa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_c7f24a4af1a116cedb98fb8e8722eefa"}, "created_at": 1672281844.708525, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_chain_id.69d78bc3e7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_chain_id"], "unique_id": "test.terra.not_null_core__fact_nft_sales_chain_id.69d78bc3e7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_chain_id.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_chain_id", "alias": "fact_nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.715758, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.accepted_values_core__fact_nft_sales_chain_id__phoenix_1.0bbf4b7452": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_nft_sales_chain_id__phoenix_1"], "unique_id": "test.terra.accepted_values_core__fact_nft_sales_chain_id__phoenix_1.0bbf4b7452", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_nft_sales_chain_id__phoenix_1.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "accepted_values_core__fact_nft_sales_chain_id__phoenix_1", "alias": "fact_nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/accepted_values_core__fact_nft_sales_chain_id__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7181976, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        chain_id as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_nft_sales\n    group by chain_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR.61262d1e70": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d987bfef69ba60c64e8c994188b0c39e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR.61262d1e70", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d987bfef69ba60c64e8c994188b0c39e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d987bfef69ba60c64e8c994188b0c39e.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR", "alias": "fact_nft_sales_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_d987bfef69ba60c64e8c994188b0c39e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d987bfef69ba60c64e8c994188b0c39e"}, "created_at": 1672281844.7243376, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_blockchain.db801e045c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_blockchain"], "unique_id": "test.terra.not_null_core__fact_nft_sales_blockchain.db801e045c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_blockchain.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_blockchain", "alias": "fact_nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_blockchain.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.730867, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere blockchain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.accepted_values_core__fact_nft_sales_blockchain__terra.235c3c039d": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_nft_sales_blockchain__terra"], "unique_id": "test.terra.accepted_values_core__fact_nft_sales_blockchain__terra.235c3c039d", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_nft_sales_blockchain__terra.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "accepted_values_core__fact_nft_sales_blockchain__terra", "alias": "fact_nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/accepted_values_core__fact_nft_sales_blockchain__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.733088, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        blockchain as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_nft_sales\n    group by blockchain\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR.52fdffa0af": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a0c2cd61dcde7cc74cc70913d62cc3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR.52fdffa0af", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a0c2cd61dcde7cc74cc70913d62cc3a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8a0c2cd61dcde7cc74cc70913d62cc3a.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR", "alias": "fact_nft_sales_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_8a0c2cd61dcde7cc74cc70913d62cc3a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_8a0c2cd61dcde7cc74cc70913d62cc3a"}, "created_at": 1672281844.7389433, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_purchaser.5de6e437bc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "purchaser", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_purchaser"], "unique_id": "test.terra.not_null_core__fact_nft_sales_purchaser.5de6e437bc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_purchaser.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_purchaser", "alias": "fact_nft_sales_purchaser", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_purchaser.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7451353, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere purchaser is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_purchaser", "column_name": "purchaser", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR.1c1702a48c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "purchaser", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b7108b66f0ff1400b75f708eaa900c61", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR.1c1702a48c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b7108b66f0ff1400b75f708eaa900c61\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b7108b66f0ff1400b75f708eaa900c61.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR", "alias": "fact_nft_sales_purchaser", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_b7108b66f0ff1400b75f708eaa900c61.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b7108b66f0ff1400b75f708eaa900c61"}, "created_at": 1672281844.7477105, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PURCHASER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_purchaser", "column_name": "purchaser", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_seller.8347483250": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "seller", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_seller"], "unique_id": "test.terra.not_null_core__fact_nft_sales_seller.8347483250", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_seller.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_seller", "alias": "fact_nft_sales_seller", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_seller.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7542577, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere seller is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_seller", "column_name": "seller", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR.c571f9ea6f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "seller", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b07f69eeee264f9f32c8a30af77748b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR.c571f9ea6f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b07f69eeee264f9f32c8a30af77748b2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b07f69eeee264f9f32c8a30af77748b2.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR", "alias": "fact_nft_sales_seller", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_b07f69eeee264f9f32c8a30af77748b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b07f69eeee264f9f32c8a30af77748b2"}, "created_at": 1672281844.756526, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SELLER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_seller", "column_name": "seller", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_sales_amount.9529c74c94": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales_amount", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_sales_amount"], "unique_id": "test.terra.not_null_core__fact_nft_sales_sales_amount.9529c74c94", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_sales_amount.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_sales_amount", "alias": "fact_nft_sales_sales_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_sales_amount.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7630787, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere sales_amount is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_sales_amount", "column_name": "sales_amount", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT.2a0728d1e6": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "sales_amount", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d05fb07d2069d0f8f457fa0d8ef57895", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT.2a0728d1e6", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d05fb07d2069d0f8f457fa0d8ef57895\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d05fb07d2069d0f8f457fa0d8ef57895.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT", "alias": "fact_nft_sales_sales_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_d05fb07d2069d0f8f457fa0d8ef57895.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d05fb07d2069d0f8f457fa0d8ef57895"}, "created_at": 1672281844.7652965, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SALES_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_sales_amount", "column_name": "sales_amount", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_currency.00d5e018d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "currency", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_currency"], "unique_id": "test.terra.not_null_core__fact_nft_sales_currency.00d5e018d5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_currency.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_currency", "alias": "fact_nft_sales_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7718296, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_currency", "column_name": "currency", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR.2dbc63b456": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "currency", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bb7cde2a7c5ecc6c5b72ff8c01b6f5bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR.2dbc63b456", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bb7cde2a7c5ecc6c5b72ff8c01b6f5bf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bb7cde2a7c5ecc6c5b72ff8c01b6f5bf.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR", "alias": "fact_nft_sales_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_bb7cde2a7c5ecc6c5b72ff8c01b6f5bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_bb7cde2a7c5ecc6c5b72ff8c01b6f5bf"}, "created_at": 1672281844.7740312, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_currency", "column_name": "currency", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__fact_nft_sales_decimals.33af829054": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "decimals", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_nft_sales_decimals"], "unique_id": "test.terra.not_null_core__fact_nft_sales_decimals.33af829054", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_nft_sales_decimals.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "not_null_core__fact_nft_sales_decimals", "alias": "fact_nft_sales_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/not_null_core__fact_nft_sales_decimals.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7804472, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_nft_sales\nwhere decimals is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_nft_sales_decimals", "column_name": "decimals", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER.15a90b7fac": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "decimals", "model": "{{ get_where_subquery(ref('core__fact_nft_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e64b8ccae9461a063726dae9df70155c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER.15a90b7fac", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e64b8ccae9461a063726dae9df70155c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e64b8ccae9461a063726dae9df70155c.sql", "original_file_path": "models/core/core__fact_nft_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER", "alias": "fact_nft_sales_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_sales"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_sales.yml/dbt_expectations_expect_column_e64b8ccae9461a063726dae9df70155c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e64b8ccae9461a063726dae9df70155c"}, "created_at": 1672281844.782662, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PURCHASER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SALES_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MARKETPLACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_nft_sales_decimals", "column_name": "decimals", "file_key_name": "models.core__fact_nft_sales"}, "test.terra.not_null_core__ez_swaps_BLOCK_ID.36b7acff73": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_BLOCK_ID"], "unique_id": "test.terra.not_null_core__ez_swaps_BLOCK_ID.36b7acff73", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_BLOCK_ID", "alias": "ez_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.7974455, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT.fdad2674ca": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca83354dfa5b0e715749fdb7e45e1c34", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT.fdad2674ca", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca83354dfa5b0e715749fdb7e45e1c34\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ca83354dfa5b0e715749fdb7e45e1c34.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT", "alias": "ez_swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_ca83354dfa5b0e715749fdb7e45e1c34.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_ca83354dfa5b0e715749fdb7e45e1c34"}, "created_at": 1672281844.79982, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_BLOCK_TIMESTAMP.e04f859b55": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__ez_swaps_BLOCK_TIMESTAMP.e04f859b55", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_BLOCK_TIMESTAMP", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8063245, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b056ffabe5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d689f3976c18725500b2c54554960163", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b056ffabe5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d689f3976c18725500b2c54554960163\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d689f3976c18725500b2c54554960163.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_d689f3976c18725500b2c54554960163.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d689f3976c18725500b2c54554960163"}, "created_at": 1672281844.8085713, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_BLOCKCHAIN.9767d6d83f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_BLOCKCHAIN"], "unique_id": "test.terra.not_null_core__ez_swaps_BLOCKCHAIN.9767d6d83f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_BLOCKCHAIN.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_BLOCKCHAIN", "alias": "ez_swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8152692, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR.abb60c2c90": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4a4b7eddaa79017520f31c10acd5ca7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR.abb60c2c90", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4a4b7eddaa79017520f31c10acd5ca7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e4a4b7eddaa79017520f31c10acd5ca7.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR", "alias": "ez_swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_e4a4b7eddaa79017520f31c10acd5ca7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e4a4b7eddaa79017520f31c10acd5ca7"}, "created_at": 1672281844.8174667, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_CHAIN_ID.2022725566": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_CHAIN_ID"], "unique_id": "test.terra.not_null_core__ez_swaps_CHAIN_ID.2022725566", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_CHAIN_ID.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_CHAIN_ID", "alias": "ez_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8240824, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.5ce8aab982": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.5ce8aab982", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1", "alias": "ez_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8262799, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.ez_swaps\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.ez_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR.397ba10998": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_da2735ab345af65eaa9ad0f55584c1ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR.397ba10998", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_da2735ab345af65eaa9ad0f55584c1ab\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_da2735ab345af65eaa9ad0f55584c1ab.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR", "alias": "ez_swaps_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_da2735ab345af65eaa9ad0f55584c1ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_da2735ab345af65eaa9ad0f55584c1ab"}, "created_at": 1672281844.832123, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_TX_ID.c724624638": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_TX_ID"], "unique_id": "test.terra.not_null_core__ez_swaps_TX_ID.c724624638", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_TX_ID.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_TX_ID", "alias": "ez_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8385272, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR.87cd04ec40": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e594a42482e2d69fca854f7210f536c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR.87cd04ec40", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e594a42482e2d69fca854f7210f536c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1e594a42482e2d69fca854f7210f536c.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR", "alias": "ez_swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_1e594a42482e2d69fca854f7210f536c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_1e594a42482e2d69fca854f7210f536c"}, "created_at": 1672281844.840738, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_TX_SUCCEEDED.596ab1bb50": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__ez_swaps_TX_SUCCEEDED.596ab1bb50", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_TX_SUCCEEDED", "alias": "ez_swaps_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8471754, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean.d369ca878f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["boolean"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_91ba140fd53cc592bb1df668a0fba3be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean.d369ca878f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_91ba140fd53cc592bb1df668a0fba3be\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_91ba140fd53cc592bb1df668a0fba3be.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean", "alias": "ez_swaps_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_91ba140fd53cc592bb1df668a0fba3be.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_91ba140fd53cc592bb1df668a0fba3be"}, "created_at": 1672281844.849374, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_from_currency.e4b5e2d3f1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "from_currency", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_from_currency"], "unique_id": "test.terra.not_null_core__ez_swaps_from_currency.e4b5e2d3f1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_from_currency.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_from_currency", "alias": "ez_swaps_from_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_from_currency.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8553572, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere from_currency is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_from_currency", "column_name": "from_currency", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR.7fc1a010af": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "from_currency", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1be2377fdfa5898dd27833bdaa04e47e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR.7fc1a010af", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1be2377fdfa5898dd27833bdaa04e47e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1be2377fdfa5898dd27833bdaa04e47e.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR", "alias": "ez_swaps_from_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_1be2377fdfa5898dd27833bdaa04e47e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_1be2377fdfa5898dd27833bdaa04e47e"}, "created_at": 1672281844.8575375, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_from_currency", "column_name": "from_currency", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_swaps_trader.efdb9beb1d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "trader", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_swaps_trader"], "unique_id": "test.terra.not_null_core__ez_swaps_trader.efdb9beb1d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_swaps_trader.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "not_null_core__ez_swaps_trader", "alias": "ez_swaps_trader", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/not_null_core__ez_swaps_trader.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.8638823, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_swaps\nwhere trader is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_swaps_trader", "column_name": "trader", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR.057b6c70ef": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "trader", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79bc9528bbb2b1226093b89b22663429", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR.057b6c70ef", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79bc9528bbb2b1226093b89b22663429\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_79bc9528bbb2b1226093b89b22663429.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR", "alias": "ez_swaps_trader", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_79bc9528bbb2b1226093b89b22663429.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_79bc9528bbb2b1226093b89b22663429"}, "created_at": 1672281844.8660605, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRADER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_trader", "column_name": "trader", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER.05a3aedf05": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float", "NUMBER"], "column_name": "from_amount", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0a2390845178ee79b2e82f69dc11e4f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER.05a3aedf05", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0a2390845178ee79b2e82f69dc11e4f1\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_0a2390845178ee79b2e82f69dc11e4f1.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER", "alias": "ez_swaps_from_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_0a2390845178ee79b2e82f69dc11e4f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_0a2390845178ee79b2e82f69dc11e4f1"}, "created_at": 1672281844.872505, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_AMOUNT'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_from_amount", "column_name": "from_amount", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER.ebff115896": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float", "NUMBER"], "column_name": "from_decimal", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d3796730a96b605758b9685ffd4358b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER.ebff115896", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d3796730a96b605758b9685ffd4358b9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d3796730a96b605758b9685ffd4358b9.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER", "alias": "ez_swaps_from_decimal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_d3796730a96b605758b9685ffd4358b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d3796730a96b605758b9685ffd4358b9"}, "created_at": 1672281844.8792825, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'FROM_DECIMAL'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_from_decimal", "column_name": "from_decimal", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL.aede885d13": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT", "DECIMAL"], "column_name": "to_amount", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_936c813ab9d34259ee6612128c49c2aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL.aede885d13", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_936c813ab9d34259ee6612128c49c2aa\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_936c813ab9d34259ee6612128c49c2aa.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL", "alias": "ez_swaps_to_amount", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_936c813ab9d34259ee6612128c49c2aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_936c813ab9d34259ee6612128c49c2aa"}, "created_at": 1672281844.8861995, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT', 'DECIMAL')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_to_amount", "column_name": "to_amount", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR.be42e1a2b5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "to_currency", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e14ff8171ac816b243b0c23dcf5b8fa9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR.be42e1a2b5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e14ff8171ac816b243b0c23dcf5b8fa9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e14ff8171ac816b243b0c23dcf5b8fa9.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR", "alias": "ez_swaps_to_currency", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_e14ff8171ac816b243b0c23dcf5b8fa9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e14ff8171ac816b243b0c23dcf5b8fa9"}, "created_at": 1672281844.8927698, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_CURRENCY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_to_currency", "column_name": "to_currency", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER.ae7f271aa5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float", "NUMBER"], "column_name": "to_decimal", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8b34512200999691f25226c31b5fbe8f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER.ae7f271aa5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8b34512200999691f25226c31b5fbe8f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8b34512200999691f25226c31b5fbe8f.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER", "alias": "ez_swaps_to_decimal", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_8b34512200999691f25226c31b5fbe8f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_8b34512200999691f25226c31b5fbe8f"}, "created_at": 1672281844.8991747, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TO_DECIMAL'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT', 'NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_to_decimal", "column_name": "to_decimal", "file_key_name": "models.core__ez_swaps"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR.b95d7aa2e0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "pool_ids", "model": "{{ get_where_subquery(ref('core__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_336ddae42d16162de49d892063f9efd3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR.b95d7aa2e0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_336ddae42d16162de49d892063f9efd3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_336ddae42d16162de49d892063f9efd3.sql", "original_file_path": "models/core/core__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR", "alias": "ez_swaps_pool_ids", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_swaps.yml/dbt_expectations_expect_column_336ddae42d16162de49d892063f9efd3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_336ddae42d16162de49d892063f9efd3"}, "created_at": 1672281844.9059854, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRADER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_DECIMAL' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POOL_IDS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_swaps_pool_ids", "column_name": "pool_ids", "file_key_name": "models.core__ez_swaps"}, "test.terra.not_null_core__ez_staking_ACTION.7ab86e3bc7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ACTION", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_ACTION"], "unique_id": "test.terra.not_null_core__ez_staking_ACTION.7ab86e3bc7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_ACTION.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_ACTION", "alias": "ez_staking_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9262693, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_ACTION", "column_name": "ACTION", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_BLOCKCHAIN.9a855d42ca": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_BLOCKCHAIN"], "unique_id": "test.terra.not_null_core__ez_staking_BLOCKCHAIN.9a855d42ca", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_BLOCKCHAIN.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_BLOCKCHAIN", "alias": "ez_staking_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9286473, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_BLOCK_ID.c41de65c37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_BLOCK_ID"], "unique_id": "test.terra.not_null_core__ez_staking_BLOCK_ID.c41de65c37", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_BLOCK_ID", "alias": "ez_staking_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.931108, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_BLOCK_TIMESTAMP.59b42e31b0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__ez_staking_BLOCK_TIMESTAMP.59b42e31b0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_BLOCK_TIMESTAMP", "alias": "ez_staking_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.933276, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1.29ce75adc1": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_867847b1d0784a4d79f1c6468dd72d0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["terra", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1.29ce75adc1", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_867847b1d0784a4d79f1c6468dd72d0f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_867847b1d0784a4d79f1c6468dd72d0f.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1", "alias": "ez_staking_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_expectations_expect_row_va_867847b1d0784a4d79f1c6468dd72d0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_row_va_867847b1d0784a4d79f1c6468dd72d0f"}, "created_at": 1672281844.9354699, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.core.ez_staking\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.ez_staking_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_CHAIN_ID.75d5778ca8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_CHAIN_ID"], "unique_id": "test.terra.not_null_core__ez_staking_CHAIN_ID.75d5778ca8", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_CHAIN_ID.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_CHAIN_ID", "alias": "ez_staking_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9454033, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.0211f19e9b": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terra[0-9a-z]{39,39}", "column_name": "DELEGATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79e5aae85730f129d84840269805846a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.0211f19e9b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79e5aae85730f129d84840269805846a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_79e5aae85730f129d84840269805846a.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_", "alias": "ez_staking_DELEGATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_expectations_expect_column_79e5aae85730f129d84840269805846a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_79e5aae85730f129d84840269805846a"}, "created_at": 1672281844.9479392, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(DELEGATOR_ADDRESS, 'terra[0-9a-z]{39,39}', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.core.ez_staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_core.ez_staking_DELEGATOR_ADDRESS", "column_name": "DELEGATOR_ADDRESS", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_AMOUNT.e321ce5675": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_AMOUNT"], "unique_id": "test.terra.not_null_core__ez_staking_AMOUNT.e321ce5675", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_AMOUNT.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_AMOUNT", "alias": "ez_staking_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.954325, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float.33baf19c67": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["decimal", "float"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3fd29029440befb8c6f415e60c77cbd6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float.33baf19c67", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3fd29029440befb8c6f415e60c77cbd6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3fd29029440befb8c6f415e60c77cbd6.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float", "alias": "ez_staking_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_expectations_expect_column_3fd29029440befb8c6f415e60c77cbd6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3fd29029440befb8c6f415e60c77cbd6"}, "created_at": 1672281844.9568965, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_SRC_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_SRC_LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('DECIMAL', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_staking_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_TX_ID.6c975bed79": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_TX_ID"], "unique_id": "test.terra.not_null_core__ez_staking_TX_ID.6c975bed79", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_TX_ID.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_TX_ID", "alias": "ez_staking_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9631255, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_TX_SUCCEEDED.74cd90275e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__ez_staking_TX_SUCCEEDED.74cd90275e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_TX_SUCCEEDED", "alias": "ez_staking_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9656427, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__ez_staking_VALIDATOR_ADDRESS.90c2b45b9f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_staking_VALIDATOR_ADDRESS"], "unique_id": "test.terra.not_null_core__ez_staking_VALIDATOR_ADDRESS.90c2b45b9f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_staking_VALIDATOR_ADDRESS.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "not_null_core__ez_staking_VALIDATOR_ADDRESS", "alias": "ez_staking_VALIDATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/not_null_core__ez_staking_VALIDATOR_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9678364, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_staking\nwhere VALIDATOR_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_staking_VALIDATOR_ADDRESS", "column_name": "VALIDATOR_ADDRESS", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.863595b14c": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terravaloper1[0-9a-z]", "column_name": "VALIDATOR_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e5e4e426001ee9539f1a0a2096cc4a31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.863595b14c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e5e4e426001ee9539f1a0a2096cc4a31\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e5e4e426001ee9539f1a0a2096cc4a31.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_", "alias": "ez_staking_VALIDATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_expectations_expect_column_e5e4e426001ee9539f1a0a2096cc4a31.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e5e4e426001ee9539f1a0a2096cc4a31"}, "created_at": 1672281844.970019, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(VALIDATOR_ADDRESS, 'terravaloper1[0-9a-z]', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.core.ez_staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_core.ez_staking_VALIDATOR_ADDRESS", "column_name": "VALIDATOR_ADDRESS", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.b75809eea1": {"test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "terravaloper1[0-9a-z]", "column_name": "VALIDATOR_SRC_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c4f23e96da6701794c3192b946132613", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.b75809eea1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c4f23e96da6701794c3192b946132613\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_c4f23e96da6701794c3192b946132613.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_", "alias": "ez_staking_VALIDATOR_SRC_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_expectations_expect_column_c4f23e96da6701794c3192b946132613.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_c4f23e96da6701794c3192b946132613"}, "created_at": 1672281844.9767668, "compiled_code": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(VALIDATOR_SRC_ADDRESS, 'terravaloper1[0-9a-z]', 1, 1)\n\n\n > 0\n as expression\n\n\n    from TERRA_DEV.core.ez_staking\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_match_regex_core.ez_staking_VALIDATOR_SRC_ADDRESS", "column_name": "VALIDATOR_SRC_ADDRESS", "file_key_name": "models.core__ez_staking"}, "test.terra.dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS.c121643bd3": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "TX_ID", "ACTION", "MESSAGE_INDEX", "DELEGATOR_ADDRESS"], "model": "{{ get_where_subquery(ref('core__ez_staking')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_staking"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8c55be911971631b2bbc823bebfbef86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS.c121643bd3", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8c55be911971631b2bbc823bebfbef86\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_8c55be911971631b2bbc823bebfbef86.sql", "original_file_path": "models/core/core__ez_staking.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS", "alias": "ez_staking_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_staking"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_staking.yml/dbt_utils_unique_combination_o_8c55be911971631b2bbc823bebfbef86.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_8c55be911971631b2bbc823bebfbef86"}, "created_at": 1672281844.9831991, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, TX_ID, ACTION, MESSAGE_INDEX, DELEGATOR_ADDRESS\n    from TERRA_DEV.core.ez_staking\n    group by BLOCK_ID, TX_ID, ACTION, MESSAGE_INDEX, DELEGATOR_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.ez_staking_BLOCK_ID", "column_name": null, "file_key_name": "models.core__ez_staking"}, "test.terra.not_null_core__fact_msg_attributes_BLOCK_ID.9ee1a30a95": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_BLOCK_ID.9ee1a30a95", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_BLOCK_ID", "alias": "fact_msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281844.9985201, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT.898db0604f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d5d9b8b6cb89861765051353d8a6bbe0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT.898db0604f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d5d9b8b6cb89861765051353d8a6bbe0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d5d9b8b6cb89861765051353d8a6bbe0.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_d5d9b8b6cb89861765051353d8a6bbe0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d5d9b8b6cb89861765051353d8a6bbe0"}, "created_at": 1672281845.0008316, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.ee2107b294": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.ee2107b294", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP", "alias": "fact_msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0079818, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.35f3053b5e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_daba7b256084ce66148dab97760f3d0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.35f3053b5e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_daba7b256084ce66148dab97760f3d0c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_daba7b256084ce66148dab97760f3d0c.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_daba7b256084ce66148dab97760f3d0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_daba7b256084ce66148dab97760f3d0c"}, "created_at": 1672281845.010205, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_BLOCKCHAIN.ec569e1a26": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_BLOCKCHAIN"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_BLOCKCHAIN.ec569e1a26", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_BLOCKCHAIN", "alias": "fact_msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0162916, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.6008e18226": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.6008e18226", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra", "alias": "fact_msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0184984, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_msg_attributes\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR.602888cde2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_33e0cb8f6e68cd67c61f2597a1609c8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR.602888cde2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_33e0cb8f6e68cd67c61f2597a1609c8a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_33e0cb8f6e68cd67c61f2597a1609c8a.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR", "alias": "fact_msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_33e0cb8f6e68cd67c61f2597a1609c8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_33e0cb8f6e68cd67c61f2597a1609c8a"}, "created_at": 1672281845.0244255, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_CHAIN_ID.481e75e9b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_CHAIN_ID.481e75e9b2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_CHAIN_ID", "alias": "fact_msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0305755, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.6f0adb4d76": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.6f0adb4d76", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1", "alias": "fact_msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.033094, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_msg_attributes\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR.c6c5417ca2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5a9cbc54ed339e0ad4c841d73c032c44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR.c6c5417ca2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5a9cbc54ed339e0ad4c841d73c032c44\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5a9cbc54ed339e0ad4c841d73c032c44.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR", "alias": "fact_msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_5a9cbc54ed339e0ad4c841d73c032c44.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_5a9cbc54ed339e0ad4c841d73c032c44"}, "created_at": 1672281845.0385735, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_TX_ID.5c95babc15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_TX_ID"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_TX_ID.5c95babc15", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_TX_ID.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_TX_ID", "alias": "fact_msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.044954, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR.786c130be2": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_91877f71f948e2602012070385f454f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR.786c130be2", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_91877f71f948e2602012070385f454f6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_91877f71f948e2602012070385f454f6.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR", "alias": "fact_msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_91877f71f948e2602012070385f454f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_91877f71f948e2602012070385f454f6"}, "created_at": 1672281845.0471663, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_TX_SUCCEEDED.15419fee12": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_TX_SUCCEEDED.15419fee12", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_TX_SUCCEEDED", "alias": "fact_msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0531158, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN.731b66b324": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a83df9794164e6c93a99434cf42ee953", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN.731b66b324", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a83df9794164e6c93a99434cf42ee953\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a83df9794164e6c93a99434cf42ee953.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN", "alias": "fact_msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_a83df9794164e6c93a99434cf42ee953.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a83df9794164e6c93a99434cf42ee953"}, "created_at": 1672281845.0553172, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR.61c6a6e731": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78f0511fd637f705e7a2d4dfbf6798d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR.61c6a6e731", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78f0511fd637f705e7a2d4dfbf6798d9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_78f0511fd637f705e7a2d4dfbf6798d9.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR", "alias": "fact_msg_attributes_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_78f0511fd637f705e7a2d4dfbf6798d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_78f0511fd637f705e7a2d4dfbf6798d9"}, "created_at": 1672281845.0614061, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_MSG_INDEX.4882260488": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_MSG_INDEX"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_MSG_INDEX.4882260488", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_MSG_INDEX.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_MSG_INDEX", "alias": "fact_msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0678248, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER.e77c3d164b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_13692329ef5f9d3c7098e8980e0046fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER.e77c3d164b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_13692329ef5f9d3c7098e8980e0046fb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_13692329ef5f9d3c7098e8980e0046fb.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER", "alias": "fact_msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_13692329ef5f9d3c7098e8980e0046fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_13692329ef5f9d3c7098e8980e0046fb"}, "created_at": 1672281845.0700479, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_MSG_TYPE.6026ff3069": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_MSG_TYPE"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_MSG_TYPE.6026ff3069", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_MSG_TYPE.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_MSG_TYPE", "alias": "fact_msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.076167, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR.4cf158a3e8": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bdda5af381aa6e27c6ab2a309de5e931", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR.4cf158a3e8", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bdda5af381aa6e27c6ab2a309de5e931\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bdda5af381aa6e27c6ab2a309de5e931.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR", "alias": "fact_msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_bdda5af381aa6e27c6ab2a309de5e931.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_bdda5af381aa6e27c6ab2a309de5e931"}, "created_at": 1672281845.0783563, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.492b40c428": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_ATTRIBUTE_KEY"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.492b40c428", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_ATTRIBUTE_KEY", "alias": "fact_msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.084399, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere ATTRIBUTE_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_ATTRIBUTE_KEY", "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR.91e898b03b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5a2766152572573dde7f61507811d5e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR.91e898b03b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5a2766152572573dde7f61507811d5e3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_5a2766152572573dde7f61507811d5e3.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR", "alias": "fact_msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_5a2766152572573dde7f61507811d5e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_5a2766152572573dde7f61507811d5e3"}, "created_at": 1672281845.086591, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_KEY'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_ATTRIBUTE_KEY", "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.7fe04a3e70": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.7fe04a3e70", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE", "alias": "fact_msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.0925577, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere ATTRIBUTE_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_ATTRIBUTE_VALUE", "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR.8cdcbbc83d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_90bad5c72bf810dd65520b259f8d14b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR.8cdcbbc83d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_90bad5c72bf810dd65520b259f8d14b0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_90bad5c72bf810dd65520b259f8d14b0.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR", "alias": "fact_msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_90bad5c72bf810dd65520b259f8d14b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_90bad5c72bf810dd65520b259f8d14b0"}, "created_at": 1672281845.0947454, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_VALUE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_ATTRIBUTE_VALUE", "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.da71bcfab5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX"], "unique_id": "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.da71bcfab5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX", "alias": "fact_msg_attributes_ATTRIBUTE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1007662, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msg_attributes\nwhere ATTRIBUTE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msg_attributes_ATTRIBUTE_INDEX", "column_name": "ATTRIBUTE_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER.2727761878": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "ATTRIBUTE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_321a22cf69eb9b5722b357d2e254b6d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER.2727761878", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_321a22cf69eb9b5722b357d2e254b6d8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_321a22cf69eb9b5722b357d2e254b6d8.sql", "original_file_path": "models/core/core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER", "alias": "fact_msg_attributes_ATTRIBUTE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msg_attributes.yml/dbt_expectations_expect_column_321a22cf69eb9b5722b357d2e254b6d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_321a22cf69eb9b5722b357d2e254b6d8"}, "created_at": 1672281845.1029644, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msg_attributes_ATTRIBUTE_INDEX", "column_name": "ATTRIBUTE_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1198552, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a71e81a5a59ea51d7072e3dc204a10ec"}, "created_at": 1672281845.1221638, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1287022, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_68f63688a1c28b15eccdff35e6aa7ebc"}, "created_at": 1672281845.1309278, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["terra", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_row_va_9cdfcd3a8222ad8948d486de0065c9b7"}, "created_at": 1672281845.1369221, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.core.fact_blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_HASH", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.146386, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR", "alias": "fact_blocks_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_ac38ec2c9d39af82f4e00a43a4d26f11"}, "created_at": 1672281845.1486423, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CHAIN_ID", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1552567, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_71c3e95f570dfa931c5415296695b48f"}, "created_at": 1672281845.1574502, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_CONSENSUS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_CONSENSUS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_CONSENSUS_HASH", "alias": "fact_blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_CONSENSUS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1639483, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere CONSENSUS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONSENSUS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR", "alias": "fact_blocks_CONSENSUS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_880018e4320d65969864d0765e783b0b"}, "created_at": 1672281845.166164, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONSENSUS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_CONSENSUS_HASH", "column_name": "CONSENSUS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_DATA_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_DATA_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_DATA_HASH", "alias": "fact_blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_DATA_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1726263, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere DATA_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "DATA_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR", "alias": "fact_blocks_DATA_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b9844c73b879a9f33315a9d9f21f34f7"}, "created_at": 1672281845.174832, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DATA_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_DATA_HASH", "column_name": "DATA_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_EVIDENCE"], "unique_id": "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_EVIDENCE.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EVIDENCE", "alias": "fact_blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EVIDENCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.181278, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere EVIDENCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "VARIANT"], "column_name": "EVIDENCE", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT", "alias": "fact_blocks_EVIDENCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_06160c32de63044d14aa152c0b223155"}, "created_at": 1672281845.1835163, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE'\n            and\n            relation_column_type not in ('VARCHAR', 'VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_EVIDENCE", "column_name": "EVIDENCE", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_EVIDENCE_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_EVIDENCE_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_EVIDENCE_HASH", "alias": "fact_blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_EVIDENCE_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1899862, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere EVIDENCE_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVIDENCE_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR", "alias": "fact_blocks_EVIDENCE_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3296d84c05527c4299f09ab9d599c9d9"}, "created_at": 1672281845.1921947, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVIDENCE_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_EVIDENCE_HASH", "column_name": "EVIDENCE_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_BLOCK_HEIGHT"], "unique_id": "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_BLOCK_HEIGHT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_BLOCK_HEIGHT", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_BLOCK_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.1988764, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere BLOCK_HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_HEIGHT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER", "alias": "fact_blocks_BLOCK_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_7b5b1c002666b6f5a6ea6f4d9b138106"}, "created_at": 1672281845.2011123, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_BLOCK_HEIGHT", "column_name": "BLOCK_HEIGHT", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_BLOCK_ID", "alias": "fact_blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2083387, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "LAST_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_LAST_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b88c2a4a996d9fb347cdd1dda86e4dbb"}, "created_at": 1672281845.210603, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_BLOCK_ID'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_BLOCK_ID", "column_name": "LAST_BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_COMMIT"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_COMMIT.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_COMMIT", "alias": "fact_blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_COMMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2175186, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_COMMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "LAST_COMMIT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e9762a37e126391536369005b985a52b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT", "alias": "fact_blocks_LAST_COMMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_e9762a37e126391536369005b985a52b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e9762a37e126391536369005b985a52b"}, "created_at": 1672281845.219754, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_COMMIT", "column_name": "LAST_COMMIT", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_COMMIT_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_COMMIT_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_COMMIT_HASH", "alias": "fact_blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_COMMIT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2257237, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_COMMIT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_COMMIT_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR", "alias": "fact_blocks_LAST_COMMIT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_f50bb1c4201d8b2b0019dc769eb6db22"}, "created_at": 1672281845.2279317, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_COMMIT_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_COMMIT_HASH", "column_name": "LAST_COMMIT_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_LAST_RESULTS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_LAST_RESULTS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_LAST_RESULTS_HASH", "alias": "fact_blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_LAST_RESULTS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2344394, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere LAST_RESULTS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LAST_RESULTS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR", "alias": "fact_blocks_LAST_RESULTS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_fa24ccd97e5aa06c651bee09f368eb62"}, "created_at": 1672281845.236657, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LAST_RESULTS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_LAST_RESULTS_HASH", "column_name": "LAST_RESULTS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_NEXT_VALIDATORS_HASH", "alias": "fact_blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2432182, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere NEXT_VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NEXT_VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR", "alias": "fact_blocks_NEXT_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b4ee8808c8b690d7b87d8a2389702023"}, "created_at": 1672281845.2454119, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NEXT_VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_NEXT_VALIDATORS_HASH", "column_name": "NEXT_VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_PROPOSER_ADDRESS"], "unique_id": "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_PROPOSER_ADDRESS", "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_PROPOSER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2518823, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR", "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_799ae1b2f81df8abe52cf506801299ac"}, "created_at": 1672281845.2540545, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_VALIDATORS_HASH"], "unique_id": "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_VALIDATORS_HASH.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_VALIDATORS_HASH", "alias": "fact_blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_VALIDATORS_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.2605193, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere VALIDATORS_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "VALIDATORS_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR", "alias": "fact_blocks_VALIDATORS_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_555443da2573af3bc4cb01d954671c3b"}, "created_at": 1672281845.2627525, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATORS_HASH'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_VALIDATORS_HASH", "column_name": "VALIDATORS_HASH", "file_key_name": "models.core__fact_blocks"}, "test.terra.not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.226eadfc31": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_ADDRESS_ARRAY", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY"], "unique_id": "test.terra.not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.226eadfc31", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY", "alias": "fact_blocks_VALIDATOR_ADDRESS_ARRAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.269255, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_blocks\nwhere VALIDATOR_ADDRESS_ARRAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_blocks_VALIDATOR_ADDRESS_ARRAY", "column_name": "VALIDATOR_ADDRESS_ARRAY", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.ba080e379c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["ARRAY", "VARIANT", "OBJECT"], "column_name": "VALIDATOR_ADDRESS_ARRAY", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f80cd93a6d7f434fc29acfaba8d7177e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.ba080e379c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f80cd93a6d7f434fc29acfaba8d7177e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f80cd93a6d7f434fc29acfaba8d7177e.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT", "alias": "fact_blocks_VALIDATOR_ADDRESS_ARRAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_expectations_expect_column_f80cd93a6d7f434fc29acfaba8d7177e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_f80cd93a6d7f434fc29acfaba8d7177e"}, "created_at": 1672281845.2714872, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONSENSUS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVIDENCE_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_BLOCK_ID' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_COMMIT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LAST_RESULTS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NEXT_VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATORS_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VALIDATOR_ADDRESS_ARRAY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VALIDATOR_ADDRESS_ARRAY'\n            and\n            relation_column_type not in ('ARRAY', 'VARIANT', 'OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_blocks_VALIDATOR_ADDRESS_ARRAY", "column_name": "VALIDATOR_ADDRESS_ARRAY", "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["block_id"], "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_f5945fa47bdcd78cceb32e9415f27171"}, "created_at": 1672281845.2784457, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        block_id\n    from TERRA_DEV.core.fact_blocks\n    group by block_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.fact_blocks_block_id", "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": {"test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.terra.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "sequence_gaps_core", "fqn": ["terra", "core", "sequence_gaps_core__fact_blocks_block_id"], "unique_id": "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e", "raw_code": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "sequence_gaps_core__fact_blocks_block_id.sql", "original_file_path": "models/core/core__fact_blocks.yml", "name": "sequence_gaps_core__fact_blocks_block_id", "alias": "fact_blocks_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_blocks.yml/sequence_gaps_core__fact_blocks_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1672281845.2850163, "compiled_code": "WITH source AS (\n    SELECT\n        block_timestamp,\n        \n        block_id,\n        LAG(\n            block_id,\n            1\n        ) over (\n            \n            ORDER BY\n                block_id ASC\n        ) AS prev_block_id\n    FROM\n        (select * from TERRA_DEV.core.fact_blocks where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    block_timestamp,\n    \n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.sequence_gaps_core.fact_blocks_block_id", "column_name": null, "file_key_name": "models.core__fact_blocks"}, "test.terra.dbt_utils_unique_combination_of_columns_core__dim_address_labels_address.e61c78962d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["address"], "model": "{{ get_where_subquery(ref('core__dim_address_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__dim_address_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_44dac63d6dad7665e30331600961e89f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__dim_address_labels_address"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__dim_address_labels_address.e61c78962d", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_44dac63d6dad7665e30331600961e89f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_44dac63d6dad7665e30331600961e89f.sql", "original_file_path": "models/core/core__dim_address_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_address_labels_address", "alias": "dim_address_labels_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_address_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__dim_address_labels.yml/dbt_utils_unique_combination_o_44dac63d6dad7665e30331600961e89f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_44dac63d6dad7665e30331600961e89f"}, "created_at": 1672281845.2995794, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address\n    from TERRA_DEV.core.dim_address_labels\n    group by address\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.dim_address_labels_address", "column_name": null, "file_key_name": "models.core__dim_address_labels"}, "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_ID.f3e783f422": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_ID.f3e783f422", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_BLOCK_ID", "alias": "fact_governance_submit_proposal_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3128886, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.33c71ade4b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e3c239e9e310facced2ecd9b214186a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.33c71ade4b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e3c239e9e310facced2ecd9b214186a6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e3c239e9e310facced2ecd9b214186a6.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_governance_submit_proposal_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_e3c239e9e310facced2ecd9b214186a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e3c239e9e310facced2ecd9b214186a6"}, "created_at": 1672281845.3152478, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.740321bf47": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.740321bf47", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP", "alias": "fact_governance_submit_proposal_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3218539, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e57a22d0ee": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6b62300d13f1dc577124a31da29355ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e57a22d0ee", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6b62300d13f1dc577124a31da29355ab\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_6b62300d13f1dc577124a31da29355ab.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_governance_submit_proposal_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_6b62300d13f1dc577124a31da29355ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_6b62300d13f1dc577124a31da29355ab"}, "created_at": 1672281845.32406, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.07419d4222": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_BLOCKCHAIN"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.07419d4222", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_BLOCKCHAIN", "alias": "fact_governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.330052, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra.98c10656b6": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "accepted_values_core__fact_gov_f5e94c431b40b8a93c64f8476e357ebf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra.98c10656b6", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_core__fact_gov_f5e94c431b40b8a93c64f8476e357ebf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_gov_f5e94c431b40b8a93c64f8476e357ebf.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra", "alias": "fact_governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/accepted_values_core__fact_gov_f5e94c431b40b8a93c64f8476e357ebf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "accepted_values_core__fact_gov_f5e94c431b40b8a93c64f8476e357ebf"}, "created_at": 1672281845.332243, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_submit_proposal\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.ffa1eb12d0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27c2e428bc0160130c5a11fe94ec5dc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.ffa1eb12d0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27c2e428bc0160130c5a11fe94ec5dc0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_27c2e428bc0160130c5a11fe94ec5dc0.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR", "alias": "fact_governance_submit_proposal_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_27c2e428bc0160130c5a11fe94ec5dc0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_27c2e428bc0160130c5a11fe94ec5dc0"}, "created_at": 1672281845.338215, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_CHAIN_ID.cb0a20e36e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_CHAIN_ID.cb0a20e36e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_CHAIN_ID", "alias": "fact_governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3445313, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1.56bd57d7da": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "accepted_values_core__fact_gov_65ded6a87344996415b7ae1ca30170ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1.56bd57d7da", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_core__fact_gov_65ded6a87344996415b7ae1ca30170ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_gov_65ded6a87344996415b7ae1ca30170ef.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1", "alias": "fact_governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/accepted_values_core__fact_gov_65ded6a87344996415b7ae1ca30170ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "accepted_values_core__fact_gov_65ded6a87344996415b7ae1ca30170ef"}, "created_at": 1672281845.3467212, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_submit_proposal\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.6b1cc2b79d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_92d313ecf2dd2ecc46aa13726340f78c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.6b1cc2b79d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_92d313ecf2dd2ecc46aa13726340f78c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_92d313ecf2dd2ecc46aa13726340f78c.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR", "alias": "fact_governance_submit_proposal_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_92d313ecf2dd2ecc46aa13726340f78c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_92d313ecf2dd2ecc46aa13726340f78c"}, "created_at": 1672281845.3527153, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.unique_core__fact_governance_submit_proposal_TX_ID.de29712fdc": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_core", "fqn": ["terra", "core", "unique_core__fact_governance_submit_proposal_TX_ID"], "unique_id": "test.terra.unique_core__fact_governance_submit_proposal_TX_ID.de29712fdc", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_core__fact_governance_submit_proposal_TX_ID.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "unique_core__fact_governance_submit_proposal_TX_ID", "alias": "fact_governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/unique_core__fact_governance_submit_proposal_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3587668, "compiled_code": "\n    \n    \n\nselect\n    TX_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere TX_ID is not null\ngroup by TX_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_core.fact_governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_TX_ID.5bc20f3f52": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_TX_ID"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_TX_ID.5bc20f3f52", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_TX_ID.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_TX_ID", "alias": "fact_governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3612204, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__transactions')", "field": "tx_id", "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions", "model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "relationships_core__fact_gover_d2d1800a7475682b532b2ef81f499eb2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_core", "fqn": ["terra", "core", "relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_"], "unique_id": "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_core__fact_gover_d2d1800a7475682b532b2ef81f499eb2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_core__fact_gover_d2d1800a7475682b532b2ef81f499eb2.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_", "alias": "fact_governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/relationships_core__fact_gover_d2d1800a7475682b532b2ef81f499eb2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "relationships_core__fact_gover_d2d1800a7475682b532b2ef81f499eb2"}, "created_at": 1672281845.363406, "compiled_code": "\n    \n    \n\nwith child as (\n    select TX_ID as from_field\n    from TERRA_DEV.core.fact_governance_submit_proposal\n    where TX_ID is not null\n),\n\nparent as (\n    select tx_id as to_field\n    from TERRA_DEV.silver.transactions\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_core.fact_governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR.035658877c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be6956f7bb74b71e29d79039d8caab35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR.035658877c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be6956f7bb74b71e29d79039d8caab35\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_be6956f7bb74b71e29d79039d8caab35.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR", "alias": "fact_governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_be6956f7bb74b71e29d79039d8caab35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_be6956f7bb74b71e29d79039d8caab35"}, "created_at": 1672281845.3701143, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.016ad7c9f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.016ad7c9f4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED", "alias": "fact_governance_submit_proposal_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3763824, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN.d69b8d5c48": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0e00e674d32efcbe3e5c5e48ed19710", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN.d69b8d5c48", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0e00e674d32efcbe3e5c5e48ed19710\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a0e00e674d32efcbe3e5c5e48ed19710.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN", "alias": "fact_governance_submit_proposal_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_a0e00e674d32efcbe3e5c5e48ed19710.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a0e00e674d32efcbe3e5c5e48ed19710"}, "created_at": 1672281845.3785603, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSER.54faa3af33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_PROPOSER"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSER.54faa3af33", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_PROPOSER.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_PROPOSER", "alias": "fact_governance_submit_proposal_PROPOSER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_PROPOSER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3843434, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere PROPOSER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_PROPOSER", "column_name": "PROPOSER", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR.54043dd4c0": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROPOSER", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_26ca3f761d68fd62d3fc8d3aad55a5fd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR.54043dd4c0", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_26ca3f761d68fd62d3fc8d3aad55a5fd\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_26ca3f761d68fd62d3fc8d3aad55a5fd.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR", "alias": "fact_governance_submit_proposal_PROPOSER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_26ca3f761d68fd62d3fc8d3aad55a5fd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_26ca3f761d68fd62d3fc8d3aad55a5fd"}, "created_at": 1672281845.3865378, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_PROPOSER", "column_name": "PROPOSER", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.781c5c6f88": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_PROPOSAL_ID"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.781c5c6f88", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_PROPOSAL_ID", "alias": "fact_governance_submit_proposal_PROPOSAL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.3927884, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere PROPOSAL_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_PROPOSAL_ID", "column_name": "PROPOSAL_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER.4ec37c1f52": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "PROPOSAL_ID", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dda862eb9a09970687d3d6784b2dec4f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER.4ec37c1f52", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dda862eb9a09970687d3d6784b2dec4f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_dda862eb9a09970687d3d6784b2dec4f.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER", "alias": "fact_governance_submit_proposal_PROPOSAL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_dda862eb9a09970687d3d6784b2dec4f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_dda862eb9a09970687d3d6784b2dec4f"}, "created_at": 1672281845.394978, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_PROPOSAL_ID", "column_name": "PROPOSAL_ID", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.eafb77597a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSAL_TYPE", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE"], "unique_id": "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.eafb77597a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE", "alias": "fact_governance_submit_proposal_PROPOSAL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.400846, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_submit_proposal\nwhere PROPOSAL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_submit_proposal_PROPOSAL_TYPE", "column_name": "PROPOSAL_TYPE", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.ff3c876aa5": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR", "STRING"], "column_name": "PROPOSAL_TYPE", "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a0f409aa46d6c3286b9c6d1ecd2ae9a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.ff3c876aa5", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a0f409aa46d6c3286b9c6d1ecd2ae9a0\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a0f409aa46d6c3286b9c6d1ecd2ae9a0.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING", "alias": "fact_governance_submit_proposal_PROPOSAL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_expectations_expect_column_a0f409aa46d6c3286b9c6d1ecd2ae9a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a0f409aa46d6c3286b9c6d1ecd2ae9a0"}, "created_at": 1672281845.4030378, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_TYPE'\n            and\n            relation_column_type not in ('VARCHAR', 'STRING')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_submit_proposal_PROPOSAL_TYPE", "column_name": "PROPOSAL_TYPE", "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID.45703b82e7": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('core__fact_governance_submit_proposal')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_submit_proposal"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_84dab54f512789efa94777a4ffff16bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID.45703b82e7", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_84dab54f512789efa94777a4ffff16bf\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_84dab54f512789efa94777a4ffff16bf.sql", "original_file_path": "models/core/core__fact_governance_submit_proposal.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID", "alias": "fact_governance_submit_proposal_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_submit_proposal"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_submit_proposal.yml/dbt_utils_unique_combination_o_84dab54f512789efa94777a4ffff16bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_84dab54f512789efa94777a4ffff16bf"}, "created_at": 1672281845.409927, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from TERRA_DEV.core.fact_governance_submit_proposal\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.fact_governance_submit_proposal_TX_ID", "column_name": null, "file_key_name": "models.core__fact_governance_submit_proposal"}, "test.terra.unique_core__ez_transfers_TRANSFER_ID.f5615fdce0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_core", "fqn": ["terra", "core", "unique_core__ez_transfers_TRANSFER_ID"], "unique_id": "test.terra.unique_core__ez_transfers_TRANSFER_ID.f5615fdce0", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_core__ez_transfers_TRANSFER_ID.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "unique_core__ez_transfers_TRANSFER_ID", "alias": "ez_transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/unique_core__ez_transfers_TRANSFER_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4237335, "compiled_code": "\n    \n    \n\nselect\n    TRANSFER_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.core.ez_transfers\nwhere TRANSFER_ID is not null\ngroup by TRANSFER_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_core.ez_transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_TRANSFER_ID.197d88c1d9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_TRANSFER_ID"], "unique_id": "test.terra.not_null_core__ez_transfers_TRANSFER_ID.197d88c1d9", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_TRANSFER_ID.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_TRANSFER_ID", "alias": "ez_transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_TRANSFER_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4260879, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere TRANSFER_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR.1fe6f41471": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TRANSFER_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a00a874e66ae236e2e5075d7c84b2740", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR.1fe6f41471", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a00a874e66ae236e2e5075d7c84b2740\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a00a874e66ae236e2e5075d7c84b2740.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR", "alias": "ez_transfers_TRANSFER_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_a00a874e66ae236e2e5075d7c84b2740.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a00a874e66ae236e2e5075d7c84b2740"}, "created_at": 1672281845.4282382, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TRANSFER_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_TRANSFER_ID", "column_name": "TRANSFER_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_TX_ID.2ae5b080df": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_TX_ID"], "unique_id": "test.terra.not_null_core__ez_transfers_TX_ID.2ae5b080df", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_TX_ID.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_TX_ID", "alias": "ez_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.434435, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR.7424e1cbc6": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ccaf02b6329e3593f1863aac0f621cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR.7424e1cbc6", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ccaf02b6329e3593f1863aac0f621cb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4ccaf02b6329e3593f1863aac0f621cb.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR", "alias": "ez_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_4ccaf02b6329e3593f1863aac0f621cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_4ccaf02b6329e3593f1863aac0f621cb"}, "created_at": 1672281845.436617, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_BLOCK_ID.631d739518": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_BLOCK_ID"], "unique_id": "test.terra.not_null_core__ez_transfers_BLOCK_ID.631d739518", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_BLOCK_ID", "alias": "ez_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4427383, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT.6ac41f348c": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8edd291f04cbc966ad4cff0bc798ff3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT.6ac41f348c", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8edd291f04cbc966ad4cff0bc798ff3\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_a8edd291f04cbc966ad4cff0bc798ff3.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT", "alias": "ez_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_a8edd291f04cbc966ad4cff0bc798ff3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_a8edd291f04cbc966ad4cff0bc798ff3"}, "created_at": 1672281845.4448843, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_BLOCK_TIMESTAMP", "alias": "ez_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4509816, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.5fb2e0bffb": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8fdea5beb8dd19173bf243587c772c8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.5fb2e0bffb", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8fdea5beb8dd19173bf243587c772c8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b8fdea5beb8dd19173bf243587c772c8.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_b8fdea5beb8dd19173bf243587c772c8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b8fdea5beb8dd19173bf243587c772c8"}, "created_at": 1672281845.453119, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_TX_SUCCEEDED", "alias": "ez_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4588327, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN.5936726427": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_797905e911accaeb2ea5247d2b408c6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN.5936726427", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_797905e911accaeb2ea5247d2b408c6a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_797905e911accaeb2ea5247d2b408c6a.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN", "alias": "ez_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_797905e911accaeb2ea5247d2b408c6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_797905e911accaeb2ea5247d2b408c6a"}, "created_at": 1672281845.4609702, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_CHAIN_ID.37e48b015b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_CHAIN_ID"], "unique_id": "test.terra.not_null_core__ez_transfers_CHAIN_ID.37e48b015b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_CHAIN_ID.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_CHAIN_ID", "alias": "ez_transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.466738, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR.1dd1ea263b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_86a840e33807f06abd955955fa1d6e8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR.1dd1ea263b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_86a840e33807f06abd955955fa1d6e8d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_86a840e33807f06abd955955fa1d6e8d.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR", "alias": "ez_transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_86a840e33807f06abd955955fa1d6e8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_86a840e33807f06abd955955fa1d6e8d"}, "created_at": 1672281845.4688995, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_MESSAGE_INDEX.2d0b0c9a82": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_core__ez_transfers_MESSAGE_INDEX.2d0b0c9a82", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_MESSAGE_INDEX.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_MESSAGE_INDEX", "alias": "ez_transfers_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4746447, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER.74880becef": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b76e2d38b0d83694877efcbcdb664709", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER.74880becef", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b76e2d38b0d83694877efcbcdb664709\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b76e2d38b0d83694877efcbcdb664709.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER", "alias": "ez_transfers_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_b76e2d38b0d83694877efcbcdb664709.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b76e2d38b0d83694877efcbcdb664709"}, "created_at": 1672281845.4767842, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__ez_transfers"}, "test.terra.not_null_core__ez_transfers_MESSAGE_TYPE.0b0168ec7d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_transfers_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_core__ez_transfers_MESSAGE_TYPE.0b0168ec7d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_transfers_MESSAGE_TYPE.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "not_null_core__ez_transfers_MESSAGE_TYPE", "alias": "ez_transfers_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/not_null_core__ez_transfers_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.4825728, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_transfers\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_transfers_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR.e399be1152": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ee117553dc9c479c715b69c9adf30f76", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR.e399be1152", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ee117553dc9c479c715b69c9adf30f76\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ee117553dc9c479c715b69c9adf30f76.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR", "alias": "ez_transfers_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_expectations_expect_column_ee117553dc9c479c715b69c9adf30f76.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_ee117553dc9c479c715b69c9adf30f76"}, "created_at": 1672281845.484701, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_transfers_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__ez_transfers"}, "test.terra.dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id.177289bef9": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["transfer_id"], "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_1ad0c80ea85354e454f756c066634b52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id.177289bef9", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_1ad0c80ea85354e454f756c066634b52\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_1ad0c80ea85354e454f756c066634b52.sql", "original_file_path": "models/core/core__ez_transfers.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id", "alias": "ez_transfers_transfer_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_transfers.yml/dbt_utils_unique_combination_o_1ad0c80ea85354e454f756c066634b52.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_1ad0c80ea85354e454f756c066634b52"}, "created_at": 1672281845.490438, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        transfer_id\n    from TERRA_DEV.core.ez_transfers\n    group by transfer_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.ez_transfers_transfer_id", "column_name": null, "file_key_name": "models.core__ez_transfers"}, "test.terra.unique_core__fact_governance_votes_tx_id.da6e4bd5dd": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_core", "fqn": ["terra", "core", "unique_core__fact_governance_votes_tx_id"], "unique_id": "test.terra.unique_core__fact_governance_votes_tx_id.da6e4bd5dd", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_core__fact_governance_votes_tx_id.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "unique_core__fact_governance_votes_tx_id", "alias": "fact_governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/unique_core__fact_governance_votes_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.503266, "compiled_code": "\n    \n    \n\nselect\n    tx_id as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.core.fact_governance_votes\nwhere tx_id is not null\ngroup by tx_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_core.fact_governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_tx_id.c9344888d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_tx_id"], "unique_id": "test.terra.not_null_core__fact_governance_votes_tx_id.c9344888d3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_tx_id.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_tx_id", "alias": "fact_governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_tx_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.505542, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere tx_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__transactions')", "field": "tx_id", "column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__transactions", "model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "relationships_core__fact_gover_bc1d4cc0a5d1cc6edc92d9231eec8d6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_core", "fqn": ["terra", "core", "relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_"], "unique_id": "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_core__fact_gover_bc1d4cc0a5d1cc6edc92d9231eec8d6c\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_core__fact_gover_bc1d4cc0a5d1cc6edc92d9231eec8d6c.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_", "alias": "fact_governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"], ["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/relationships_core__fact_gover_bc1d4cc0a5d1cc6edc92d9231eec8d6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "relationships_core__fact_gover_bc1d4cc0a5d1cc6edc92d9231eec8d6c"}, "created_at": 1672281845.5086734, "compiled_code": "\n    \n    \n\nwith child as (\n    select tx_id as from_field\n    from TERRA_DEV.core.fact_governance_votes\n    where tx_id is not null\n),\n\nparent as (\n    select tx_id as to_field\n    from TERRA_DEV.silver.transactions\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_core.fact_governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar.0396164d9f": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "tx_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bcd3533c332ef54d2de0c29a428464c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar.0396164d9f", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bcd3533c332ef54d2de0c29a428464c6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_bcd3533c332ef54d2de0c29a428464c6.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar", "alias": "fact_governance_votes_tx_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_bcd3533c332ef54d2de0c29a428464c6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_bcd3533c332ef54d2de0c29a428464c6"}, "created_at": 1672281845.51507, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_tx_id", "column_name": "tx_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_block_id.dee1992be1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_block_id"], "unique_id": "test.terra.not_null_core__fact_governance_votes_block_id.dee1992be1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_block_id.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_block_id", "alias": "fact_governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_block_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5211532, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere block_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('silver__blocks')", "field": "block_id", "column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.silver__blocks", "model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "relationships_core__fact_gover_06055d12a5974eab35625d7c34781a86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "relationships_core", "fqn": ["terra", "core", "relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_"], "unique_id": "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c", "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_core__fact_gover_06055d12a5974eab35625d7c34781a86\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "relationships_core__fact_gover_06055d12a5974eab35625d7c34781a86.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_", "alias": "fact_governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"], ["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/relationships_core__fact_gover_06055d12a5974eab35625d7c34781a86.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "relationships_core__fact_gover_06055d12a5974eab35625d7c34781a86"}, "created_at": 1672281845.5233345, "compiled_code": "\n    \n    \n\nwith child as (\n    select block_id as from_field\n    from TERRA_DEV.core.fact_governance_votes\n    where block_id is not null\n),\n\nparent as (\n    select block_id as to_field\n    from TERRA_DEV.silver.blocks\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.relationships_core.fact_governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number.6034a8c784": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "block_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d6aa298e6d47239d7b436314aea47a1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number.6034a8c784", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d6aa298e6d47239d7b436314aea47a1b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d6aa298e6d47239d7b436314aea47a1b.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number", "alias": "fact_governance_votes_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_d6aa298e6d47239d7b436314aea47a1b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d6aa298e6d47239d7b436314aea47a1b"}, "created_at": 1672281845.52994, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_block_id", "column_name": "block_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_block_timestamp.57982df904": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_block_timestamp"], "unique_id": "test.terra.not_null_core__fact_governance_votes_block_timestamp.57982df904", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_block_timestamp.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_block_timestamp", "alias": "fact_governance_votes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_block_timestamp.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.535629, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere block_timestamp is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz.a0cefae5de": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["timestamp_ntz"], "column_name": "block_timestamp", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4203e6057e90cd9990931c0f884259be", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz.a0cefae5de", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4203e6057e90cd9990931c0f884259be\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_4203e6057e90cd9990931c0f884259be.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz", "alias": "fact_governance_votes_block_timestamp", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_4203e6057e90cd9990931c0f884259be.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_4203e6057e90cd9990931c0f884259be"}, "created_at": 1672281845.5377505, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_block_timestamp", "column_name": "block_timestamp", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_blockchain.8306d3ad35": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_blockchain"], "unique_id": "test.terra.not_null_core__fact_governance_votes_blockchain.8306d3ad35", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_blockchain.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_blockchain", "alias": "fact_governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_blockchain.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5435274, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere blockchain is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.accepted_values_core__fact_governance_votes_blockchain__terra.a9f25017a4": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_votes_blockchain__terra"], "unique_id": "test.terra.accepted_values_core__fact_governance_votes_blockchain__terra.a9f25017a4", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_governance_votes_blockchain__terra.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "accepted_values_core__fact_governance_votes_blockchain__terra", "alias": "fact_governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/accepted_values_core__fact_governance_votes_blockchain__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5456629, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        blockchain as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_votes\n    group by blockchain\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar.dd011cc870": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "blockchain", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_95cbe8843a028dde612b5b06ac344a1b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar.dd011cc870", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_95cbe8843a028dde612b5b06ac344a1b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_95cbe8843a028dde612b5b06ac344a1b.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar", "alias": "fact_governance_votes_blockchain", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_95cbe8843a028dde612b5b06ac344a1b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_95cbe8843a028dde612b5b06ac344a1b"}, "created_at": 1672281845.5512242, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_blockchain", "column_name": "blockchain", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_chain_id.8e3ab78635": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_chain_id"], "unique_id": "test.terra.not_null_core__fact_governance_votes_chain_id.8e3ab78635", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_chain_id.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_chain_id", "alias": "fact_governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_chain_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5573688, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere chain_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.accepted_values_core__fact_governance_votes_chain_id__phoenix_1.dd069ab2d1": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_votes_chain_id__phoenix_1"], "unique_id": "test.terra.accepted_values_core__fact_governance_votes_chain_id__phoenix_1.dd069ab2d1", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_governance_votes_chain_id__phoenix_1.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "accepted_values_core__fact_governance_votes_chain_id__phoenix_1", "alias": "fact_governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/accepted_values_core__fact_governance_votes_chain_id__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.55954, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        chain_id as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_votes\n    group by chain_id\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar.03e5168e5d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "chain_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_301194a303baf68fb32f62f2169107b2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar.03e5168e5d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_301194a303baf68fb32f62f2169107b2\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_301194a303baf68fb32f62f2169107b2.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar", "alias": "fact_governance_votes_chain_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_301194a303baf68fb32f62f2169107b2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_301194a303baf68fb32f62f2169107b2"}, "created_at": 1672281845.5650854, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_chain_id", "column_name": "chain_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_voter.2e4df9868b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "voter", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_voter"], "unique_id": "test.terra.not_null_core__fact_governance_votes_voter.2e4df9868b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_voter.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_voter", "alias": "fact_governance_votes_voter", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_voter.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5710878, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere voter is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_voter", "column_name": "voter", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar.69ad648249": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "voter", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e92d558b6c1171a7a7ef911e8639cfbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar.69ad648249", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e92d558b6c1171a7a7ef911e8639cfbc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_e92d558b6c1171a7a7ef911e8639cfbc.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar", "alias": "fact_governance_votes_voter", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_e92d558b6c1171a7a7ef911e8639cfbc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_e92d558b6c1171a7a7ef911e8639cfbc"}, "created_at": 1672281845.5735476, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTER'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_voter", "column_name": "voter", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_proposal_id.82987085cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "proposal_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_proposal_id"], "unique_id": "test.terra.not_null_core__fact_governance_votes_proposal_id.82987085cc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_proposal_id.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_proposal_id", "alias": "fact_governance_votes_proposal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_proposal_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.579828, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere proposal_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_proposal_id", "column_name": "proposal_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number.13451ee0ab": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "proposal_id", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d66643383360e1dc1bc381cafc2cd82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number.13451ee0ab", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d66643383360e1dc1bc381cafc2cd82\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3d66643383360e1dc1bc381cafc2cd82.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number", "alias": "fact_governance_votes_proposal_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_3d66643383360e1dc1bc381cafc2cd82.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3d66643383360e1dc1bc381cafc2cd82"}, "created_at": 1672281845.5819914, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROPOSAL_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_proposal_id", "column_name": "proposal_id", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_vote_option.3e9399ec24": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_option", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_vote_option"], "unique_id": "test.terra.not_null_core__fact_governance_votes_vote_option.3e9399ec24", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_vote_option.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_vote_option", "alias": "fact_governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_vote_option.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.5878875, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere vote_option is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1.841e49d338": {"test_metadata": {"name": "expect_column_values_to_be_between", "kwargs": {"min_value": 1, "max_value": 4, "column_name": "vote_option", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_between", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1daa4a7de8b5a8bcc335217e0b11816", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_between_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1.841e49d338", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_between(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1daa4a7de8b5a8bcc335217e0b11816\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b1daa4a7de8b5a8bcc335217e0b11816.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1", "alias": "fact_governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_b1daa4a7de8b5a8bcc335217e0b11816.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b1daa4a7de8b5a8bcc335217e0b11816"}, "created_at": 1672281845.5900528, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and vote_option >= 1 and vote_option <= 4\n)\n as expression\n\n\n    from TERRA_DEV.core.fact_governance_votes\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_between_core.fact_governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number.43d95f7634": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "vote_option", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3a3faabe4a76af03ab50bd11d801102e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number.43d95f7634", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a3faabe4a76af03ab50bd11d801102e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3a3faabe4a76af03ab50bd11d801102e.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number", "alias": "fact_governance_votes_vote_option", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_3a3faabe4a76af03ab50bd11d801102e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3a3faabe4a76af03ab50bd11d801102e"}, "created_at": 1672281845.5957596, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_OPTION'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_vote_option", "column_name": "vote_option", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_vote_option_text.7cf887d562": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_vote_option_text"], "unique_id": "test.terra.not_null_core__fact_governance_votes_vote_option_text.7cf887d562", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_vote_option_text.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_vote_option_text", "alias": "fact_governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_vote_option_text.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6012797, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere vote_option_text is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.734e037304": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Yes", "Abstain", "No", "NoWithVeto"], "column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "accepted_values_core__fact_gov_4f083f5d41ea5562b5db5fa5566193e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto"], "unique_id": "test.terra.accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.734e037304", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_core__fact_gov_4f083f5d41ea5562b5db5fa5566193e9\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_gov_4f083f5d41ea5562b5db5fa5566193e9.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto", "alias": "fact_governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/accepted_values_core__fact_gov_4f083f5d41ea5562b5db5fa5566193e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "accepted_values_core__fact_gov_4f083f5d41ea5562b5db5fa5566193e9"}, "created_at": 1672281845.6043532, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        vote_option_text as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_votes\n    group by vote_option_text\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Yes','Abstain','No','NoWithVeto'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar.ef18544d02": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["string", "varchar"], "column_name": "vote_option_text", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7112423ee6550069d49eeb2865067d1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar.ef18544d02", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7112423ee6550069d49eeb2865067d1f\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_7112423ee6550069d49eeb2865067d1f.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar", "alias": "fact_governance_votes_vote_option_text", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_7112423ee6550069d49eeb2865067d1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_7112423ee6550069d49eeb2865067d1f"}, "created_at": 1672281845.6111536, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_OPTION_TEXT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_vote_option_text", "column_name": "vote_option_text", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_vote_weight.67164d2552": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "vote_weight", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_vote_weight"], "unique_id": "test.terra.not_null_core__fact_governance_votes_vote_weight.67164d2552", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_vote_weight.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_vote_weight", "alias": "fact_governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_vote_weight.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6172042, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere vote_weight is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.accepted_values_core__fact_governance_votes_vote_weight__1.d386476c1c": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": [1], "column_name": "vote_weight", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_governance_votes_vote_weight__1"], "unique_id": "test.terra.accepted_values_core__fact_governance_votes_vote_weight__1.d386476c1c", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_governance_votes_vote_weight__1.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "accepted_values_core__fact_governance_votes_vote_weight__1", "alias": "fact_governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/accepted_values_core__fact_governance_votes_vote_weight__1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6193461, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        vote_weight as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_governance_votes\n    group by vote_weight\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number.e7ef700654": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["number"], "column_name": "vote_weight", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2422a01a9ce588e8599ca3044bd3e3bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number.e7ef700654", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2422a01a9ce588e8599ca3044bd3e3bc\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2422a01a9ce588e8599ca3044bd3e3bc.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number", "alias": "fact_governance_votes_vote_weight", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_2422a01a9ce588e8599ca3044bd3e3bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_2422a01a9ce588e8599ca3044bd3e3bc"}, "created_at": 1672281845.6242511, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'VOTE_WEIGHT'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_vote_weight", "column_name": "vote_weight", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.not_null_core__fact_governance_votes_tx_succeeded.b2cec969cc": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_governance_votes_tx_succeeded"], "unique_id": "test.terra.not_null_core__fact_governance_votes_tx_succeeded.b2cec969cc", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_governance_votes_tx_succeeded.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "not_null_core__fact_governance_votes_tx_succeeded", "alias": "fact_governance_votes_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/not_null_core__fact_governance_votes_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.629806, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_governance_votes\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_governance_votes_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean.862d61ea2b": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["boolean"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__fact_governance_votes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_governance_votes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_63d15e86eda960b12b9140165198dfc6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean.862d61ea2b", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_63d15e86eda960b12b9140165198dfc6\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_63d15e86eda960b12b9140165198dfc6.sql", "original_file_path": "models/core/core__fact_governance_votes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean", "alias": "fact_governance_votes_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_governance_votes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_governance_votes.yml/dbt_expectations_expect_column_63d15e86eda960b12b9140165198dfc6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_63d15e86eda960b12b9140165198dfc6"}, "created_at": 1672281845.6319556, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROPOSAL_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_OPTION_TEXT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('VOTE_WEIGHT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_governance_votes_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__fact_governance_votes"}, "test.terra.dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID.e7a5bd2f6d": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["MINT_ID"], "model": "{{ get_where_subquery(ref('core__fact_nft_mints')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_13ee33eedc4e149b9114f3c421a69abb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID.e7a5bd2f6d", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_13ee33eedc4e149b9114f3c421a69abb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_13ee33eedc4e149b9114f3c421a69abb.sql", "original_file_path": "models/core/core__fact_nft_mints.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID", "alias": "fact_nft_mints_MINT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_nft_mints"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_nft_mints.yml/dbt_utils_unique_combination_o_13ee33eedc4e149b9114f3c421a69abb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_13ee33eedc4e149b9114f3c421a69abb"}, "created_at": 1672281845.644339, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        MINT_ID\n    from TERRA_DEV.core.fact_nft_mints\n    group by MINT_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.fact_nft_mints_MINT_ID", "column_name": null, "file_key_name": "models.core__fact_nft_mints"}, "test.terra.not_null_core__fact_msgs_BLOCK_ID.eac6239202": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_msgs_BLOCK_ID.eac6239202", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_BLOCK_ID", "alias": "fact_msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6563003, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT.f961885cf3": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9bc2c7cee61f66f206697e87682df72b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT.f961885cf3", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9bc2c7cee61f66f206697e87682df72b\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_9bc2c7cee61f66f206697e87682df72b.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT", "alias": "fact_msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_9bc2c7cee61f66f206697e87682df72b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_9bc2c7cee61f66f206697e87682df72b"}, "created_at": 1672281845.658565, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_BLOCK_TIMESTAMP.609eb9a47a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_msgs_BLOCK_TIMESTAMP.609eb9a47a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_BLOCK_TIMESTAMP", "alias": "fact_msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6648593, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93a7511777": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57f63a0edeed38bf15ba247f6e1be8cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93a7511777", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57f63a0edeed38bf15ba247f6e1be8cb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_57f63a0edeed38bf15ba247f6e1be8cb.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_57f63a0edeed38bf15ba247f6e1be8cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_57f63a0edeed38bf15ba247f6e1be8cb"}, "created_at": 1672281845.667044, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_BLOCKCHAIN.56e147388e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_BLOCKCHAIN"], "unique_id": "test.terra.not_null_core__fact_msgs_BLOCKCHAIN.56e147388e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_BLOCKCHAIN", "alias": "fact_msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6728108, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msgs"}, "test.terra.accepted_values_core__fact_msgs_BLOCKCHAIN__terra.ffd02f21d7": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["terra"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_msgs_BLOCKCHAIN__terra"], "unique_id": "test.terra.accepted_values_core__fact_msgs_BLOCKCHAIN__terra.ffd02f21d7", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_msgs_BLOCKCHAIN__terra.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "accepted_values_core__fact_msgs_BLOCKCHAIN__terra", "alias": "fact_msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/accepted_values_core__fact_msgs_BLOCKCHAIN__terra.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.674949, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_msgs\n    group by BLOCKCHAIN\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'terra'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR.8f85219828": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3cafba9a227dd5ece8a3ec44574c3020", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR.8f85219828", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3cafba9a227dd5ece8a3ec44574c3020\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3cafba9a227dd5ece8a3ec44574c3020.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR", "alias": "fact_msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_3cafba9a227dd5ece8a3ec44574c3020.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3cafba9a227dd5ece8a3ec44574c3020"}, "created_at": 1672281845.6804578, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_CHAIN_ID.d05caaf63c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_CHAIN_ID"], "unique_id": "test.terra.not_null_core__fact_msgs_CHAIN_ID.d05caaf63c", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_CHAIN_ID.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_CHAIN_ID", "alias": "fact_msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6865463, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.3f0138ed74": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["phoenix-1"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "accepted_values_core", "fqn": ["terra", "core", "accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1"], "unique_id": "test.terra.accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.3f0138ed74", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1", "alias": "fact_msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6886926, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        CHAIN_ID as value_field,\n        count(*) as n_records\n\n    from TERRA_DEV.core.fact_msgs\n    group by CHAIN_ID\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'phoenix-1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.accepted_values_core.fact_msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR.997aaaa0e7": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66d64ed777b4541228c42a514a81c0fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR.997aaaa0e7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66d64ed777b4541228c42a514a81c0fb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_66d64ed777b4541228c42a514a81c0fb.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR", "alias": "fact_msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_66d64ed777b4541228c42a514a81c0fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_66d64ed777b4541228c42a514a81c0fb"}, "created_at": 1672281845.6940603, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_TX_ID.45d575785f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_TX_ID"], "unique_id": "test.terra.not_null_core__fact_msgs_TX_ID.45d575785f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_TX_ID.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_TX_ID", "alias": "fact_msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.6998959, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR.033128c72a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_626484c0f9bb91e19c87c0bd354d5718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR.033128c72a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_626484c0f9bb91e19c87c0bd354d5718\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_626484c0f9bb91e19c87c0bd354d5718.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR", "alias": "fact_msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_626484c0f9bb91e19c87c0bd354d5718.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_626484c0f9bb91e19c87c0bd354d5718"}, "created_at": 1672281845.7030284, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_TX_SUCCEEDED.a70b9aa0bb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__fact_msgs_TX_SUCCEEDED.a70b9aa0bb", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_TX_SUCCEEDED", "alias": "fact_msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7083673, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN.5561bd7292": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aac7eb8c66eb1bc140cb80e42c467ad5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN.5561bd7292", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aac7eb8c66eb1bc140cb80e42c467ad5\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_aac7eb8c66eb1bc140cb80e42c467ad5.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN", "alias": "fact_msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_aac7eb8c66eb1bc140cb80e42c467ad5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_aac7eb8c66eb1bc140cb80e42c467ad5"}, "created_at": 1672281845.7107785, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR.862a32ad0a": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2d5471ffe0b8f712ec52188e7dd72c41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR.862a32ad0a", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2d5471ffe0b8f712ec52188e7dd72c41\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2d5471ffe0b8f712ec52188e7dd72c41.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR", "alias": "fact_msgs_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_2d5471ffe0b8f712ec52188e7dd72c41.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_2d5471ffe0b8f712ec52188e7dd72c41"}, "created_at": 1672281845.7161617, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_GROUP'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_MSG_INDEX.84cc0bac93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_MSG_INDEX"], "unique_id": "test.terra.not_null_core__fact_msgs_MSG_INDEX.84cc0bac93", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_MSG_INDEX.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_MSG_INDEX", "alias": "fact_msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7221622, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER.0e155538ce": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_31be79f7d8521159a6db43be316f0d74", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER.0e155538ce", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_31be79f7d8521159a6db43be316f0d74\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_31be79f7d8521159a6db43be316f0d74.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER", "alias": "fact_msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_31be79f7d8521159a6db43be316f0d74.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_31be79f7d8521159a6db43be316f0d74"}, "created_at": 1672281845.7243118, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_MSG_TYPE.85292bdc34": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_MSG_TYPE"], "unique_id": "test.terra.not_null_core__fact_msgs_MSG_TYPE.85292bdc34", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_MSG_TYPE.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_MSG_TYPE", "alias": "fact_msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7298727, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR.4e20bbe5d1": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab2d7ba3f1d813fe48e81013fcfb01ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR.4e20bbe5d1", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab2d7ba3f1d813fe48e81013fcfb01ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_ab2d7ba3f1d813fe48e81013fcfb01ef.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR", "alias": "fact_msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_ab2d7ba3f1d813fe48e81013fcfb01ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_ab2d7ba3f1d813fe48e81013fcfb01ef"}, "created_at": 1672281845.732023, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_msgs_MSG.e2d6c790b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_msgs_MSG"], "unique_id": "test.terra.not_null_core__fact_msgs_MSG.e2d6c790b2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_msgs_MSG.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "not_null_core__fact_msgs_MSG", "alias": "fact_msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/not_null_core__fact_msgs_MSG.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7376301, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_msgs\nwhere MSG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_msgs_MSG", "column_name": "MSG", "file_key_name": "models.core__fact_msgs"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT.8ef45b8159": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARIANT"], "column_name": "MSG", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_85365d4adf93be545b99e70b3d6a7c0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT.8ef45b8159", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_85365d4adf93be545b99e70b3d6a7c0a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_85365d4adf93be545b99e70b3d6a7c0a.sql", "original_file_path": "models/core/core__fact_msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT", "alias": "fact_msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_msgs.yml/dbt_expectations_expect_column_85365d4adf93be545b99e70b3d6a7c0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_85365d4adf93be545b99e70b3d6a7c0a"}, "created_at": 1672281845.7397916, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG'\n            and\n            relation_column_type not in ('VARIANT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_msgs_MSG", "column_name": "MSG", "file_key_name": "models.core__fact_msgs"}, "test.terra.not_null_core__fact_transactions_TX_ID.f374dfcdc6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_TX_ID"], "unique_id": "test.terra.not_null_core__fact_transactions_TX_ID.f374dfcdc6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_TX_ID.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7590647, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.terra.unique_core__fact_transactions_TX_ID.389fc7cd9b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "unique_core", "fqn": ["terra", "core", "unique_core__fact_transactions_TX_ID"], "unique_id": "test.terra.unique_core__fact_transactions_TX_ID.389fc7cd9b", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "unique_core__fact_transactions_TX_ID.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "unique_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/unique_core__fact_transactions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.761538, "compiled_code": "\n    \n    \n\nselect\n    TX_ID as unique_field,\n    count(*) as n_records\n\nfrom TERRA_DEV.core.fact_transactions\nwhere TX_ID is not null\ngroup by TX_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.unique_core.fact_transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2": {"test_metadata": {"name": "tx_gaps", "kwargs": {"column_name": "TX_ID", "column_block": "block_id", "column_tx_count": "tx_count", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.terra.test_tx_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions", "model.terra.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "> 1000"}, "database": "TERRA_DEV", "schema": "tx_gaps_core", "fqn": ["terra", "core", "tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count"], "unique_id": "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2", "raw_code": "{{ test_tx_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\",error_if=\"> 1000\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count", "alias": "fact_transactions_block_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "error_if": "> 1000"}, "created_at": 1672281845.7645812, "compiled_code": "\nWITH block_base AS (\n    SELECT\n        block_id,\n        tx_count\n    FROM\n        TERRA_DEV.silver.blocks\n),\nmodel_name AS (\n    SELECT\n        block_id,\n        COUNT(\n            DISTINCT TX_ID\n        ) AS model_tx_count\n    FROM\n        (select * from TERRA_DEV.core.fact_transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n    GROUP BY\n        block_id\n)\nSELECT\n    block_base.block_id,\n    tx_count,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_id = model_name.block_id\nWHERE\n    tx_count <> model_tx_count ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.tx_gaps_core.fact_transactions_block_id", "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.773306, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": {"test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["terra", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_row_va_6ff192036a45c01640dcf2925e7aa4df"}, "created_at": 1672281845.775494, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        TERRA_DEV.core.fact_transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d4ed61df77fe58e87af7053ac49a0f60"}, "created_at": 1672281845.784704, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_BLOCK_ID"], "unique_id": "test.terra.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_BLOCK_ID", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7903914, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER.f44897c42e": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f357314456938418ac0a2308a9e02cea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER.f44897c42e", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f357314456938418ac0a2308a9e02cea\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_f357314456938418ac0a2308a9e02cea.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_f357314456938418ac0a2308a9e02cea.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_f357314456938418ac0a2308a9e02cea"}, "created_at": 1672281845.7926056, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_AUTH_TYPE.582c2b54e0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AUTH_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_AUTH_TYPE"], "unique_id": "test.terra.not_null_core__fact_transactions_AUTH_TYPE.582c2b54e0", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_AUTH_TYPE.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_AUTH_TYPE", "alias": "fact_transactions_AUTH_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_AUTH_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.7991498, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere AUTH_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_AUTH_TYPE", "column_name": "AUTH_TYPE", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.3eddef3456": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "AUTHORIZER_PUBLIC_KEY", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY"], "unique_id": "test.terra.not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.3eddef3456", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY", "alias": "fact_transactions_AUTHORIZER_PUBLIC_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8012562, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere AUTHORIZER_PUBLIC_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_AUTHORIZER_PUBLIC_KEY", "column_name": "AUTHORIZER_PUBLIC_KEY", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_TX_SENDER.ca55265b0a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "tx_succeeded = TRUE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_TX_SENDER"], "unique_id": "test.terra.not_null_core__fact_transactions_TX_SENDER.ca55265b0a", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",where=\"tx_succeeded = TRUE\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_TX_SENDER.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_SENDER", "alias": "fact_transactions_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "ERROR", "where": "tx_succeeded = TRUE"}, "created_at": 1672281845.8042157, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from TERRA_DEV.core.fact_transactions where tx_succeeded = TRUE) dbt_subquery\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_TX_SENDER", "column_name": "TX_SENDER", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_GAS_LIMIT.833d77a375": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_GAS_LIMIT"], "unique_id": "test.terra.not_null_core__fact_transactions_GAS_LIMIT.833d77a375", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_GAS_LIMIT.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_GAS_LIMIT", "alias": "fact_transactions_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.806644, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_GAS_USED.2e66666fc1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_GAS_USED"], "unique_id": "test.terra.not_null_core__fact_transactions_GAS_USED.2e66666fc1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_GAS_USED.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_GAS_USED", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8087306, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_TX_CODE.a63fee458d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_TX_CODE"], "unique_id": "test.terra.not_null_core__fact_transactions_TX_CODE.a63fee458d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_TX_CODE.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_CODE", "alias": "fact_transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_CODE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.810848, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere TX_CODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_TX_CODE", "column_name": "TX_CODE", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER.8dc684a848": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8ff5f59c2798fcfd98de3163cefd01e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER.8dc684a848", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8ff5f59c2798fcfd98de3163cefd01e4\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8ff5f59c2798fcfd98de3163cefd01e4.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER", "alias": "fact_transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_8ff5f59c2798fcfd98de3163cefd01e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_8ff5f59c2798fcfd98de3163cefd01e4"}, "created_at": 1672281845.8129823, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_CODE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_TX_CODE", "column_name": "TX_CODE", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_TX_SUCCEEDED"], "unique_id": "test.terra.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_TX_SUCCEEDED.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_SUCCEEDED", "alias": "fact_transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8188155, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN.a620f4c212": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d3e81b9887d3fce0d9eda4ad1b563ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN.a620f4c212", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d3e81b9887d3fce0d9eda4ad1b563ef\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_3d3e81b9887d3fce0d9eda4ad1b563ef.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN", "alias": "fact_transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/dbt_expectations_expect_column_3d3e81b9887d3fce0d9eda4ad1b563ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_3d3e81b9887d3fce0d9eda4ad1b563ef"}, "created_at": 1672281845.8209546, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTH_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AUTHORIZER_PUBLIC_KEY' as TEXT) as relation_column,\n            cast('ARRAY' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FEE_DENOM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MEMO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.fact_transactions_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__fact_transactions_TX.73062d241f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__fact_transactions_TX"], "unique_id": "test.terra.not_null_core__fact_transactions_TX.73062d241f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__fact_transactions_TX.sql", "original_file_path": "models/core/core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX", "alias": "fact_transactions_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__fact_transactions.yml/not_null_core__fact_transactions_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8267667, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.fact_transactions\nwhere TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.fact_transactions_TX", "column_name": "TX", "file_key_name": "models.core__fact_transactions"}, "test.terra.not_null_core__ez_messages_MESSAGE_ID.cbde651172": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_MESSAGE_ID"], "unique_id": "test.terra.not_null_core__ez_messages_MESSAGE_ID.cbde651172", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_MESSAGE_ID.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_MESSAGE_ID", "alias": "ez_messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_MESSAGE_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8353002, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere MESSAGE_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR.c83b5ab109": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "MESSAGE_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d992652fc809963a691fd23ae3a2b70d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR.c83b5ab109", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d992652fc809963a691fd23ae3a2b70d\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_d992652fc809963a691fd23ae3a2b70d.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR", "alias": "ez_messages_MESSAGE_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_d992652fc809963a691fd23ae3a2b70d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_d992652fc809963a691fd23ae3a2b70d"}, "created_at": 1672281845.837498, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_MESSAGE_ID", "column_name": "MESSAGE_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_BLOCK_ID.43c8918e31": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_BLOCK_ID"], "unique_id": "test.terra.not_null_core__ez_messages_BLOCK_ID.43c8918e31", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_BLOCK_ID.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_BLOCK_ID", "alias": "ez_messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.843863, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT.15a72efd12": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0c76edffa410ce9cd63723f0b3307c26", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT.15a72efd12", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0c76edffa410ce9cd63723f0b3307c26\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_0c76edffa410ce9cd63723f0b3307c26.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT", "alias": "ez_messages_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_0c76edffa410ce9cd63723f0b3307c26.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_0c76edffa410ce9cd63723f0b3307c26"}, "created_at": 1672281845.8460262, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_BLOCK_TIMESTAMP.de22585332": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_BLOCK_TIMESTAMP"], "unique_id": "test.terra.not_null_core__ez_messages_BLOCK_TIMESTAMP.de22585332", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_BLOCK_TIMESTAMP", "alias": "ez_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8523715, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ecc4800d31": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_94fdef5a3d541928be53cb6fdc03c770", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ecc4800d31", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_94fdef5a3d541928be53cb6fdc03c770\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_94fdef5a3d541928be53cb6fdc03c770.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_messages_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_94fdef5a3d541928be53cb6fdc03c770.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_94fdef5a3d541928be53cb6fdc03c770"}, "created_at": 1672281845.8545263, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_TX_ID.32dde41c32": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_TX_ID"], "unique_id": "test.terra.not_null_core__ez_messages_TX_ID.32dde41c32", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_TX_ID.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_TX_ID", "alias": "ez_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.860286, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR.8c5c1d4f2d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1dbf45b8ca7945c35082ebb68598ca8a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR.8c5c1d4f2d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1dbf45b8ca7945c35082ebb68598ca8a\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_1dbf45b8ca7945c35082ebb68598ca8a.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR", "alias": "ez_messages_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_1dbf45b8ca7945c35082ebb68598ca8a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_1dbf45b8ca7945c35082ebb68598ca8a"}, "created_at": 1672281845.8624146, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_tx_succeeded.75d090139f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_tx_succeeded"], "unique_id": "test.terra.not_null_core__ez_messages_tx_succeeded.75d090139f", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_tx_succeeded.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_tx_succeeded", "alias": "ez_messages_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_tx_succeeded.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8686016, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere tx_succeeded is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN.b3e7e4854d": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "tx_succeeded", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8df9f353dbf9df3ff679b408ecec6fb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN.b3e7e4854d", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8df9f353dbf9df3ff679b408ecec6fb\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_b8df9f353dbf9df3ff679b408ecec6fb.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN", "alias": "ez_messages_tx_succeeded", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_b8df9f353dbf9df3ff679b408ecec6fb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_b8df9f353dbf9df3ff679b408ecec6fb"}, "created_at": 1672281845.8707602, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_SUCCEEDED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_tx_succeeded", "column_name": "tx_succeeded", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_CHAIN_ID.fe88aa0ae5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_CHAIN_ID"], "unique_id": "test.terra.not_null_core__ez_messages_CHAIN_ID.fe88aa0ae5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_CHAIN_ID.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_CHAIN_ID", "alias": "ez_messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8764434, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR.bfd32fcd48": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a4b4014d586bb1349715ac83aa68f86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR.bfd32fcd48", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a4b4014d586bb1349715ac83aa68f86\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_2a4b4014d586bb1349715ac83aa68f86.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR", "alias": "ez_messages_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_2a4b4014d586bb1349715ac83aa68f86.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_2a4b4014d586bb1349715ac83aa68f86"}, "created_at": 1672281845.8785946, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CHAIN_ID'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_MESSAGE_INDEX.60b09aad22": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_MESSAGE_INDEX"], "unique_id": "test.terra.not_null_core__ez_messages_MESSAGE_INDEX.60b09aad22", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_MESSAGE_INDEX.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_MESSAGE_INDEX", "alias": "ez_messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_MESSAGE_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.8847148, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere MESSAGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER.827381ca59": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "MESSAGE_INDEX", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cfba48afacb0ea3b425af77dea682d30", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER.827381ca59", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cfba48afacb0ea3b425af77dea682d30\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_cfba48afacb0ea3b425af77dea682d30.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER", "alias": "ez_messages_MESSAGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_cfba48afacb0ea3b425af77dea682d30.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_cfba48afacb0ea3b425af77dea682d30"}, "created_at": 1672281845.8868477, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_INDEX'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_MESSAGE_INDEX", "column_name": "MESSAGE_INDEX", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_MESSAGE_TYPE.df06e247ee": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_MESSAGE_TYPE"], "unique_id": "test.terra.not_null_core__ez_messages_MESSAGE_TYPE.df06e247ee", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_MESSAGE_TYPE.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_MESSAGE_TYPE", "alias": "ez_messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_MESSAGE_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.892489, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere MESSAGE_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR.1abf8652ed": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["VARCHAR"], "column_name": "MESSAGE_TYPE", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d3ed16573404fec6d9167834d21c28e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR.1abf8652ed", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d3ed16573404fec6d9167834d21c28e\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_0d3ed16573404fec6d9167834d21c28e.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR", "alias": "ez_messages_MESSAGE_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_0d3ed16573404fec6d9167834d21c28e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_0d3ed16573404fec6d9167834d21c28e"}, "created_at": 1672281845.894641, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MESSAGE_TYPE'\n            and\n            relation_column_type not in ('VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_MESSAGE_TYPE", "column_name": "MESSAGE_TYPE", "file_key_name": "models.core__ez_messages"}, "test.terra.not_null_core__ez_messages_ATTRIBUTES.5c5a64eef7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_core", "fqn": ["terra", "core", "not_null_core__ez_messages_ATTRIBUTES"], "unique_id": "test.terra.not_null_core__ez_messages_ATTRIBUTES.5c5a64eef7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_core__ez_messages_ATTRIBUTES.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "not_null_core__ez_messages_ATTRIBUTES", "alias": "ez_messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/not_null_core__ez_messages_ATTRIBUTES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error"}, "created_at": 1672281845.9011266, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom TERRA_DEV.core.ez_messages\nwhere ATTRIBUTES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.not_null_core.ez_messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT.91281c2f94": {"test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "ATTRIBUTES", "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8fa134a912ea230acd49e07e3874b5b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["terra", "core", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT.91281c2f94", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8fa134a912ea230acd49e07e3874b5b8\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_8fa134a912ea230acd49e07e3874b5b8.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT", "alias": "ez_messages_ATTRIBUTES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_expectations_expect_column_8fa134a912ea230acd49e07e3874b5b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_expectations_expect_column_8fa134a912ea230acd49e07e3874b5b8"}, "created_at": 1672281845.9032588, "compiled_code": "with relation_columns as (\n\n        \n        select\n            cast('MESSAGE_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MESSAGE_VALUE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTES' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ATTRIBUTES'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.ez_messages_ATTRIBUTES", "column_name": "ATTRIBUTES", "file_key_name": "models.core__ez_messages"}, "test.terra.dbt_utils_unique_combination_of_columns_core__ez_messages_message_id.4bedcf869c": {"test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["message_id"], "model": "{{ get_where_subquery(ref('core__ez_messages')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.terra.core__ez_messages"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_fb08bd6a85037312d47b211888505902", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["terra", "core", "dbt_utils_unique_combination_of_columns_core__ez_messages_message_id"], "unique_id": "test.terra.dbt_utils_unique_combination_of_columns_core__ez_messages_message_id.4bedcf869c", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_fb08bd6a85037312d47b211888505902\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_utils_unique_combination_o_fb08bd6a85037312d47b211888505902.sql", "original_file_path": "models/core/core__ez_messages.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_messages_message_id", "alias": "ez_messages_message_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_messages"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/terra/models/core/core__ez_messages.yml/dbt_utils_unique_combination_o_fb08bd6a85037312d47b211888505902.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "alias": "dbt_utils_unique_combination_o_fb08bd6a85037312d47b211888505902"}, "created_at": 1672281845.9089403, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        message_id\n    from TERRA_DEV.core.ez_messages\n    group by message_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "TERRA_DEV.dbt_utils_unique_combination_of_columns_core.ez_messages_message_id", "column_name": null, "file_key_name": "models.core__ez_messages"}}, "sources": {"source.terra.chainwalkers.terra2_blocks": {"fqn": ["terra", "chainwalkers", "terra2_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.terra.chainwalkers.terra2_blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra2_blocks", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "terra2_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_inserted_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "Blocks from the Terra chain. Note always use the latest inserted timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The time this row was inserted into Snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.terra2_blocks", "created_at": 1672281845.914846}, "source.terra.chainwalkers.terra2_txs": {"fqn": ["terra", "chainwalkers", "terra2_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.terra.chainwalkers.terra2_txs", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra2_txs", "source_name": "chainwalkers", "source_description": "", "loader": "", "identifier": "terra2_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_inserted_timestamp", "freshness": {"warn_after": {"count": 12, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "Txs from the Terra chain. Note always use the latest inserted timestamp as duplicates can exist in this table!", "columns": {"record_id": {"name": "record_id", "description": "A unique id for the record generated by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_id": {"name": "tx_id", "description": "Synonmous with transaction hash, a unique on chain identifier for the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_block_index": {"name": "tx_block_index", "description": "The index of the transaction within the block. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "offset_id": {"name": "offset_id", "description": "Synonmous with block_id for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_id": {"name": "block_id", "description": "The height of the chain this block corresponds with", "meta": {}, "data_type": null, "quote": null, "tags": []}, "block_timestamp": {"name": "block_timestamp", "description": "The time the block was minted", "meta": {}, "data_type": null, "quote": null, "tags": []}, "network": {"name": "network", "description": "The blockchain network (i.e. mainnet, testnet, etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chain_id": {"name": "chain_id", "description": "Synonmous with blockchain name for Terra", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx_count": {"name": "tx_count", "description": "The number of transactions in the block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "header": {"name": "header", "description": "A json column containing the blocks header information", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tx": {"name": "tx", "description": "A json object containing the tx and any decoded logs", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingested_at": {"name": "ingested_at", "description": "The time this row was ingested by Chainwalkers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "The time this row was inserted into Snowflake", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.terra2_txs", "created_at": 1672281845.9150581}, "source.terra.anchor.bonds": {"fqn": ["terra", "anchor", "bonds"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.bonds", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "bonds", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "bonds", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.bonds", "created_at": 1672281845.9151945}, "source.terra.anchor.borrows": {"fqn": ["terra", "anchor", "borrows"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.borrows", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "borrows", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "borrows", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.borrows", "created_at": 1672281845.9153237}, "source.terra.anchor.burns": {"fqn": ["terra", "anchor", "burns"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.burns", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "burns", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "burns", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.burns", "created_at": 1672281845.9154472}, "source.terra.anchor.collateral": {"fqn": ["terra", "anchor", "collateral"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.collateral", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "collateral", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "collateral", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.collateral", "created_at": 1672281845.915571}, "source.terra.anchor.deposits": {"fqn": ["terra", "anchor", "deposits"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.deposits", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "deposits", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "deposits", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.deposits", "created_at": 1672281845.9156916}, "source.terra.anchor.gov_staking": {"fqn": ["terra", "anchor", "gov_staking"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_staking", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_staking", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_staking", "created_at": 1672281845.9158103}, "source.terra.anchor.gov_submit_proposal": {"fqn": ["terra", "anchor", "gov_submit_proposal"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_submit_proposal", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_submit_proposal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_submit_proposal", "created_at": 1672281845.9159274}, "source.terra.anchor.gov_vote": {"fqn": ["terra", "anchor", "gov_vote"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_vote", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "gov_vote", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.gov_vote", "created_at": 1672281845.9160466}, "source.terra.anchor.liquidations": {"fqn": ["terra", "anchor", "liquidations"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.liquidations", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "liquidations", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "liquidations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.liquidations", "created_at": 1672281845.9161658}, "source.terra.anchor.redeem": {"fqn": ["terra", "anchor", "redeem"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.redeem", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "redeem", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "redeem", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.redeem", "created_at": 1672281845.9162834}, "source.terra.anchor.repay": {"fqn": ["terra", "anchor", "repay"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.repay", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "repay", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "repay", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.repay", "created_at": 1672281845.9164007}, "source.terra.anchor.reward_claims": {"fqn": ["terra", "anchor", "reward_claims"], "database": "flipside_prod_db", "schema": "anchor", "unique_id": "source.terra.anchor.reward_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "reward_claims", "source_name": "anchor", "source_description": "", "loader": "", "identifier": "reward_claims", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.anchor.reward_claims", "created_at": 1672281845.9165187}, "source.terra.astroport.pool_reserves": {"fqn": ["terra", "astroport", "pool_reserves"], "database": "flipside_prod_db", "schema": "astroport", "unique_id": "source.terra.astroport.pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "pool_reserves", "source_name": "astroport", "source_description": "", "loader": "", "identifier": "pool_reserves", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.astroport.pool_reserves", "created_at": 1672281845.916639}, "source.terra.astroport.swaps": {"fqn": ["terra", "astroport", "swaps"], "database": "flipside_prod_db", "schema": "astroport", "unique_id": "source.terra.astroport.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "astroport", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.astroport.swaps", "created_at": 1672281845.9167573}, "source.terra.gold.terra_address_labels": {"fqn": ["terra", "gold", "terra_address_labels"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_address_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_address_labels", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_address_labels", "created_at": 1672281845.9168763}, "source.terra.gold.terra_address_tags": {"fqn": ["terra", "gold", "terra_address_tags"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_address_tags", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_address_tags", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_address_tags", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_address_tags", "created_at": 1672281845.9169927}, "source.terra.gold.terra_daily_balances": {"fqn": ["terra", "gold", "terra_daily_balances"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_daily_balances", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_daily_balances", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_daily_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_daily_balances", "created_at": 1672281845.9171078}, "source.terra.gold.terra_prices": {"fqn": ["terra", "gold", "terra_prices"], "database": "flipside_prod_db", "schema": "gold", "unique_id": "source.terra.gold.terra_prices", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "terra_prices", "source_name": "gold", "source_description": "", "loader": "", "identifier": "terra_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.gold.terra_prices", "created_at": 1672281845.9172218}, "source.terra.terra.airdrop_claims": {"fqn": ["terra", "terra", "airdrop_claims"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.airdrop_claims", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "airdrop_claims", "source_name": "terra", "source_description": "", "loader": "", "identifier": "airdrop_claims", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.airdrop_claims", "created_at": 1672281845.917337}, "source.terra.terra.daily_balances": {"fqn": ["terra", "terra", "daily_balances"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.daily_balances", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "daily_balances", "source_name": "terra", "source_description": "", "loader": "", "identifier": "daily_balances", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.daily_balances", "created_at": 1672281845.917453}, "source.terra.terra.gov_submit_proposal": {"fqn": ["terra", "terra", "gov_submit_proposal"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.gov_submit_proposal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_submit_proposal", "source_name": "terra", "source_description": "", "loader": "", "identifier": "gov_submit_proposal", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.gov_submit_proposal", "created_at": 1672281845.9175696}, "source.terra.terra.gov_vote": {"fqn": ["terra", "terra", "gov_vote"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.gov_vote", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "gov_vote", "source_name": "terra", "source_description": "", "loader": "", "identifier": "gov_vote", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.gov_vote", "created_at": 1672281845.9176877}, "source.terra.terra.nft_metadata": {"fqn": ["terra", "terra", "nft_metadata"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.nft_metadata", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "nft_metadata", "source_name": "terra", "source_description": "", "loader": "", "identifier": "nft_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.nft_metadata", "created_at": 1672281845.9178045}, "source.terra.terra.oracle_prices": {"fqn": ["terra", "terra", "oracle_prices"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.oracle_prices", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "oracle_prices", "source_name": "terra", "source_description": "", "loader": "", "identifier": "oracle_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.oracle_prices", "created_at": 1672281845.9179227}, "source.terra.terra.reward": {"fqn": ["terra", "terra", "reward"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.reward", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "reward", "source_name": "terra", "source_description": "", "loader": "", "identifier": "reward", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.reward", "created_at": 1672281845.9180396}, "source.terra.terra.staking": {"fqn": ["terra", "terra", "staking"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.staking", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "staking", "source_name": "terra", "source_description": "", "loader": "", "identifier": "staking", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.staking", "created_at": 1672281845.918157}, "source.terra.terra.swaps": {"fqn": ["terra", "terra", "swaps"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "terra", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.swaps", "created_at": 1672281845.9182732}, "source.terra.terra.tax_rate": {"fqn": ["terra", "terra", "tax_rate"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.tax_rate", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "tax_rate", "source_name": "terra", "source_description": "", "loader": "", "identifier": "tax_rate", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.tax_rate", "created_at": 1672281845.9183874}, "source.terra.terra.transfers": {"fqn": ["terra", "terra", "transfers"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.transfers", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transfers", "source_name": "terra", "source_description": "", "loader": "", "identifier": "transfers", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.transfers", "created_at": 1672281845.9185224}, "source.terra.terra.validator_labels": {"fqn": ["terra", "terra", "validator_labels"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.validator_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "validator_labels", "source_name": "terra", "source_description": "", "loader": "", "identifier": "validator_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.validator_labels", "created_at": 1672281845.9186425}, "source.terra.terra.validator_voting_power": {"fqn": ["terra", "terra", "validator_voting_power"], "database": "flipside_prod_db", "schema": "terra", "unique_id": "source.terra.terra.validator_voting_power", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "validator_voting_power", "source_name": "terra", "source_description": "", "loader": "", "identifier": "validator_voting_power", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra.validator_voting_power", "created_at": 1672281845.9187593}, "source.terra.terraswap.lp_actions": {"fqn": ["terra", "terraswap", "lp_actions"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.lp_actions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "lp_actions", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "lp_actions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.lp_actions", "created_at": 1672281845.918882}, "source.terra.terraswap.lp_stake": {"fqn": ["terra", "terraswap", "lp_stake"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.lp_stake", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "lp_stake", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "lp_stake", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.lp_stake", "created_at": 1672281845.918999}, "source.terra.terraswap.pool_reserves": {"fqn": ["terra", "terraswap", "pool_reserves"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.pool_reserves", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "pool_reserves", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "pool_reserves", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.pool_reserves", "created_at": 1672281845.919117}, "source.terra.terraswap.swaps": {"fqn": ["terra", "terraswap", "swaps"], "database": "flipside_prod_db", "schema": "terraswap", "unique_id": "source.terra.terraswap.swaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "swaps", "source_name": "terraswap", "source_description": "", "loader": "", "identifier": "swaps", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terraswap.swaps", "created_at": 1672281845.919328}, "source.terra.terra_sv.blocks": {"fqn": ["terra", "terra_sv", "blocks"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.blocks", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "blocks", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.blocks", "created_at": 1672281845.9194548}, "source.terra.terra_sv.labels": {"fqn": ["terra", "terra_sv", "labels"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "labels", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.labels", "created_at": 1672281845.9195755}, "source.terra.terra_sv.msgs": {"fqn": ["terra", "terra_sv", "msgs"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.msgs", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "msgs", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "msgs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.msgs", "created_at": 1672281845.9196963}, "source.terra.terra_sv.msg_events": {"fqn": ["terra", "terra_sv", "msg_events"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.msg_events", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "msg_events", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "msg_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.msg_events", "created_at": 1672281845.9198158}, "source.terra.terra_sv.transactions": {"fqn": ["terra", "terra_sv", "transactions"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.transactions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transactions", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.transactions", "created_at": 1672281845.9199336}, "source.terra.terra_sv.transitions": {"fqn": ["terra", "terra_sv", "transitions"], "database": "flipside_prod_db", "schema": "terra_sv", "unique_id": "source.terra.terra_sv.transitions", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transitions", "source_name": "terra_sv", "source_description": "", "loader": "", "identifier": "transitions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.terra_sv.transitions", "created_at": 1672281845.9200509}, "source.terra.labels.address_labels": {"fqn": ["terra", "labels", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.terra.labels.address_labels", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "labels", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1672281845.9201689}}, "macros": {"macro.terra.create_sps": {"unique_id": "macro.terra.create_sps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'TERRA' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.terra.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2752187, "supported_languages": null}, "macro.terra.change_decimal": {"unique_id": "macro.terra.change_decimal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/change_to_decimal.sql", "original_file_path": "macros/change_to_decimal.sql", "name": "change_decimal", "macro_sql": "{% macro change_decimal(column_name,decimal_place=6)-%}\n\n{{column_name}}/pow(10,{{decimal_place}}) :: INTEGER \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2760746, "supported_languages": null}, "macro.terra.sp_create_prod_clone": {"unique_id": "macro.terra.sp_create_prod_clone", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1)\n            var function_name = existing_functions.getColumnValue(2)\n            var argument_signature = existing_functions.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1)\n            var procedure_name = existing_procedures.getColumnValue(2)\n            var argument_signature = existing_procedures.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\n\n        while (existing_tasks.next()) {\n            var schema = existing_tasks.getColumnValue(5)\n            var task_name = existing_tasks.getColumnValue(2)\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.277885, "supported_languages": null}, "macro.terra.generate_schema_name": {"unique_id": "macro.terra.generate_schema_name", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2792614, "supported_languages": null}, "macro.terra.generate_alias_name": {"unique_id": "macro.terra.generate_alias_name", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2800138, "supported_languages": null}, "macro.terra.create_json_merge": {"unique_id": "macro.terra.create_json_merge", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/json_merge.sql", "original_file_path": "macros/json_merge.sql", "name": "create_json_merge", "macro_sql": "{% macro create_json_merge() -%}\nCREATE\nOR REPLACE FUNCTION {{ target.database }}.{{ target.schema }}.json_merge(\n  o1 OBJECT,\n  o2 OBJECT\n) returns object\nlanguage python\nruntime_version = 3.8\nhandler = 'json_merge'\nas $$\ndef json_merge(o1, o2):\n    o1.update(o2)\n    return o1\n$$;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2808194, "supported_languages": null}, "macro.terra.incremental_load_filter": {"unique_id": "macro.terra.incremental_load_filter", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_load_filter", "macro_sql": "{% macro incremental_load_filter(time_col) -%}\n  -- dbt makes it easy to query your target table by using the \"{{ this }}\" variable.\n\n{% if is_incremental() %}\n{{ time_col }} >= (\n  SELECT\n    MAX(\n      {{ time_col }}\n    )\n  FROM\n    {{ this }}\n)\n{%- else -%}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2820907, "supported_languages": null}, "macro.terra.incremental_last_x_days": {"unique_id": "macro.terra.incremental_last_x_days", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/incremental_utils.sql", "original_file_path": "macros/incremental_utils.sql", "name": "incremental_last_x_days", "macro_sql": "{% macro incremental_last_x_days(\n    time_col,\n    time_in_days\n  ) -%}\n\n{% if is_incremental() %}\n{{ time_col }} >= CURRENT_DATE() - INTERVAL '{{ time_in_days }} day'\n{% else %}\n  TRUE\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2826452, "supported_languages": null}, "macro.terra.run_sp_create_prod_clone": {"unique_id": "macro.terra.run_sp_create_prod_clone", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call terra._internal.create_prod_clone(\n        'terra',\n        'terra_dev',\n        'dbt_cloud'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.28355, "supported_languages": null}, "macro.terra.test_sequence_gaps": {"unique_id": "macro.terra.test_sequence_gaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        block_timestamp,\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    block_timestamp,\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2860987, "supported_languages": null}, "macro.terra.test_tx_gaps": {"unique_id": "macro.terra.test_tx_gaps", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "test_tx_gaps", "macro_sql": "{% test tx_gaps(\n    model,\n    column_name,\n    column_block,\n    column_tx_count\n) %}\nWITH block_base AS (\n    SELECT\n        {{ column_block }},\n        {{ column_tx_count }}\n    FROM\n        {{ ref('silver__blocks') }}\n),\nmodel_name AS (\n    SELECT\n        {{ column_block }},\n        COUNT(\n            DISTINCT {{ column_name }}\n        ) AS model_tx_count\n    FROM\n        {{ model }}\n    GROUP BY\n        {{ column_block }}\n)\nSELECT\n    block_base.{{ column_block }},\n    {{ column_tx_count }},\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.{{ column_block }} = model_name.{{ column_block }}\nWHERE\n    {{ column_tx_count }} <> model_tx_count {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2879918, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2902105, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2912369, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.2915454, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3166246, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.318462, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.31921, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.321078, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3230603, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3244715, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3257654, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.326614, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3271227, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3277664, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3282776, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3295543, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3300328, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.330451, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.331685, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3321626, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3334205, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.335509, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.33608, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3367214, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3398778, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3406107, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3412595, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3464994, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3472936, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3506792, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.358879, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3593442, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3650384, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3656116, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3658621, "supported_languages": null}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3671987, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3688672, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3700414, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.370987, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3714576, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3717432, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.372021, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3723762, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.373111, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.373743, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3745098, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.375351, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3760767, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.37948, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.379914, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3808446, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3813167, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3821862, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3828092, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.384323, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.384984, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3869853, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3884676, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3888636, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.389235, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3895137, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3899417, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3901432, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3905993, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3910332, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3922775, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3927703, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3931901, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3936677, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.396852, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3975315, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.398171, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3986049, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.3990672, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.399691, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4002082, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4009805, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4014575, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4018893, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4037156, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4041638, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4046836, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.405122, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.40579, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4070382, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4107428, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4110584, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4114823, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4117835, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4126732, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4133208, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4135985, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4141688, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4146745, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.41525, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4157307, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4163013, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4179916, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4185028, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4191525, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4197319, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4226341, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4240685, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.425139, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.426544, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4269164, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4273236, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4283264, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4345698, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4350126, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.435581, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4364908, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4371114, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.437917, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4383867, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4389653, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4394288, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4398506, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4403615, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.441077, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4416993, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4431238, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4437163, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4440877, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4445841, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4457788, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.446765, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.447866, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4494877, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4509482, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4516397, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.452373, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.453537, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.454296, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4555216, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.456173, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4598365, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4613035, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4620543, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4658844, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4688997, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4708269, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4714286, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.474272, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4748077, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4751885, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4755573, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4759266, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.477146, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4779315, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4787393, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4869304, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.495754, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.498034, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4986675, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.4998922, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5003853, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5007322, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.501095, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.501401, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5018117, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5021305, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5033684, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5038497, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5071018, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5111172, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5122454, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.512816, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.513971, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5143926, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5148945, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5155582, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5216208, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5277903, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.529285, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5297651, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5308793, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5319226, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5398626, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5439975, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5446281, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5465167, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5471919, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5487998, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.550752, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5542297, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5556786, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5573597, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5579615, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5597951, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5697372, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5728693, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.576106, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.57825, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.589983, "supported_languages": ["sql"]}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5923264, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.592939, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5934167, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5940802, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5945768, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5952475, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5957315, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5963962, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5968707, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5972605, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.5979671, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.599384, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6000674, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6071637, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6079054, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6083364, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6085722, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6089451, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6092663, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6099455, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6121547, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.612645, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6132948, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6143858, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.627436, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6349053, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6353843, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6359603, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.637753, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6381798, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6386719, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6421368, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6455202, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6470153, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6477945, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6489937, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6499588, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6550488, "supported_languages": ["sql"]}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6562963, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6567588, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.658657, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6597965, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.660738, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.661016, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.661901, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6623201, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6633146, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6636698, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6646369, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.664991, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6659808, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.66651, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6675985, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6680198, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.669384, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6698132, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6703813, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6713047, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.671584, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6725643, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6729379, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.67386, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6742773, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6751413, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6753504, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6764405, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6771183, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.677491, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6783767, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6787405, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6796768, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6801946, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6812544, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6816785, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6825838, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6828725, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6838443, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6841984, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6850853, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6853645, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6876547, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6880639, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.688481, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.688867, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.689283, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6896799, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6900904, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6905556, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6909735, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6913624, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6919162, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6922896, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6926916, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6930664, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6941526, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6945317, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6954153, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.695623, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6967998, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.6974297, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7006488, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7018383, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7030232, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7040484, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7042432, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7057245, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7063112, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7070673, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.707755, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.709596, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7122366, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7133243, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7141771, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.715449, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7161584, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7215407, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7221043, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7226436, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7231412, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7235696, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7240071, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7257483, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.727909, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7296824, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7311804, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7317684, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7326446, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.736054, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7374253, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7392747, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7405615, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.745925, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7536147, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.755583, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7577362, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7594674, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7617724, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.765583, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7706106, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.773297, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.777092, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.778227, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7788982, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7801497, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.780882, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7838762, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.78501, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.786135, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7866552, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7878914, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.789573, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7921472, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7943106, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7963374, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7974026, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.797888, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.7992382, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.801615, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8023255, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8037877, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8058562, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.807287, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8091118, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8102443, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8111277, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.812281, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8126423, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.813, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8144398, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.814996, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.815338, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8156729, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8171287, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8174856, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.818195, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8185656, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.818844, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.820253, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.820605, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.821077, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.821544, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.823426, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.823722, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8239205, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.824111, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8247542, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8250587, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8254263, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.825705, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8260472, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.827966, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.828598, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8289618, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8293192, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8296754, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8308005, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.831636, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8328936, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8338432, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8348467, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8355494, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8364706, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8371367, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8381405, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.83893, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8399515, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8407314, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8418188, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8426812, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8437822, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8447795, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8462896, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8470712, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.848021, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.848722, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.849745, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8505328, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8514843, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.852185, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.853106, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8537972, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8548486, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8556304, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8565722, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8572621, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.858235, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.858986, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8600664, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.861041, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8619943, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.862725, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.863691, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8643937, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8654053, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8661578, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8670933, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8677678, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.869528, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.870199, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8706577, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.871332, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.871764, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8724277, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.872854, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8735118, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8739283, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.874756, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.875184, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8758411, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8773348, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.877616, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8778808, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8792174, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8807154, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.881839, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8829482, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8840215, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.884807, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.896177, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8974771, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8982823, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.8995612, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9125133, "supported_languages": ["sql"]}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9142907, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9169748, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9179504, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9183824, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.919382, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9198818, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9212384, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9221537, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9226267, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9238462, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9246597, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.930768, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.934739, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9362524, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9370775, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9387276, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9399161, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9412868, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.942031, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9433372, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9437706, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9453635, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9470139, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9480696, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9485135, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9497266, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9510405, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.952106, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9525588, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9537237, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9545095, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9561653, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9578, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9594688, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9603238, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9621677, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9643888, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9656904, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9661267, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9675262, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9681091, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9695773, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.970581, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9728682, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9747202, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9764032, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9901536, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281840.9960089, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dateadd('day', '-1', dateadd('month', '3', date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0015943, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"unique_id": "macro.dbt_date.get_intervals_between", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0035827, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"unique_id": "macro.dbt_date.default__get_intervals_between", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0050497, "supported_languages": null}, "macro.dbt_date.date_spine": {"unique_id": "macro.dbt_date.date_spine", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0056388, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"unique_id": "macro.dbt_date.default__date_spine", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0065389, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"unique_id": "macro.dbt_date.get_powers_of_two", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0086312, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"unique_id": "macro.dbt_date.default__get_powers_of_two", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0096796, "supported_languages": null}, "macro.dbt_date.generate_series": {"unique_id": "macro.dbt_date.generate_series", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0101616, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"unique_id": "macro.dbt_date.default__generate_series", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0115085, "supported_languages": null}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.012369, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0133998, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.013768, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0141299, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0144043, "supported_languages": null}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0154376, "supported_languages": null}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0157902, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0161264, "supported_languages": null}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.017479, "supported_languages": null}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0180013, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0186925, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0192046, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0197225, "supported_languages": null}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0205562, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.021898, "supported_languages": null}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0228248, "supported_languages": null}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.023634, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0240824, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0254793, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0258722, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0262327, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0266166, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0269787, "supported_languages": null}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0280015, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0283728, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0287318, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0291772, "supported_languages": null}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0300002, "supported_languages": null}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.031289, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0317488, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0321136, "supported_languages": null}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0338812, "supported_languages": null}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0343995, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0349517, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0354545, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0359612, "supported_languages": null}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0368805, "supported_languages": null}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0376978, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0390315, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0395832, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.039944, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.040306, "supported_languages": null}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0410852, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"unique_id": "macro.dbt_date.round_timestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "name": "round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ date_trunc(\"day\", dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0419285, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0434537, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0439441, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0443103, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0446653, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0450437, "supported_languages": null}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0457966, "supported_languages": null}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.046704, "supported_languages": null}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0476062, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0489113, "supported_languages": null}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0502446, "supported_languages": null}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.050616, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0511222, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0516324, "supported_languages": null}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.052459, "supported_languages": null}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0538268, "supported_languages": null}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0541973, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.054962, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dateadd('day', -1, date_trunc('week', dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0555623, "supported_languages": null}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.056325, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.057476, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0586045, "supported_languages": null}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0597088, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0622952, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0630012, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.063679, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.065029, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0660057, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.068285, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0687816, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0691712, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0695806, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0701342, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0706325, "supported_languages": null}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0714114, "supported_languages": null}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0721426, "supported_languages": null}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0755935, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.07636, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0773838, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0781255, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0791855, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0800898, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0832973, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0846794, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0867279, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0885136, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0934224, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.0965455, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.099335, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1015458, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.104755, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1064048, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1076224, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.108684, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.11169, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.113534, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1165094, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1209724, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1235323, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.126503, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1294916, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1308088, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1320705, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1335194, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.134859, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1374362, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ type_timestamp() }}))\n        <\n        cast({{ dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.138929, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.141502, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1436863, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.144429, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.147797, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ type_int() }}),\n            cast({{interval}} as {{ type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1568825, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1591375, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.160578, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1682599, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1696362, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dateadd(period, -test_periods, date_trunc(period, dbt_date.now())) }}\n            as {{ type_timestamp() }})\n    and\n    metric_period < {{ date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1732786, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1757762, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1779675, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1799862, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1833804, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1853294, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.187032, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.189278, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1912198, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1933103, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "name": "test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1950185, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1972396, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.1992338, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2011642, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2030354, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2057545, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.206738, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2086642, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.210652, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2126546, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2141125, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2158425, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2183826, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.219329, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.221794, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2235212, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2249835, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2275314, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2294738, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2309217, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.233409, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.235657, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2384198, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2416792, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.242995, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2452586, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2465584, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.249432, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2513454, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2522984, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2535276, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2543654, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2565596, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2573056, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.258906, "supported_languages": null}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.26786, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.269296, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2706714, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2738264, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.276451, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.278284, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2792292, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.279504, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2807996, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.282299, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.284032, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2845438, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2853076, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2860725, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2865179, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2870238, "supported_languages": null}, "macro.dbt_expectations.group_by": {"unique_id": "macro.dbt_expectations.group_by", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2880027, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"unique_id": "macro.dbt_expectations.default__group_by", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2886543, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.289802, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2900167, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2902117, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2904203, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.290855, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2914956, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.291701, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.291891, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.293146, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2936807, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2942033, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2951806, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2954571, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2957215, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2959836, "supported_languages": null}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2967513, "supported_languages": null}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2977178, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2979262, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2981217, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2983377, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2985542, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/home/runner/work/terra_dbt/terra_dbt/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1672281841.2987497, "supported_languages": null}}, "docs": {"terra._inserted_timestamp": {"unique_id": "terra._inserted_timestamp", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/_inserted_timestamp.md", "original_file_path": "models/descriptions/_inserted_timestamp.md", "name": "_inserted_timestamp", "block_contents": "The timestamp for when the block was inserted into the data warehouse by the Chainwalker."}, "terra.attribute_value": {"unique_id": "terra.attribute_value", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/attribute_value.md", "original_file_path": "models/descriptions/attribute_value.md", "name": "attribute_value", "block_contents": "The value from the key-value pair from the message attribute"}, "terra.proposal_id": {"unique_id": "terra.proposal_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/proposal_id.md", "original_file_path": "models/descriptions/proposal_id.md", "name": "proposal_id", "block_contents": "Numeric ID that corresponds to the proposal."}, "terra.memo": {"unique_id": "terra.memo", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/memo.md", "original_file_path": "models/descriptions/memo.md", "name": "memo", "block_contents": "The memo, if any, attached to this transaction."}, "terra.message_type": {"unique_id": "terra.message_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_type.md", "original_file_path": "models/descriptions/message_type.md", "name": "message_type", "block_contents": "The type of the message"}, "terra.liquidity_pool_id": {"unique_id": "terra.liquidity_pool_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_pool_id.md", "original_file_path": "models/descriptions/liquidity_pool_id.md", "name": "liquidity_pool_id", "block_contents": "The pool ID of the liquidity pool acted upon."}, "terra.message_index": {"unique_id": "terra.message_index", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_index.md", "original_file_path": "models/descriptions/message_index.md", "name": "message_index", "block_contents": "The index of the messages"}, "terra.address": {"unique_id": "terra.address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "name": "address", "block_contents": "The chain address of the account, token, or contract."}, "terra.label_type": {"unique_id": "terra.label_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/label_type.md", "original_file_path": "models/descriptions/label_type.md", "name": "label_type", "block_contents": "A broad category that describes what a label is representing."}, "terra.tx_code": {"unique_id": "terra.tx_code", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_code.md", "original_file_path": "models/descriptions/tx_code.md", "name": "tx_code", "block_contents": "The code for the status of the transaction. Per the Terra docs \"If this is present, the transaction failed.\" Thus, a code of 0 is a successful transaction, while anything else failed."}, "terra.validators_hash": {"unique_id": "terra.validators_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/validators_hash.md", "original_file_path": "models/descriptions/validators_hash.md", "name": "validators_hash", "block_contents": "The validators hash taken from the block header."}, "terra.from_amount": {"unique_id": "terra.from_amount", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/from_amount.md", "original_file_path": "models/descriptions/from_amount.md", "name": "from_amount", "block_contents": "The amount that the user sent to be swapped for another currency."}, "terra.proposal_type": {"unique_id": "terra.proposal_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/proposal_type.md", "original_file_path": "models/descriptions/proposal_type.md", "name": "proposal_type", "block_contents": "The type of proposal that was submitted."}, "terra.last_results_hash": {"unique_id": "terra.last_results_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_results_hash.md", "original_file_path": "models/descriptions/last_results_hash.md", "name": "last_results_hash", "block_contents": "The last results hash taken from the block header."}, "terra.msg_group": {"unique_id": "terra.msg_group", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/msg_group.md", "original_file_path": "models/descriptions/msg_group.md", "name": "msg_group", "block_contents": "Value grouping different messages together to represent a single action or event."}, "terra.pool_ids": {"unique_id": "terra.pool_ids", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/pool_ids.md", "original_file_path": "models/descriptions/pool_ids.md", "name": "pool_ids", "block_contents": "Identifier for the pool within the module"}, "terra.purchaser": {"unique_id": "terra.purchaser", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/purchaser.md", "original_file_path": "models/descriptions/purchaser.md", "name": "purchaser", "block_contents": "The wallet address of the user purchasing the NFT"}, "terra.sender": {"unique_id": "terra.sender", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/sender.md", "original_file_path": "models/descriptions/sender.md", "name": "sender", "block_contents": "The address of the sender, or authorizer, of this transfer."}, "terra.attribute_index": {"unique_id": "terra.attribute_index", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/attribute_index.md", "original_file_path": "models/descriptions/attribute_index.md", "name": "attribute_index", "block_contents": "The position in which attributes occur within a message"}, "terra.mint_id": {"unique_id": "terra.mint_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/mint_id.md", "original_file_path": "models/descriptions/mint_id.md", "name": "mint_id", "block_contents": "The unique key of the table"}, "terra.action": {"unique_id": "terra.action", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/action.md", "original_file_path": "models/descriptions/action.md", "name": "action", "block_contents": "The name of the action performed"}, "terra.evidence": {"unique_id": "terra.evidence", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/evidence.md", "original_file_path": "models/descriptions/evidence.md", "name": "evidence", "block_contents": "The evidence gotten from the block header"}, "terra.receiver": {"unique_id": "terra.receiver", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/receiver.md", "original_file_path": "models/descriptions/receiver.md", "name": "receiver", "block_contents": "The address of the receiver of this transfer."}, "terra.blockchain": {"unique_id": "terra.blockchain", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "name": "blockchain", "block_contents": "The blockchain name, here is Terra"}, "terra.tx": {"unique_id": "terra.tx", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx.md", "original_file_path": "models/descriptions/tx.md", "name": "tx", "block_contents": "The JSON transaction object that includes auth info, messages, results, and more metadata for the transaction."}, "terra.token_id": {"unique_id": "terra.token_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/token_id.md", "original_file_path": "models/descriptions/token_id.md", "name": "token_id", "block_contents": "The ID of the NFT that was sold"}, "terra.unique_key": {"unique_id": "terra.unique_key", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/unique_key.md", "original_file_path": "models/descriptions/unique_key.md", "name": "unique_key", "block_contents": "The unique key of the table"}, "terra.trader": {"unique_id": "terra.trader", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/trader.md", "original_file_path": "models/descriptions/trader.md", "name": "trader", "block_contents": "The address of the user that initiated the swap"}, "terra.project_name": {"unique_id": "terra.project_name", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/project_name.md", "original_file_path": "models/descriptions/project_name.md", "name": "project_name", "block_contents": "The name of the project that controls the address associated with the label."}, "terra.codespace": {"unique_id": "terra.codespace", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/codespace.md", "original_file_path": "models/descriptions/codespace.md", "name": "codespace", "block_contents": "Error subspace name: used alongside `code`. See https://docs.terra.money/develop/terra-py/core/broadcast/#codespace"}, "terra.fee": {"unique_id": "terra.fee", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee.md", "original_file_path": "models/descriptions/fee.md", "name": "fee", "block_contents": "The transaction fee attached to the transaction, decimal adjusted."}, "terra.message_value": {"unique_id": "terra.message_value", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_value.md", "original_file_path": "models/descriptions/message_value.md", "name": "message_value", "block_contents": "The value of the messages based on the index."}, "terra.transfer_type": {"unique_id": "terra.transfer_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/transfer_type.md", "original_file_path": "models/descriptions/transfer_type.md", "name": "transfer_type", "block_contents": "Determines whether the transfer is coming from one blockchain to another or vice versa."}, "terra._ingested_at": {"unique_id": "terra._ingested_at", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/_ingested_at.md", "original_file_path": "models/descriptions/_ingested_at.md", "name": "_ingested_at", "block_contents": "The timestamp for when the block was ingested."}, "terra.last_block_id": {"unique_id": "terra.last_block_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_block_id.md", "original_file_path": "models/descriptions/last_block_id.md", "name": "last_block_id", "block_contents": "The last block id taken from the block header."}, "terra.block_height": {"unique_id": "terra.block_height", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_height.md", "original_file_path": "models/descriptions/block_height.md", "name": "block_height", "block_contents": "The block height is a sequential number of the most recent block in the blockchain."}, "terra.tx_succeeded": {"unique_id": "terra.tx_succeeded", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_succeeded.md", "original_file_path": "models/descriptions/tx_succeeded.md", "name": "tx_succeeded", "block_contents": "A boolean returning True if the transactions was successful (i.e. `tx_code` = 0) or a failure."}, "terra.deployment_tx_id": {"unique_id": "terra.deployment_tx_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/deployment_tx_id.md", "original_file_path": "models/descriptions/deployment_tx_id.md", "name": "deployment_tx_id", "block_contents": "The transaction id for the deployment of this token or contract."}, "terra.evidence_hash": {"unique_id": "terra.evidence_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/evidence_hash.md", "original_file_path": "models/descriptions/evidence_hash.md", "name": "evidence_hash", "block_contents": "The evidence hash gotten from the block header"}, "terra.last_commit_hash": {"unique_id": "terra.last_commit_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_commit_hash.md", "original_file_path": "models/descriptions/last_commit_hash.md", "name": "last_commit_hash", "block_contents": "The last commit hash gotten from the block header"}, "terra.currency": {"unique_id": "terra.currency", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/currency.md", "original_file_path": "models/descriptions/currency.md", "name": "currency", "block_contents": "The currency of the amount for this transfer."}, "terra.attribute_key": {"unique_id": "terra.attribute_key", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/attribute_key.md", "original_file_path": "models/descriptions/attribute_key.md", "name": "attribute_key", "block_contents": "The key from the key-value pair from the message attribute"}, "terra.liquidity_pool_address": {"unique_id": "terra.liquidity_pool_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_pool_address.md", "original_file_path": "models/descriptions/liquidity_pool_address.md", "name": "liquidity_pool_address", "block_contents": "The address of the liquidity pool contract."}, "terra.mint_price": {"unique_id": "terra.mint_price", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/mint_price.md", "original_file_path": "models/descriptions/mint_price.md", "name": "mint_price", "block_contents": "The price of the mint in tokens"}, "terra.to_decimal": {"unique_id": "terra.to_decimal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/to_decimal.md", "original_file_path": "models/descriptions/to_decimal.md", "name": "to_decimal", "block_contents": "Divide the swap_to_amount by POW(10, swap_to_decimal) to get the amount the user received."}, "terra.from_decimal": {"unique_id": "terra.from_decimal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/from_decimal.md", "original_file_path": "models/descriptions/from_decimal.md", "name": "from_decimal", "block_contents": "Divide the swap_from_amount by POW(10, swap_from_decimal) to get the amount the user swapped."}, "terra.msg": {"unique_id": "terra.msg", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/msg.md", "original_file_path": "models/descriptions/msg.md", "name": "msg", "block_contents": "The underlying json from the message or event(s) occuring within the transaction"}, "terra.from_currency": {"unique_id": "terra.from_currency", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/from_currency.md", "original_file_path": "models/descriptions/from_currency.md", "name": "from_currency", "block_contents": "The currency that the user sent to be swapped for another currency."}, "terra.decimal": {"unique_id": "terra.decimal", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/decimal.md", "original_file_path": "models/descriptions/decimal.md", "name": "decimal", "block_contents": "The number of decimals in the amount.\n\nTypically, the human-intendedid amount is calculated by `amount / POW(10, decimal)`."}, "terra.validator_address": {"unique_id": "terra.validator_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/validator_address.md", "original_file_path": "models/descriptions/validator_address.md", "name": "validator_address", "block_contents": "The address of the validator who validate the delegation"}, "terra.seller": {"unique_id": "terra.seller", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/seller.md", "original_file_path": "models/descriptions/seller.md", "name": "seller", "block_contents": "The wallet address of the user selling the NFT"}, "terra.creator": {"unique_id": "terra.creator", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/creator.md", "original_file_path": "models/descriptions/creator.md", "name": "creator", "block_contents": "Name of the label's creator"}, "terra.validator_address_array": {"unique_id": "terra.validator_address_array", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/validator_address_array.md", "original_file_path": "models/descriptions/validator_address_array.md", "name": "validator_address_array", "block_contents": "An array of all validators that voted on the block."}, "terra.to_currency": {"unique_id": "terra.to_currency", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/to_currency.md", "original_file_path": "models/descriptions/to_currency.md", "name": "to_currency", "block_contents": "The currency that the user sent to be swapped for another currency."}, "terra.gas_used": {"unique_id": "terra.gas_used", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/gas_used.md", "original_file_path": "models/descriptions/gas_used.md", "name": "gas_used", "block_contents": "The gas actually used by this transaction."}, "terra.tx_sender": {"unique_id": "terra.tx_sender", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_sender.md", "original_file_path": "models/descriptions/tx_sender.md", "name": "tx_sender", "block_contents": "The address of the sender, or authorizer, of this transaction."}, "terra.proposer_address": {"unique_id": "terra.proposer_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/proposer_address.md", "original_file_path": "models/descriptions/proposer_address.md", "name": "proposer_address", "block_contents": "The proposer address taken from the block header."}, "terra.consensus_hash": {"unique_id": "terra.consensus_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/consensus_hash.md", "original_file_path": "models/descriptions/consensus_hash.md", "name": "consensus_hash", "block_contents": "The consensus hash gotten from the block header"}, "terra.liquidity_action_id": {"unique_id": "terra.liquidity_action_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_action_id.md", "original_file_path": "models/descriptions/liquidity_action_id.md", "name": "liquidity_action_id", "block_contents": "The unique key of this liquidity pool action."}, "terra.tx_id": {"unique_id": "terra.tx_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "Transaction hash for the record."}, "terra.data_hash": {"unique_id": "terra.data_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/data_hash.md", "original_file_path": "models/descriptions/data_hash.md", "name": "data_hash", "block_contents": "The data hash gotten from the block header"}, "terra.fee_raw": {"unique_id": "terra.fee_raw", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee_raw.md", "original_file_path": "models/descriptions/fee_raw.md", "name": "fee_raw", "block_contents": "The transaction fee attached to the transaction, not decimal adjusted."}, "terra.next_validators_hash": {"unique_id": "terra.next_validators_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/next_validators_hash.md", "original_file_path": "models/descriptions/next_validators_hash.md", "name": "next_validators_hash", "block_contents": "The next validators hash taken from the block header."}, "terra.liquidity_pool_amount": {"unique_id": "terra.liquidity_pool_amount", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_pool_amount.md", "original_file_path": "models/descriptions/liquidity_pool_amount.md", "name": "liquidity_pool_amount", "block_contents": "The amount involved in this liquidity pool action."}, "terra.block_hash": {"unique_id": "terra.block_hash", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_hash.md", "original_file_path": "models/descriptions/block_hash.md", "name": "block_hash", "block_contents": "Unique identifier (hash) of this block."}, "terra.voter": {"unique_id": "terra.voter", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/voter.md", "original_file_path": "models/descriptions/voter.md", "name": "voter", "block_contents": "The address of the validator or delegator who casted this vote."}, "terra.label": {"unique_id": "terra.label", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/label.md", "original_file_path": "models/descriptions/label.md", "name": "label", "block_contents": "The name of the address."}, "terra.vote_option_text": {"unique_id": "terra.vote_option_text", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/vote_option_text.md", "original_file_path": "models/descriptions/vote_option_text.md", "name": "vote_option_text", "block_contents": "The human-readable vote option cast by the voter."}, "terra.liquidity_pool_action": {"unique_id": "terra.liquidity_pool_action", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_pool_action.md", "original_file_path": "models/descriptions/liquidity_pool_action.md", "name": "liquidity_pool_action", "block_contents": "The action performed toward the liquidity pool.\n\nCan be either of:\n\n- 'burn_lp_token' - a burning of `amount` number of `currency`\n- 'mint_lp_token' - a minting of `amount` number of `currency`\n- 'provide_liquidity' - a deposit of `amount` number of `currency` into the pool\n- 'withdraw_liquidity' - a withdraw of `amount` number of `currency` from the pool"}, "terra.block_id": {"unique_id": "terra.block_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "The height of the chain this block corresponds with."}, "terra.to_amount": {"unique_id": "terra.to_amount", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/to_amount.md", "original_file_path": "models/descriptions/to_amount.md", "name": "to_amount", "block_contents": "The amount that the user sent to be swapped for another currency."}, "terra.sales_amount": {"unique_id": "terra.sales_amount", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/sales_amount.md", "original_file_path": "models/descriptions/sales_amount.md", "name": "sales_amount", "block_contents": "The amount that was used in the transaction message."}, "terra.last_commit": {"unique_id": "terra.last_commit", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/last_commit.md", "original_file_path": "models/descriptions/last_commit.md", "name": "last_commit", "block_contents": "The last commit gotten from the block header"}, "terra.vote_option": {"unique_id": "terra.vote_option", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/vote_option.md", "original_file_path": "models/descriptions/vote_option.md", "name": "vote_option", "block_contents": "The numerical vote option cast by the voter."}, "terra.liquidity_provider_address": {"unique_id": "terra.liquidity_provider_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/liquidity_provider_address.md", "original_file_path": "models/descriptions/liquidity_provider_address.md", "name": "liquidity_provider_address", "block_contents": "The address of the account providing or withdrawing liquidity."}, "terra.chain_id": {"unique_id": "terra.chain_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/chain_id.md", "original_file_path": "models/descriptions/chain_id.md", "name": "chain_id", "block_contents": "The chain id gotten from the block header"}, "terra.authorizer_public_key": {"unique_id": "terra.authorizer_public_key", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/authorizer_public_key.md", "original_file_path": "models/descriptions/authorizer_public_key.md", "name": "authorizer_public_key", "block_contents": "The encoded public key of the wallet(s) authorizing this transaction. If a multi-sig, this array will contain information for all the signers. For more information, see the terra docs here https://docs.terra.money/develop/terra-js/keys/"}, "terra.symbol": {"unique_id": "terra.symbol", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/symbol.md", "original_file_path": "models/descriptions/symbol.md", "name": "symbol", "block_contents": "The shorthand symbol for the token, as used by common price feeds and exchanges."}, "terra.minter": {"unique_id": "terra.minter", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/minter.md", "original_file_path": "models/descriptions/minter.md", "name": "minter", "block_contents": "The wallet address of the user that minted the NFT"}, "terra.transfer_id": {"unique_id": "terra.transfer_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/transfer_id.md", "original_file_path": "models/descriptions/transfer_id.md", "name": "transfer_id", "block_contents": "The unique key for each transfer."}, "terra.message_id": {"unique_id": "terra.message_id", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/message_id.md", "original_file_path": "models/descriptions/message_id.md", "name": "message_id", "block_contents": "The primary key for the messages table. It is a concatenation of the transaction ID and the message index."}, "terra.validator_src_address": {"unique_id": "terra.validator_src_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/validator_src_address.md", "original_file_path": "models/descriptions/validator_src_address.md", "name": "validator_src_address", "block_contents": "validator to remove delegation FROM"}, "terra.block_timestamp": {"unique_id": "terra.block_timestamp", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "terra.amount": {"unique_id": "terra.amount", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/amount.md", "original_file_path": "models/descriptions/amount.md", "name": "amount", "block_contents": "The amount of currency for this action."}, "terra.delegator_address": {"unique_id": "terra.delegator_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/delegator_address.md", "original_file_path": "models/descriptions/delegator_address.md", "name": "delegator_address", "block_contents": "The address of the delegator for this staking event"}, "terra.marketplace": {"unique_id": "terra.marketplace", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/marketplace.md", "original_file_path": "models/descriptions/marketplace.md", "name": "marketplace", "block_contents": "The name of the marketplace/address the NFT was sold on"}, "terra.proposer": {"unique_id": "terra.proposer", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/proposer.md", "original_file_path": "models/descriptions/proposer.md", "name": "proposer", "block_contents": "The address of the validator that submitted the proposal."}, "terra.contract_address": {"unique_id": "terra.contract_address", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/contract_address.md", "original_file_path": "models/descriptions/contract_address.md", "name": "contract_address", "block_contents": "The contract address of the NFT project"}, "terra.tx_count": {"unique_id": "terra.tx_count", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/tx_count.md", "original_file_path": "models/descriptions/tx_count.md", "name": "tx_count", "block_contents": "The number of transaction on a block"}, "terra.fee_denom": {"unique_id": "terra.fee_denom", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/fee_denom.md", "original_file_path": "models/descriptions/fee_denom.md", "name": "fee_denom", "block_contents": "The token the transaction fee is paid in."}, "terra.auth_type": {"unique_id": "terra.auth_type", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/auth_type.md", "original_file_path": "models/descriptions/auth_type.md", "name": "auth_type", "block_contents": "What type of authorization was used, presently single or multi."}, "terra.gas_limit": {"unique_id": "terra.gas_limit", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/gas_limit.md", "original_file_path": "models/descriptions/gas_limit.md", "name": "gas_limit", "block_contents": "The max gas limit attached to this transaction."}, "terra.vote_weight": {"unique_id": "terra.vote_weight", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/vote_weight.md", "original_file_path": "models/descriptions/vote_weight.md", "name": "vote_weight", "block_contents": "The weight of the vote cast by the voter. For now, it's always a full vote: `1`."}, "terra.attributes": {"unique_id": "terra.attributes", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/attributes.md", "original_file_path": "models/descriptions/attributes.md", "name": "attributes", "block_contents": "The messages and message events attributes"}, "terra.label_subtype": {"unique_id": "terra.label_subtype", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "descriptions/label_subtype.md", "original_file_path": "models/descriptions/label_subtype.md", "name": "label_subtype", "block_contents": "Adds more detail to the label type."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.16/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.terra.not_null_silver__lp_actions_decimals.4c16c23f59": [{"test_metadata": {"name": "not_null", "kwargs": {"column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "not_null_silver", "fqn": ["terra", "silver", "not_null_silver__lp_actions_decimals"], "unique_id": "test.terra.not_null_silver__lp_actions_decimals.4c16c23f59", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "not_null_silver__lp_actions_decimals.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "not_null_silver__lp_actions_decimals", "alias": "lp_actions_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "enabled": false}, "created_at": 1672281844.6579473, "config_call_dict": {"enabled": false}, "column_name": "decimals", "file_key_name": "models.silver__lp_actions"}], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_decimals__number.9d92a723ee": [{"test_metadata": {"name": "expect_column_values_to_be_of_type", "kwargs": {"column_type": "number", "column_name": "decimals", "model": "{{ get_where_subquery(ref('silver__lp_actions')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_560def08e9dbd0c13b735491a9198386", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "TERRA_DEV", "schema": "dbt_expectations_expect_column_values_to_be_of_type_silver", "fqn": ["terra", "silver", "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_decimals__number"], "unique_id": "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_decimals__number.9d92a723ee", "raw_code": "{{ dbt_expectations.test_expect_column_values_to_be_of_type(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,alias=\"dbt_expectations_expect_column_560def08e9dbd0c13b735491a9198386\") }}", "language": "sql", "package_name": "terra", "root_path": "/home/runner/work/terra_dbt/terra_dbt", "path": "dbt_expectations_expect_column_560def08e9dbd0c13b735491a9198386.sql", "original_file_path": "models/silver/silver__lp_actions.yml", "name": "dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_decimals__number", "alias": "lp_actions_decimals", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__lp_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "warn", "enabled": false, "alias": "dbt_expectations_expect_column_560def08e9dbd0c13b735491a9198386"}, "created_at": 1672281844.6604977, "config_call_dict": {"enabled": false, "alias": "dbt_expectations_expect_column_560def08e9dbd0c13b735491a9198386"}, "column_name": "decimals", "file_key_name": "models.silver__lp_actions"}]}, "parent_map": {"model.terra.bronze__blocks": ["source.terra.chainwalkers.terra2_blocks"], "model.terra.bronze__transactions": ["source.terra.chainwalkers.terra2_txs"], "model.terra.classic__dim_validator_labels": ["source.terra.terra.validator_labels"], "model.terra.classic__ez_staking": ["source.terra.terra.staking"], "model.terra.classic__ez_airdrop_claims": ["source.terra.terra.airdrop_claims"], "model.terra.classic__fact_transitions": ["source.terra.terra_sv.transitions"], "model.terra.classic__dim_daily_balances": ["source.terra.terra.daily_balances"], "model.terra.classic__fact_transactions": ["source.terra.terra_sv.transactions"], "model.terra.classic__dim_terraswap_pool_reserves": ["source.terra.terraswap.pool_reserves"], "model.terra.classic__ez_anchor_bonds": ["source.terra.anchor.bonds"], "model.terra.classic__ez_anchor_liquidations": ["source.terra.anchor.liquidations"], "model.terra.classic__ez_anchor_repay": ["source.terra.anchor.repay"], "model.terra.classic__ez_anchor_redeem": ["source.terra.anchor.redeem"], "model.terra.classic__ez_anchor_burns": ["source.terra.anchor.burns"], "model.terra.classic__ez_anchor_gov_vote": ["source.terra.anchor.gov_vote"], "model.terra.classic__fact_blocks": ["source.terra.terra_sv.blocks"], "model.terra.classic__ez_astroport_swaps": ["source.terra.astroport.swaps"], "model.terra.classic__ez_terraswap_swaps": ["source.terra.terraswap.swaps"], "model.terra.classic__ez_anchor_reward_claims": ["source.terra.anchor.reward_claims"], "model.terra.classic__ez_anchor_collateral": ["source.terra.anchor.collateral"], "model.terra.classic__dim_labels": ["source.terra.terra_sv.labels"], "model.terra.classic__ez_terraswap_lp_stake": ["source.terra.terraswap.lp_stake"], "model.terra.classic__ez_gov_vote": ["source.terra.terra.gov_vote"], "model.terra.classic__ez_anchor_gov_staking": ["source.terra.anchor.gov_staking"], "model.terra.classic__dim_validator_voting_power": ["source.terra.terra.validator_voting_power"], "model.terra.classic__dim_oracle_prices": ["source.terra.terra.oracle_prices"], "model.terra.classic__fact_messages": ["source.terra.terra_sv.msgs"], "model.terra.classic__ez_transfers": ["source.terra.terra.transfers"], "model.terra.classic__fact_message_events": ["source.terra.terra_sv.msg_events"], "model.terra.classic__dim_tax_rate": ["source.terra.terra.tax_rate"], "model.terra.classic__ez_anchor_borrows": ["source.terra.anchor.borrows"], "model.terra.classic__ez_swaps": ["source.terra.terra.swaps"], "model.terra.classic__ez_anchor_gov_submit_proposal": ["source.terra.anchor.gov_submit_proposal"], "model.terra.classic__ez_anchor_deposits": ["source.terra.anchor.deposits"], "model.terra.classic__ez_gov_submit_proposal": ["source.terra.terra.gov_submit_proposal"], "model.terra.classic__ez_terraswap_lp_actions": ["source.terra.terraswap.lp_actions"], "model.terra.classic__ez_reward": ["source.terra.terra.reward"], "model.terra.classic__dim_astroport_pool_reserves": ["source.terra.astroport.pool_reserves"], "model.terra.classic__dim_nft_metadata": ["source.terra.terra.nft_metadata"], "model.terra.silver__dex_swaps": ["model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__transactions"], "model.terra.silver__msg_attributes": ["model.terra.silver__blocks", "model.terra.silver__transactions"], "model.terra.silver__nft_mints": ["model.terra.silver__messages"], "model.terra.silver__lp_actions": ["model.terra.core__dim_address_labels", "model.terra.silver__messages"], "model.terra.silver__token_labels": ["model.terra.silver__messages"], "model.terra.silver__msgs": ["model.terra.silver__blocks", "model.terra.silver__transactions"], "model.terra.silver__transactions": ["model.terra.bronze__transactions"], "model.terra.silver__blocks": ["model.terra.bronze__blocks"], "model.terra.silver__governance_submit_proposal": ["model.terra.silver__messages"], "model.terra.silver__messages": ["model.terra.silver__blocks", "model.terra.silver__transactions"], "model.terra.silver__transfers": ["model.terra.silver__messages"], "model.terra.silver__governance_votes": ["model.terra.silver__messages"], "model.terra.silver__nft_sales": ["model.terra.silver__messages"], "model.terra.silver__staking": ["model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages", "model.terra.silver__messages"], "model.terra.core__fact_nft_sales": ["model.terra.silver__nft_sales"], "model.terra.core__ez_swaps": ["model.terra.silver__dex_swaps"], "model.terra.core__fact_governance_votes": ["model.terra.silver__governance_votes"], "model.terra.core__fact_governance_submit_proposal": ["model.terra.silver__governance_submit_proposal"], "model.terra.core__ez_messages": ["model.terra.silver__messages"], "model.terra.core__dim_address_labels": ["model.terra.silver__token_labels", "source.terra.labels.address_labels"], "model.terra.core__fact_transactions": ["model.terra.silver__transactions"], "model.terra.core__fact_messages": ["model.terra.core__ez_messages"], "model.terra.core__ez_staking": ["model.terra.core__dim_address_labels", "model.terra.core__dim_address_labels", "model.terra.silver__staking"], "model.terra.core__fact_msg_attributes": ["model.terra.silver__msg_attributes"], "model.terra.core__fact_blocks": ["model.terra.silver__blocks"], "model.terra.core__fact_nft_mints": ["model.terra.silver__nft_mints"], "model.terra.core__fact_lp_actions": ["model.terra.silver__lp_actions"], "model.terra.core__fact_msgs": ["model.terra.silver__msgs"], "model.terra.core__ez_transfers": ["model.terra.silver__transfers"], "test.terra.tests__correct_token_pairs": ["model.terra.core__dim_address_labels", "model.terra.silver__lp_actions", "model.terra.silver__messages"], "operation.terra.terra-on-run-start-0": [], "operation.terra.terra-on-run-start-1": [], "test.terra.not_null_silver__dex_swaps_BLOCK_ID.e92ac9632a": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT.19eb703d2e": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a0efd929fd": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_BLOCKCHAIN.7ba54e120a": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR.4e386a4a96": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_CHAIN_ID.addadcfa37": ["model.terra.silver__dex_swaps"], "test.terra.accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.4023154d5a": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR.e56210ce59": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_TX_ID.3f10ba61c8": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR.65ef3b20e1": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_TX_SUCCEEDED.5843f6eabd": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean.a081e7b8fc": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_from_currency.81d3fa180e": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR.8af82724f1": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps_trader.b1cc26d600": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR.62a5bb606b": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE.2e9ae4edf8": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT.cc9884771c": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL.c6ba11a35c": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR.f56203e965": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT.9e5139044b": ["model.terra.silver__dex_swaps"], "test.terra.not_null_silver__dex_swaps__INSERTED_TIMESTAMP.7f20c40c61": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz.5de15e9c20": ["model.terra.silver__dex_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR.4c2c520a8b": ["model.terra.silver__dex_swaps"], "test.terra.dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID.a2a765f055": ["model.terra.silver__dex_swaps"], "test.terra.unique_silver__transfers_TRANSFER_ID.e27b94f7ee": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_TRANSFER_ID.2065553678": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR.230e8f6d7b": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_TX_ID.1be05d8ee2": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR.d71aaf3142": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_MESSAGE_INDEX.48341e0be1": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER.06c7310fc4": ["model.terra.silver__transfers"], "test.terra.not_null_silver__transfers_MESSAGE_TYPE.4400b64fe0": ["model.terra.silver__transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR.2fb596a3f8": ["model.terra.silver__transfers"], "test.terra.dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id.e430cac164": ["model.terra.silver__transfers"], "test.terra.not_null_silver__governance_submit_proposal_BLOCK_ID.80df3f0930": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.065c6b7366": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.59a0f38558": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f1054d98d9": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_BLOCKCHAIN.908b82f02b": ["model.terra.silver__governance_submit_proposal"], "test.terra.accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra.4289fde0f6": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.0931733295": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_CHAIN_ID.db4c666e00": ["model.terra.silver__governance_submit_proposal"], "test.terra.accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1.32faa38966": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.dbb25df7d2": ["model.terra.silver__governance_submit_proposal"], "test.terra.unique_silver__governance_submit_proposal_TX_ID.63afc1894a": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_TX_ID.8dc772d3ad": ["model.terra.silver__governance_submit_proposal"], "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829": ["model.terra.silver__governance_submit_proposal", "model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR.7af3aa957c": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_TX_SUCCEEDED.3728678fd9": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean.ff3553163b": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_PROPOSER.51a248ebc4": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR.29a95924a4": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_ID.b8f0c6f0fa": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER.c96f72f85c": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.dbda3680fd": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.9359900f72": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.cfc79bcad1": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz.df3fa3fdd2": ["model.terra.silver__governance_submit_proposal"], "test.terra.dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID.e7cadc9d82": ["model.terra.silver__governance_submit_proposal"], "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": ["model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": ["model.terra.silver__transactions"], "test.terra.not_null_silver__staking_ACTION.91a24f522a": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_BLOCKCHAIN.58801fa4bb": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_BLOCK_ID.1d5493faed": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_BLOCK_TIMESTAMP.c6ce91983d": ["model.terra.silver__staking"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1.8c14a74a71": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_CHAIN_ID.3ba9c15357": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_DELEGATOR_ADDRESS.36dee98f10": ["model.terra.silver__staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.bca8b49c5d": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_AMOUNT.7d0bf3ba53": ["model.terra.silver__staking"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float.57f1ccc017": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_TX_ID.79d5b2c618": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_TX_SUCCEEDED.94eab542e4": ["model.terra.silver__staking"], "test.terra.not_null_silver__staking_VALIDATOR_ADDRESS.3d65954499": ["model.terra.silver__staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.f29a9793eb": ["model.terra.silver__staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.a87768f890": ["model.terra.silver__staking"], "test.terra.dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID.11614d03a0": ["model.terra.silver__staking"], "test.terra.unique_silver__msg_attributes_MESSAGE_ID.232c3d33b4": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_MESSAGE_ID.1359329b17": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR.2614ecbecb": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_BLOCKCHAIN.9d8129186b": ["model.terra.silver__msg_attributes"], "test.terra.accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.a8eb99e878": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR.49c79f99ba": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": ["model.terra.silver__msg_attributes"], "test.terra.accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.57d377cf49": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR.10f84b6d48": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_TX_ID.34f30240c0": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR.a96512f8d5": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_TX_SUCCEEDED.cedeb82ac7": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN.9895376246": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR.86b8c41d0b": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER.696aed84ea": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR.17ab615e68": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_KEY.2f7c4d2b9b": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR.a7f75ef027": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_VALUE.99f5b0d6cf": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR.4d49a23e6c": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_INDEX.ebb4277390": ["model.terra.silver__msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER.fda54d56e0": ["model.terra.silver__msg_attributes"], "test.terra.dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id.43d4a9c13a": ["model.terra.silver__msg_attributes"], "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.98926ccf35": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.fc63f1144c": ["model.terra.silver__blocks"], "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": ["model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": ["model.terra.silver__blocks"], "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": ["model.terra.silver__blocks"], "test.terra.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT.487566274a": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ef89499fa3": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_BLOCKCHAIN.4b8224fea8": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR.d51c1aaa45": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_CHAIN_ID.4fea72c533": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR.c974fe9f51": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_TX_ID.44c0221884": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR.43dc724771": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_TX_SUCCEEDED.43b685cb51": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN.f77aed189b": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR.a3451ec2e6": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR.17d74a51e7": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR.988de005da": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER.75ca545958": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR.3478f088ec": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER.027ee791a3": ["model.terra.silver__nft_mints"], "test.terra.not_null_silver__nft_mints_MINT_ID.d8609e2853": ["model.terra.silver__nft_mints"], "test.terra.unique_silver__nft_mints_MINT_ID.46519323a6": ["model.terra.silver__nft_mints"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR.4033da91bc": ["model.terra.silver__nft_mints"], "test.terra.dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID.467eb8880e": ["model.terra.silver__nft_mints"], "test.terra.unique_silver__governance_votes_tx_id.c0612f2d27": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_tx_id.df8b3c05ef": ["model.terra.silver__governance_votes"], "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153": ["model.terra.silver__governance_votes", "model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar.c04b58bbb3": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_block_id.b246709bad": ["model.terra.silver__governance_votes"], "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19": ["model.terra.silver__blocks", "model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number.3e02ae1992": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_block_timestamp.bcff62180d": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz.2af65aa681": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_blockchain.917e05598d": ["model.terra.silver__governance_votes"], "test.terra.accepted_values_silver__governance_votes_blockchain__terra.1313faedfb": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar.dafe25a3ec": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_chain_id.0ba2f00811": ["model.terra.silver__governance_votes"], "test.terra.accepted_values_silver__governance_votes_chain_id__phoenix_1.2bb13b7f2f": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar.1cae213c3b": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_voter.b79dcecfed": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar.a5818854a1": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_proposal_id.9f2a182ae5": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number.c89486b041": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_vote_option.0608f8a31e": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1.48f56d4f06": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number.de16532ee1": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_vote_option_text.618c8b20cc": ["model.terra.silver__governance_votes"], "test.terra.accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.4ff3c1834e": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar.2f3898295e": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_vote_weight.58df7a828a": ["model.terra.silver__governance_votes"], "test.terra.accepted_values_silver__governance_votes_vote_weight__1.a543ecdc40": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number.1c2ecc79dd": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes_tx_succeeded.d7ac3d5eed": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean.cb89774290": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__governance_votes__inserted_timestamp.9f89102be5": ["model.terra.silver__governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz.68921ad682": ["model.terra.silver__governance_votes"], "test.terra.not_null_silver__token_labels_BLOCK_TIMESTAMP.4bab832ad2": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.062d3526af": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_BLOCKCHAIN.d9542e6db2": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR.4bed36173d": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_TX_ID.ffb78ba8fc": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR.c1ee925822": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_LABEL.81e47ba4d9": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR.4dcb4ce956": ["model.terra.silver__token_labels"], "test.terra.unique_silver__token_labels_ADDRESS.f5cc09210f": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_ADDRESS.95a925fdac": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR.c3efad0a50": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_SYMBOL.3baa013084": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR.35103f428b": ["model.terra.silver__token_labels"], "test.terra.not_null_silver__token_labels_DECIMALS.7abc70a23b": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER.6d36153379": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR.b31987ac15": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR.5b257c3121": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR.d91a590606": ["model.terra.silver__token_labels"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR.ee7aac0536": ["model.terra.silver__token_labels"], "test.terra.dbt_utils_unique_combination_of_columns_silver__token_labels_address.2e65ca4f07": ["model.terra.silver__token_labels"], "test.terra.unique_silver__nft_sales_unique_id.a34598105c": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_unique_id.e87cf641d1": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar.1ad4a2d7b2": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_block_id.6b8ae85cc7": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT.1e3b411b22": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_block_timestamp.1ea5fe220e": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz.fac3defc53": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_tx_id.52567b28a5": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR.03f27d4e32": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_tx_succeeded.8b4a8f3210": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN.4f3e9b4781": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_chain_id.e01ecf1619": ["model.terra.silver__nft_sales"], "test.terra.accepted_values_silver__nft_sales_chain_id__phoenix_1.4910d24029": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR.7e1d5f429a": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_blockchain.33e23b43cc": ["model.terra.silver__nft_sales"], "test.terra.accepted_values_silver__nft_sales_blockchain__terra.b3af3d6472": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR.1e92e15aa9": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_purchaser.86d6ee5596": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR.f66fa138e1": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_seller.5f87626aad": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR.381a66eb49": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_sales_amount.5bb89c4043": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT.f06d20a3b9": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_currency.d2d4883210": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR.4e3f2cbe41": ["model.terra.silver__nft_sales"], "test.terra.not_null_silver__nft_sales_decimals.eee63c2b4c": ["model.terra.silver__nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER.af1b95ab24": ["model.terra.silver__nft_sales"], "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_TX_ID.084bc612c0": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": ["model.terra.silver__messages"], "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": ["model.terra.silver__messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": ["model.terra.silver__messages"], "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": ["model.terra.silver__messages"], "test.terra.unique_silver__msgs_MESSAGE_ID.83bad7bef2": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_MESSAGE_ID.436e3803e5": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR.4816a5174b": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_BLOCK_ID.1de1a37994": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_BLOCKCHAIN.5236da2509": ["model.terra.silver__msgs"], "test.terra.accepted_values_silver__msgs_BLOCKCHAIN__terra.1e13cf0ea4": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR.d4724b33fb": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_CHAIN_ID.41ac59beba": ["model.terra.silver__msgs"], "test.terra.accepted_values_silver__msgs_CHAIN_ID__phoenix_1.7396fb9d57": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR.5060cbda07": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_TX_ID.59a107fa1e": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR.c27c3737ce": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR.8d68d19171": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_MSG_INDEX.227765e0bf": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER.447eb58545": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_MSG_TYPE.312b195565": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR.d6218c616b": ["model.terra.silver__msgs"], "test.terra.not_null_silver__msgs_MSG.140acfecdc": ["model.terra.silver__msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT.8296dbb7a2": ["model.terra.silver__msgs"], "test.terra.dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.571d9ca9db": ["model.terra.silver__msgs"], "test.terra.unique_silver__lp_actions_action_id.8feba30e90": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_action_id.1895f31cc6": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar.575f5a8bca": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_block_id.612586a7cb": ["model.terra.silver__lp_actions"], "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5": ["model.terra.silver__blocks", "model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number.145aae2b01": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_block_timestamp.8ad214d7f5": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz.dea7337aaa": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_tx_id.468a921096": ["model.terra.silver__lp_actions"], "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2": ["model.terra.silver__lp_actions", "model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar.63e96990ee": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_tx_succeeded.7ffb92c629": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean.a717827478": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_chain_id.92b09a5867": ["model.terra.silver__lp_actions"], "test.terra.accepted_values_silver__lp_actions_chain_id__phoenix_1.bcbc85a705": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar.96fbe9872a": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_blockchain.4f0a107928": ["model.terra.silver__lp_actions"], "test.terra.accepted_values_silver__lp_actions_blockchain__terra.2393767af9": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar.dbe4369548": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_liquidity_provider_address.aba666ba5e": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar.d688ace707": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_.c3e67fb7aa": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_action.7ac5d6f78e": ["model.terra.silver__lp_actions"], "test.terra.accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity.5373dcd0ce": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar.fcc850cc15": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_pool_address.f4c321d743": ["model.terra.silver__lp_actions"], "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c": ["model.terra.core__dim_address_labels", "model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar.fa13bb082b": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_.7257f1eb85": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_amount.13c03f504d": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number.cc87f632e7": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0.7049ba3596": ["model.terra.silver__lp_actions"], "test.terra.not_null_silver__lp_actions_currency.15f91bb63e": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar.d0950ecf3c": ["model.terra.silver__lp_actions"], "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0.b85cc40115": ["model.terra.silver__lp_actions"], "test.terra.not_null_core__fact_nft_sales_block_id.6a8cf5dbe3": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT.1a263806c8": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_block_timestamp.a99e8d84cb": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz.2e773f3079": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_tx_id.243389477f": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR.f9740358f1": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_tx_succeeded.484054b419": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN.7f6defb7dc": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_chain_id.69d78bc3e7": ["model.terra.core__fact_nft_sales"], "test.terra.accepted_values_core__fact_nft_sales_chain_id__phoenix_1.0bbf4b7452": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR.61262d1e70": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_blockchain.db801e045c": ["model.terra.core__fact_nft_sales"], "test.terra.accepted_values_core__fact_nft_sales_blockchain__terra.235c3c039d": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR.52fdffa0af": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_purchaser.5de6e437bc": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR.1c1702a48c": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_seller.8347483250": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR.c571f9ea6f": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_sales_amount.9529c74c94": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT.2a0728d1e6": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_currency.00d5e018d5": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR.2dbc63b456": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__fact_nft_sales_decimals.33af829054": ["model.terra.core__fact_nft_sales"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER.15a90b7fac": ["model.terra.core__fact_nft_sales"], "test.terra.not_null_core__ez_swaps_BLOCK_ID.36b7acff73": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT.fdad2674ca": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_BLOCK_TIMESTAMP.e04f859b55": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b056ffabe5": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_BLOCKCHAIN.9767d6d83f": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR.abb60c2c90": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_CHAIN_ID.2022725566": ["model.terra.core__ez_swaps"], "test.terra.accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.5ce8aab982": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR.397ba10998": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_TX_ID.c724624638": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR.87cd04ec40": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_TX_SUCCEEDED.596ab1bb50": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean.d369ca878f": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_from_currency.e4b5e2d3f1": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR.7fc1a010af": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_swaps_trader.efdb9beb1d": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR.057b6c70ef": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER.05a3aedf05": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER.ebff115896": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL.aede885d13": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR.be42e1a2b5": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER.ae7f271aa5": ["model.terra.core__ez_swaps"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR.b95d7aa2e0": ["model.terra.core__ez_swaps"], "test.terra.not_null_core__ez_staking_ACTION.7ab86e3bc7": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_BLOCKCHAIN.9a855d42ca": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_BLOCK_ID.c41de65c37": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_BLOCK_TIMESTAMP.59b42e31b0": ["model.terra.core__ez_staking"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1.29ce75adc1": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_CHAIN_ID.75d5778ca8": ["model.terra.core__ez_staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.0211f19e9b": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_AMOUNT.e321ce5675": ["model.terra.core__ez_staking"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float.33baf19c67": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_TX_ID.6c975bed79": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_TX_SUCCEEDED.74cd90275e": ["model.terra.core__ez_staking"], "test.terra.not_null_core__ez_staking_VALIDATOR_ADDRESS.90c2b45b9f": ["model.terra.core__ez_staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.863595b14c": ["model.terra.core__ez_staking"], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.b75809eea1": ["model.terra.core__ez_staking"], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS.c121643bd3": ["model.terra.core__ez_staking"], "test.terra.not_null_core__fact_msg_attributes_BLOCK_ID.9ee1a30a95": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT.898db0604f": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.ee2107b294": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.35f3053b5e": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_BLOCKCHAIN.ec569e1a26": ["model.terra.core__fact_msg_attributes"], "test.terra.accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.6008e18226": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR.602888cde2": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_CHAIN_ID.481e75e9b2": ["model.terra.core__fact_msg_attributes"], "test.terra.accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.6f0adb4d76": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR.c6c5417ca2": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_TX_ID.5c95babc15": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR.786c130be2": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_TX_SUCCEEDED.15419fee12": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN.731b66b324": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR.61c6a6e731": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_MSG_INDEX.4882260488": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER.e77c3d164b": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_MSG_TYPE.6026ff3069": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR.4cf158a3e8": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.492b40c428": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR.91e898b03b": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.7fe04a3e70": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR.8cdcbbc83d": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.da71bcfab5": ["model.terra.core__fact_msg_attributes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER.2727761878": ["model.terra.core__fact_msg_attributes"], "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": ["model.terra.core__fact_blocks"], "test.terra.not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.226eadfc31": ["model.terra.core__fact_blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.ba080e379c": ["model.terra.core__fact_blocks"], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": ["model.terra.core__fact_blocks"], "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": ["model.terra.core__fact_blocks"], "test.terra.dbt_utils_unique_combination_of_columns_core__dim_address_labels_address.e61c78962d": ["model.terra.core__dim_address_labels"], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_ID.f3e783f422": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.33c71ade4b": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.740321bf47": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e57a22d0ee": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.07419d4222": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra.98c10656b6": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.ffa1eb12d0": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_CHAIN_ID.cb0a20e36e": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1.56bd57d7da": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.6b1cc2b79d": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.unique_core__fact_governance_submit_proposal_TX_ID.de29712fdc": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_TX_ID.5bc20f3f52": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505": ["model.terra.core__fact_governance_submit_proposal", "model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR.035658877c": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.016ad7c9f4": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN.d69b8d5c48": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSER.54faa3af33": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR.54043dd4c0": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.781c5c6f88": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER.4ec37c1f52": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.eafb77597a": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.ff3c876aa5": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID.45703b82e7": ["model.terra.core__fact_governance_submit_proposal"], "test.terra.unique_core__ez_transfers_TRANSFER_ID.f5615fdce0": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_TRANSFER_ID.197d88c1d9": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR.1fe6f41471": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_TX_ID.2ae5b080df": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR.7424e1cbc6": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_BLOCK_ID.631d739518": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT.6ac41f348c": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.5fb2e0bffb": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN.5936726427": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_CHAIN_ID.37e48b015b": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR.1dd1ea263b": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_MESSAGE_INDEX.2d0b0c9a82": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER.74880becef": ["model.terra.core__ez_transfers"], "test.terra.not_null_core__ez_transfers_MESSAGE_TYPE.0b0168ec7d": ["model.terra.core__ez_transfers"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR.e399be1152": ["model.terra.core__ez_transfers"], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id.177289bef9": ["model.terra.core__ez_transfers"], "test.terra.unique_core__fact_governance_votes_tx_id.da6e4bd5dd": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_tx_id.c9344888d3": ["model.terra.core__fact_governance_votes"], "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f": ["model.terra.core__fact_governance_votes", "model.terra.silver__transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar.0396164d9f": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_block_id.dee1992be1": ["model.terra.core__fact_governance_votes"], "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c": ["model.terra.core__fact_governance_votes", "model.terra.silver__blocks"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number.6034a8c784": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_block_timestamp.57982df904": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz.a0cefae5de": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_blockchain.8306d3ad35": ["model.terra.core__fact_governance_votes"], "test.terra.accepted_values_core__fact_governance_votes_blockchain__terra.a9f25017a4": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar.dd011cc870": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_chain_id.8e3ab78635": ["model.terra.core__fact_governance_votes"], "test.terra.accepted_values_core__fact_governance_votes_chain_id__phoenix_1.dd069ab2d1": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar.03e5168e5d": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_voter.2e4df9868b": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar.69ad648249": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_proposal_id.82987085cc": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number.13451ee0ab": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_vote_option.3e9399ec24": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1.841e49d338": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number.43d95f7634": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_vote_option_text.7cf887d562": ["model.terra.core__fact_governance_votes"], "test.terra.accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.734e037304": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar.ef18544d02": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_vote_weight.67164d2552": ["model.terra.core__fact_governance_votes"], "test.terra.accepted_values_core__fact_governance_votes_vote_weight__1.d386476c1c": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number.e7ef700654": ["model.terra.core__fact_governance_votes"], "test.terra.not_null_core__fact_governance_votes_tx_succeeded.b2cec969cc": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean.862d61ea2b": ["model.terra.core__fact_governance_votes"], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID.e7a5bd2f6d": ["model.terra.core__fact_nft_mints"], "test.terra.not_null_core__fact_msgs_BLOCK_ID.eac6239202": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT.f961885cf3": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_BLOCK_TIMESTAMP.609eb9a47a": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93a7511777": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_BLOCKCHAIN.56e147388e": ["model.terra.core__fact_msgs"], "test.terra.accepted_values_core__fact_msgs_BLOCKCHAIN__terra.ffd02f21d7": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR.8f85219828": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_CHAIN_ID.d05caaf63c": ["model.terra.core__fact_msgs"], "test.terra.accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.3f0138ed74": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR.997aaaa0e7": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_TX_ID.45d575785f": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR.033128c72a": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_TX_SUCCEEDED.a70b9aa0bb": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN.5561bd7292": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR.862a32ad0a": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_MSG_INDEX.84cc0bac93": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER.0e155538ce": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_MSG_TYPE.85292bdc34": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR.4e20bbe5d1": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_msgs_MSG.e2d6c790b2": ["model.terra.core__fact_msgs"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT.8ef45b8159": ["model.terra.core__fact_msgs"], "test.terra.not_null_core__fact_transactions_TX_ID.f374dfcdc6": ["model.terra.core__fact_transactions"], "test.terra.unique_core__fact_transactions_TX_ID.389fc7cd9b": ["model.terra.core__fact_transactions"], "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2": ["model.terra.core__fact_transactions", "model.terra.silver__blocks"], "test.terra.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER.f44897c42e": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_AUTH_TYPE.582c2b54e0": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.3eddef3456": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_TX_SENDER.ca55265b0a": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_GAS_LIMIT.833d77a375": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_GAS_USED.2e66666fc1": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_TX_CODE.a63fee458d": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER.8dc684a848": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": ["model.terra.core__fact_transactions"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN.a620f4c212": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__fact_transactions_TX.73062d241f": ["model.terra.core__fact_transactions"], "test.terra.not_null_core__ez_messages_MESSAGE_ID.cbde651172": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR.c83b5ab109": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_BLOCK_ID.43c8918e31": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT.15a72efd12": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_BLOCK_TIMESTAMP.de22585332": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ecc4800d31": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_TX_ID.32dde41c32": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR.8c5c1d4f2d": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_tx_succeeded.75d090139f": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN.b3e7e4854d": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_CHAIN_ID.fe88aa0ae5": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR.bfd32fcd48": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_MESSAGE_INDEX.60b09aad22": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER.827381ca59": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_MESSAGE_TYPE.df06e247ee": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR.1abf8652ed": ["model.terra.core__ez_messages"], "test.terra.not_null_core__ez_messages_ATTRIBUTES.5c5a64eef7": ["model.terra.core__ez_messages"], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT.91281c2f94": ["model.terra.core__ez_messages"], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_messages_message_id.4bedcf869c": ["model.terra.core__ez_messages"], "source.terra.chainwalkers.terra2_blocks": [], "source.terra.chainwalkers.terra2_txs": [], "source.terra.anchor.bonds": [], "source.terra.anchor.borrows": [], "source.terra.anchor.burns": [], "source.terra.anchor.collateral": [], "source.terra.anchor.deposits": [], "source.terra.anchor.gov_staking": [], "source.terra.anchor.gov_submit_proposal": [], "source.terra.anchor.gov_vote": [], "source.terra.anchor.liquidations": [], "source.terra.anchor.redeem": [], "source.terra.anchor.repay": [], "source.terra.anchor.reward_claims": [], "source.terra.astroport.pool_reserves": [], "source.terra.astroport.swaps": [], "source.terra.gold.terra_address_labels": [], "source.terra.gold.terra_address_tags": [], "source.terra.gold.terra_daily_balances": [], "source.terra.gold.terra_prices": [], "source.terra.terra.airdrop_claims": [], "source.terra.terra.daily_balances": [], "source.terra.terra.gov_submit_proposal": [], "source.terra.terra.gov_vote": [], "source.terra.terra.nft_metadata": [], "source.terra.terra.oracle_prices": [], "source.terra.terra.reward": [], "source.terra.terra.staking": [], "source.terra.terra.swaps": [], "source.terra.terra.tax_rate": [], "source.terra.terra.transfers": [], "source.terra.terra.validator_labels": [], "source.terra.terra.validator_voting_power": [], "source.terra.terraswap.lp_actions": [], "source.terra.terraswap.lp_stake": [], "source.terra.terraswap.pool_reserves": [], "source.terra.terraswap.swaps": [], "source.terra.terra_sv.blocks": [], "source.terra.terra_sv.labels": [], "source.terra.terra_sv.msgs": [], "source.terra.terra_sv.msg_events": [], "source.terra.terra_sv.transactions": [], "source.terra.terra_sv.transitions": [], "source.terra.labels.address_labels": []}, "child_map": {"model.terra.bronze__blocks": ["model.terra.silver__blocks"], "model.terra.bronze__transactions": ["model.terra.silver__transactions"], "model.terra.classic__dim_validator_labels": [], "model.terra.classic__ez_staking": [], "model.terra.classic__ez_airdrop_claims": [], "model.terra.classic__fact_transitions": [], "model.terra.classic__dim_daily_balances": [], "model.terra.classic__fact_transactions": [], "model.terra.classic__dim_terraswap_pool_reserves": [], "model.terra.classic__ez_anchor_bonds": [], "model.terra.classic__ez_anchor_liquidations": [], "model.terra.classic__ez_anchor_repay": [], "model.terra.classic__ez_anchor_redeem": [], "model.terra.classic__ez_anchor_burns": [], "model.terra.classic__ez_anchor_gov_vote": [], "model.terra.classic__fact_blocks": [], "model.terra.classic__ez_astroport_swaps": [], "model.terra.classic__ez_terraswap_swaps": [], "model.terra.classic__ez_anchor_reward_claims": [], "model.terra.classic__ez_anchor_collateral": [], "model.terra.classic__dim_labels": [], "model.terra.classic__ez_terraswap_lp_stake": [], "model.terra.classic__ez_gov_vote": [], "model.terra.classic__ez_anchor_gov_staking": [], "model.terra.classic__dim_validator_voting_power": [], "model.terra.classic__dim_oracle_prices": [], "model.terra.classic__fact_messages": [], "model.terra.classic__ez_transfers": [], "model.terra.classic__fact_message_events": [], "model.terra.classic__dim_tax_rate": [], "model.terra.classic__ez_anchor_borrows": [], "model.terra.classic__ez_swaps": [], "model.terra.classic__ez_anchor_gov_submit_proposal": [], "model.terra.classic__ez_anchor_deposits": [], "model.terra.classic__ez_gov_submit_proposal": [], "model.terra.classic__ez_terraswap_lp_actions": [], "model.terra.classic__ez_reward": [], "model.terra.classic__dim_astroport_pool_reserves": [], "model.terra.classic__dim_nft_metadata": [], "model.terra.silver__dex_swaps": ["model.terra.core__ez_swaps", "test.terra.accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.4023154d5a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR.4e386a4a96", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT.19eb703d2e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a0efd929fd", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR.e56210ce59", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR.65ef3b20e1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean.a081e7b8fc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz.5de15e9c20", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE.2e9ae4edf8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR.8af82724f1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT.cc9884771c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR.4c2c520a8b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL.c6ba11a35c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR.f56203e965", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT.9e5139044b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR.62a5bb606b", "test.terra.dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID.a2a765f055", "test.terra.not_null_silver__dex_swaps_BLOCKCHAIN.7ba54e120a", "test.terra.not_null_silver__dex_swaps_BLOCK_ID.e92ac9632a", "test.terra.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604", "test.terra.not_null_silver__dex_swaps_CHAIN_ID.addadcfa37", "test.terra.not_null_silver__dex_swaps_TX_ID.3f10ba61c8", "test.terra.not_null_silver__dex_swaps_TX_SUCCEEDED.5843f6eabd", "test.terra.not_null_silver__dex_swaps__INSERTED_TIMESTAMP.7f20c40c61", "test.terra.not_null_silver__dex_swaps_from_currency.81d3fa180e", "test.terra.not_null_silver__dex_swaps_trader.b1cc26d600"], "model.terra.silver__msg_attributes": ["model.terra.core__fact_msg_attributes", "test.terra.accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.a8eb99e878", "test.terra.accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.57d377cf49", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER.fda54d56e0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR.a7f75ef027", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR.4d49a23e6c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR.49c79f99ba", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR.10f84b6d48", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR.2614ecbecb", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR.86b8c41d0b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER.696aed84ea", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR.17ab615e68", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR.a96512f8d5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN.9895376246", "test.terra.dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id.43d4a9c13a", "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_INDEX.ebb4277390", "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_KEY.2f7c4d2b9b", "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_VALUE.99f5b0d6cf", "test.terra.not_null_silver__msg_attributes_BLOCKCHAIN.9d8129186b", "test.terra.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "test.terra.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "test.terra.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4", "test.terra.not_null_silver__msg_attributes_MESSAGE_ID.1359329b17", "test.terra.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "test.terra.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "test.terra.not_null_silver__msg_attributes_TX_ID.34f30240c0", "test.terra.not_null_silver__msg_attributes_TX_SUCCEEDED.cedeb82ac7", "test.terra.unique_silver__msg_attributes_MESSAGE_ID.232c3d33b4"], "model.terra.silver__nft_mints": ["model.terra.core__fact_nft_mints", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR.d51c1aaa45", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT.487566274a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ef89499fa3", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR.c974fe9f51", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR.17d74a51e7", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR.3478f088ec", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER.027ee791a3", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR.a3451ec2e6", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR.4033da91bc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER.75ca545958", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR.988de005da", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR.43dc724771", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN.f77aed189b", "test.terra.dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID.467eb8880e", "test.terra.not_null_silver__nft_mints_BLOCKCHAIN.4b8224fea8", "test.terra.not_null_silver__nft_mints_BLOCK_ID.bb62c53211", "test.terra.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d", "test.terra.not_null_silver__nft_mints_CHAIN_ID.4fea72c533", "test.terra.not_null_silver__nft_mints_MINT_ID.d8609e2853", "test.terra.not_null_silver__nft_mints_TX_ID.44c0221884", "test.terra.not_null_silver__nft_mints_TX_SUCCEEDED.43b685cb51", "test.terra.unique_silver__nft_mints_MINT_ID.46519323a6"], "model.terra.silver__lp_actions": ["model.terra.core__fact_lp_actions", "test.terra.accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity.5373dcd0ce", "test.terra.accepted_values_silver__lp_actions_blockchain__terra.2393767af9", "test.terra.accepted_values_silver__lp_actions_chain_id__phoenix_1.bcbc85a705", "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0.7049ba3596", "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0.b85cc40115", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar.fcc850cc15", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar.575f5a8bca", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number.cc87f632e7", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number.145aae2b01", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz.dea7337aaa", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar.dbe4369548", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar.96fbe9872a", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar.d0950ecf3c", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar.d688ace707", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar.fa13bb082b", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar.63e96990ee", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean.a717827478", "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_.c3e67fb7aa", "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_.7257f1eb85", "test.terra.not_null_silver__lp_actions_action.7ac5d6f78e", "test.terra.not_null_silver__lp_actions_action_id.1895f31cc6", "test.terra.not_null_silver__lp_actions_amount.13c03f504d", "test.terra.not_null_silver__lp_actions_block_id.612586a7cb", "test.terra.not_null_silver__lp_actions_block_timestamp.8ad214d7f5", "test.terra.not_null_silver__lp_actions_blockchain.4f0a107928", "test.terra.not_null_silver__lp_actions_chain_id.92b09a5867", "test.terra.not_null_silver__lp_actions_currency.15f91bb63e", "test.terra.not_null_silver__lp_actions_liquidity_provider_address.aba666ba5e", "test.terra.not_null_silver__lp_actions_pool_address.f4c321d743", "test.terra.not_null_silver__lp_actions_tx_id.468a921096", "test.terra.not_null_silver__lp_actions_tx_succeeded.7ffb92c629", "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5", "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c", "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2", "test.terra.tests__correct_token_pairs", "test.terra.unique_silver__lp_actions_action_id.8feba30e90"], "model.terra.silver__token_labels": ["model.terra.core__dim_address_labels", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR.c3efad0a50", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR.4bed36173d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.062d3526af", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR.b31987ac15", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER.6d36153379", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR.d91a590606", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR.5b257c3121", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR.4dcb4ce956", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR.ee7aac0536", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR.35103f428b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR.c1ee925822", "test.terra.dbt_utils_unique_combination_of_columns_silver__token_labels_address.2e65ca4f07", "test.terra.not_null_silver__token_labels_ADDRESS.95a925fdac", "test.terra.not_null_silver__token_labels_BLOCKCHAIN.d9542e6db2", "test.terra.not_null_silver__token_labels_BLOCK_TIMESTAMP.4bab832ad2", "test.terra.not_null_silver__token_labels_DECIMALS.7abc70a23b", "test.terra.not_null_silver__token_labels_LABEL.81e47ba4d9", "test.terra.not_null_silver__token_labels_SYMBOL.3baa013084", "test.terra.not_null_silver__token_labels_TX_ID.ffb78ba8fc", "test.terra.unique_silver__token_labels_ADDRESS.f5cc09210f"], "model.terra.silver__msgs": ["model.terra.core__fact_msgs", "test.terra.accepted_values_silver__msgs_BLOCKCHAIN__terra.1e13cf0ea4", "test.terra.accepted_values_silver__msgs_CHAIN_ID__phoenix_1.7396fb9d57", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR.d4724b33fb", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR.5060cbda07", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR.4816a5174b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR.8d68d19171", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER.447eb58545", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR.d6218c616b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT.8296dbb7a2", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR.c27c3737ce", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172", "test.terra.dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.571d9ca9db", "test.terra.not_null_silver__msgs_BLOCKCHAIN.5236da2509", "test.terra.not_null_silver__msgs_BLOCK_ID.1de1a37994", "test.terra.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "test.terra.not_null_silver__msgs_CHAIN_ID.41ac59beba", "test.terra.not_null_silver__msgs_MESSAGE_ID.436e3803e5", "test.terra.not_null_silver__msgs_MSG.140acfecdc", "test.terra.not_null_silver__msgs_MSG_INDEX.227765e0bf", "test.terra.not_null_silver__msgs_MSG_TYPE.312b195565", "test.terra.not_null_silver__msgs_TX_ID.59a107fa1e", "test.terra.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2", "test.terra.unique_silver__msgs_MESSAGE_ID.83bad7bef2"], "model.terra.silver__transactions": ["model.terra.core__fact_transactions", "model.terra.silver__dex_swaps", "model.terra.silver__messages", "model.terra.silver__msg_attributes", "model.terra.silver__msgs", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57", "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7", "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505", "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f", "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829", "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153", "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2"], "model.terra.silver__blocks": ["model.terra.core__fact_blocks", "model.terra.silver__messages", "model.terra.silver__msg_attributes", "model.terra.silver__msgs", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.fc63f1144c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2", "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65", "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1", "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2", "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101", "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa", "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470", "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4", "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726", "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b", "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9", "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6", "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678", "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312", "test.terra.not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.98926ccf35", "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca", "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c", "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19", "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5", "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2"], "model.terra.silver__governance_submit_proposal": ["model.terra.core__fact_governance_submit_proposal", "test.terra.accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra.4289fde0f6", "test.terra.accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1.32faa38966", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.0931733295", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.065c6b7366", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f1054d98d9", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.dbb25df7d2", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER.c96f72f85c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.9359900f72", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR.29a95924a4", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR.7af3aa957c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean.ff3553163b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz.df3fa3fdd2", "test.terra.dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID.e7cadc9d82", "test.terra.not_null_silver__governance_submit_proposal_BLOCKCHAIN.908b82f02b", "test.terra.not_null_silver__governance_submit_proposal_BLOCK_ID.80df3f0930", "test.terra.not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.59a0f38558", "test.terra.not_null_silver__governance_submit_proposal_CHAIN_ID.db4c666e00", "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_ID.b8f0c6f0fa", "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.dbda3680fd", "test.terra.not_null_silver__governance_submit_proposal_PROPOSER.51a248ebc4", "test.terra.not_null_silver__governance_submit_proposal_TX_ID.8dc772d3ad", "test.terra.not_null_silver__governance_submit_proposal_TX_SUCCEEDED.3728678fd9", "test.terra.not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.cfc79bcad1", "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829", "test.terra.unique_silver__governance_submit_proposal_TX_ID.63afc1894a"], "model.terra.silver__messages": ["model.terra.core__ez_messages", "model.terra.silver__dex_swaps", "model.terra.silver__dex_swaps", "model.terra.silver__governance_submit_proposal", "model.terra.silver__governance_votes", "model.terra.silver__lp_actions", "model.terra.silver__nft_mints", "model.terra.silver__nft_sales", "model.terra.silver__staking", "model.terra.silver__staking", "model.terra.silver__staking", "model.terra.silver__staking", "model.terra.silver__staking", "model.terra.silver__token_labels", "model.terra.silver__transfers", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9", "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d", "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4", "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76", "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06", "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed", "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520", "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755", "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd", "test.terra.not_null_silver__messages_TX_ID.084bc612c0", "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d", "test.terra.tests__correct_token_pairs", "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d"], "model.terra.silver__transfers": ["model.terra.core__ez_transfers", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR.d71aaf3142", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER.06c7310fc4", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR.2fb596a3f8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR.230e8f6d7b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a", "test.terra.dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id.e430cac164", "test.terra.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.terra.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.terra.not_null_silver__transfers_CHAIN_ID.f332cbbf7c", "test.terra.not_null_silver__transfers_MESSAGE_INDEX.48341e0be1", "test.terra.not_null_silver__transfers_MESSAGE_TYPE.4400b64fe0", "test.terra.not_null_silver__transfers_TRANSFER_ID.2065553678", "test.terra.not_null_silver__transfers_TX_ID.1be05d8ee2", "test.terra.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "test.terra.unique_silver__transfers_TRANSFER_ID.e27b94f7ee"], "model.terra.silver__governance_votes": ["model.terra.core__fact_governance_votes", "test.terra.accepted_values_silver__governance_votes_blockchain__terra.1313faedfb", "test.terra.accepted_values_silver__governance_votes_chain_id__phoenix_1.2bb13b7f2f", "test.terra.accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.4ff3c1834e", "test.terra.accepted_values_silver__governance_votes_vote_weight__1.a543ecdc40", "test.terra.dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1.48f56d4f06", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz.68921ad682", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number.3e02ae1992", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz.2af65aa681", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar.dafe25a3ec", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar.1cae213c3b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number.c89486b041", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar.c04b58bbb3", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean.cb89774290", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number.de16532ee1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar.2f3898295e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number.1c2ecc79dd", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar.a5818854a1", "test.terra.not_null_silver__governance_votes__inserted_timestamp.9f89102be5", "test.terra.not_null_silver__governance_votes_block_id.b246709bad", "test.terra.not_null_silver__governance_votes_block_timestamp.bcff62180d", "test.terra.not_null_silver__governance_votes_blockchain.917e05598d", "test.terra.not_null_silver__governance_votes_chain_id.0ba2f00811", "test.terra.not_null_silver__governance_votes_proposal_id.9f2a182ae5", "test.terra.not_null_silver__governance_votes_tx_id.df8b3c05ef", "test.terra.not_null_silver__governance_votes_tx_succeeded.d7ac3d5eed", "test.terra.not_null_silver__governance_votes_vote_option.0608f8a31e", "test.terra.not_null_silver__governance_votes_vote_option_text.618c8b20cc", "test.terra.not_null_silver__governance_votes_vote_weight.58df7a828a", "test.terra.not_null_silver__governance_votes_voter.b79dcecfed", "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19", "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153", "test.terra.unique_silver__governance_votes_tx_id.c0612f2d27"], "model.terra.silver__nft_sales": ["model.terra.core__fact_nft_sales", "test.terra.accepted_values_silver__nft_sales_blockchain__terra.b3af3d6472", "test.terra.accepted_values_silver__nft_sales_chain_id__phoenix_1.4910d24029", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT.1e3b411b22", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR.1e92e15aa9", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR.7e1d5f429a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR.4e3f2cbe41", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER.af1b95ab24", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR.f66fa138e1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT.f06d20a3b9", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR.381a66eb49", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR.03f27d4e32", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN.4f3e9b4781", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz.fac3defc53", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar.1ad4a2d7b2", "test.terra.not_null_silver__nft_sales_block_id.6b8ae85cc7", "test.terra.not_null_silver__nft_sales_block_timestamp.1ea5fe220e", "test.terra.not_null_silver__nft_sales_blockchain.33e23b43cc", "test.terra.not_null_silver__nft_sales_chain_id.e01ecf1619", "test.terra.not_null_silver__nft_sales_currency.d2d4883210", "test.terra.not_null_silver__nft_sales_decimals.eee63c2b4c", "test.terra.not_null_silver__nft_sales_purchaser.86d6ee5596", "test.terra.not_null_silver__nft_sales_sales_amount.5bb89c4043", "test.terra.not_null_silver__nft_sales_seller.5f87626aad", "test.terra.not_null_silver__nft_sales_tx_id.52567b28a5", "test.terra.not_null_silver__nft_sales_tx_succeeded.8b4a8f3210", "test.terra.not_null_silver__nft_sales_unique_id.e87cf641d1", "test.terra.unique_silver__nft_sales_unique_id.a34598105c"], "model.terra.silver__staking": ["model.terra.core__ez_staking", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float.57f1ccc017", "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.bca8b49c5d", "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.f29a9793eb", "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.a87768f890", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1.8c14a74a71", "test.terra.dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID.11614d03a0", "test.terra.not_null_silver__staking_ACTION.91a24f522a", "test.terra.not_null_silver__staking_AMOUNT.7d0bf3ba53", "test.terra.not_null_silver__staking_BLOCKCHAIN.58801fa4bb", "test.terra.not_null_silver__staking_BLOCK_ID.1d5493faed", "test.terra.not_null_silver__staking_BLOCK_TIMESTAMP.c6ce91983d", "test.terra.not_null_silver__staking_CHAIN_ID.3ba9c15357", "test.terra.not_null_silver__staking_DELEGATOR_ADDRESS.36dee98f10", "test.terra.not_null_silver__staking_TX_ID.79d5b2c618", "test.terra.not_null_silver__staking_TX_SUCCEEDED.94eab542e4", "test.terra.not_null_silver__staking_VALIDATOR_ADDRESS.3d65954499"], "model.terra.core__fact_nft_sales": ["test.terra.accepted_values_core__fact_nft_sales_blockchain__terra.235c3c039d", "test.terra.accepted_values_core__fact_nft_sales_chain_id__phoenix_1.0bbf4b7452", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT.1a263806c8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR.52fdffa0af", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR.61262d1e70", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR.2dbc63b456", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER.15a90b7fac", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR.1c1702a48c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT.2a0728d1e6", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR.c571f9ea6f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR.f9740358f1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN.7f6defb7dc", "test.terra.dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz.2e773f3079", "test.terra.not_null_core__fact_nft_sales_block_id.6a8cf5dbe3", "test.terra.not_null_core__fact_nft_sales_block_timestamp.a99e8d84cb", "test.terra.not_null_core__fact_nft_sales_blockchain.db801e045c", "test.terra.not_null_core__fact_nft_sales_chain_id.69d78bc3e7", "test.terra.not_null_core__fact_nft_sales_currency.00d5e018d5", "test.terra.not_null_core__fact_nft_sales_decimals.33af829054", "test.terra.not_null_core__fact_nft_sales_purchaser.5de6e437bc", "test.terra.not_null_core__fact_nft_sales_sales_amount.9529c74c94", "test.terra.not_null_core__fact_nft_sales_seller.8347483250", "test.terra.not_null_core__fact_nft_sales_tx_id.243389477f", "test.terra.not_null_core__fact_nft_sales_tx_succeeded.484054b419"], "model.terra.core__ez_swaps": ["test.terra.accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.5ce8aab982", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR.abb60c2c90", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT.fdad2674ca", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b056ffabe5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR.397ba10998", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR.87cd04ec40", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean.d369ca878f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER.05a3aedf05", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR.7fc1a010af", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER.ebff115896", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR.b95d7aa2e0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL.aede885d13", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR.be42e1a2b5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER.ae7f271aa5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR.057b6c70ef", "test.terra.not_null_core__ez_swaps_BLOCKCHAIN.9767d6d83f", "test.terra.not_null_core__ez_swaps_BLOCK_ID.36b7acff73", "test.terra.not_null_core__ez_swaps_BLOCK_TIMESTAMP.e04f859b55", "test.terra.not_null_core__ez_swaps_CHAIN_ID.2022725566", "test.terra.not_null_core__ez_swaps_TX_ID.c724624638", "test.terra.not_null_core__ez_swaps_TX_SUCCEEDED.596ab1bb50", "test.terra.not_null_core__ez_swaps_from_currency.e4b5e2d3f1", "test.terra.not_null_core__ez_swaps_trader.efdb9beb1d"], "model.terra.core__fact_governance_votes": ["test.terra.accepted_values_core__fact_governance_votes_blockchain__terra.a9f25017a4", "test.terra.accepted_values_core__fact_governance_votes_chain_id__phoenix_1.dd069ab2d1", "test.terra.accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.734e037304", "test.terra.accepted_values_core__fact_governance_votes_vote_weight__1.d386476c1c", "test.terra.dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1.841e49d338", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number.6034a8c784", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz.a0cefae5de", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar.dd011cc870", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar.03e5168e5d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number.13451ee0ab", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar.0396164d9f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean.862d61ea2b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number.43d95f7634", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar.ef18544d02", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number.e7ef700654", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar.69ad648249", "test.terra.not_null_core__fact_governance_votes_block_id.dee1992be1", "test.terra.not_null_core__fact_governance_votes_block_timestamp.57982df904", "test.terra.not_null_core__fact_governance_votes_blockchain.8306d3ad35", "test.terra.not_null_core__fact_governance_votes_chain_id.8e3ab78635", "test.terra.not_null_core__fact_governance_votes_proposal_id.82987085cc", "test.terra.not_null_core__fact_governance_votes_tx_id.c9344888d3", "test.terra.not_null_core__fact_governance_votes_tx_succeeded.b2cec969cc", "test.terra.not_null_core__fact_governance_votes_vote_option.3e9399ec24", "test.terra.not_null_core__fact_governance_votes_vote_option_text.7cf887d562", "test.terra.not_null_core__fact_governance_votes_vote_weight.67164d2552", "test.terra.not_null_core__fact_governance_votes_voter.2e4df9868b", "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c", "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f", "test.terra.unique_core__fact_governance_votes_tx_id.da6e4bd5dd"], "model.terra.core__fact_governance_submit_proposal": ["test.terra.accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra.98c10656b6", "test.terra.accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1.56bd57d7da", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.ffa1eb12d0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.33c71ade4b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e57a22d0ee", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.6b1cc2b79d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER.4ec37c1f52", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.ff3c876aa5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR.54043dd4c0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR.035658877c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN.d69b8d5c48", "test.terra.dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID.45703b82e7", "test.terra.not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.07419d4222", "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_ID.f3e783f422", "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.740321bf47", "test.terra.not_null_core__fact_governance_submit_proposal_CHAIN_ID.cb0a20e36e", "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.781c5c6f88", "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.eafb77597a", "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSER.54faa3af33", "test.terra.not_null_core__fact_governance_submit_proposal_TX_ID.5bc20f3f52", "test.terra.not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.016ad7c9f4", "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505", "test.terra.unique_core__fact_governance_submit_proposal_TX_ID.de29712fdc"], "model.terra.core__ez_messages": ["model.terra.core__fact_messages", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT.91281c2f94", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT.15a72efd12", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ecc4800d31", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR.bfd32fcd48", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR.c83b5ab109", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER.827381ca59", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR.1abf8652ed", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR.8c5c1d4f2d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN.b3e7e4854d", "test.terra.dbt_utils_unique_combination_of_columns_core__ez_messages_message_id.4bedcf869c", "test.terra.not_null_core__ez_messages_ATTRIBUTES.5c5a64eef7", "test.terra.not_null_core__ez_messages_BLOCK_ID.43c8918e31", "test.terra.not_null_core__ez_messages_BLOCK_TIMESTAMP.de22585332", "test.terra.not_null_core__ez_messages_CHAIN_ID.fe88aa0ae5", "test.terra.not_null_core__ez_messages_MESSAGE_ID.cbde651172", "test.terra.not_null_core__ez_messages_MESSAGE_INDEX.60b09aad22", "test.terra.not_null_core__ez_messages_MESSAGE_TYPE.df06e247ee", "test.terra.not_null_core__ez_messages_TX_ID.32dde41c32", "test.terra.not_null_core__ez_messages_tx_succeeded.75d090139f"], "model.terra.core__dim_address_labels": ["model.terra.core__ez_staking", "model.terra.core__ez_staking", "model.terra.silver__lp_actions", "test.terra.dbt_utils_unique_combination_of_columns_core__dim_address_labels_address.e61c78962d", "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c", "test.terra.tests__correct_token_pairs"], "model.terra.core__fact_transactions": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER.f44897c42e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER.8dc684a848", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN.a620f4c212", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832", "test.terra.not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.3eddef3456", "test.terra.not_null_core__fact_transactions_AUTH_TYPE.582c2b54e0", "test.terra.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0", "test.terra.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "test.terra.not_null_core__fact_transactions_GAS_LIMIT.833d77a375", "test.terra.not_null_core__fact_transactions_GAS_USED.2e66666fc1", "test.terra.not_null_core__fact_transactions_TX.73062d241f", "test.terra.not_null_core__fact_transactions_TX_CODE.a63fee458d", "test.terra.not_null_core__fact_transactions_TX_ID.f374dfcdc6", "test.terra.not_null_core__fact_transactions_TX_SENDER.ca55265b0a", "test.terra.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae", "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2", "test.terra.unique_core__fact_transactions_TX_ID.389fc7cd9b"], "model.terra.core__fact_messages": [], "model.terra.core__ez_staking": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float.33baf19c67", "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.0211f19e9b", "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.863595b14c", "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.b75809eea1", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1.29ce75adc1", "test.terra.dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS.c121643bd3", "test.terra.not_null_core__ez_staking_ACTION.7ab86e3bc7", "test.terra.not_null_core__ez_staking_AMOUNT.e321ce5675", "test.terra.not_null_core__ez_staking_BLOCKCHAIN.9a855d42ca", "test.terra.not_null_core__ez_staking_BLOCK_ID.c41de65c37", "test.terra.not_null_core__ez_staking_BLOCK_TIMESTAMP.59b42e31b0", "test.terra.not_null_core__ez_staking_CHAIN_ID.75d5778ca8", "test.terra.not_null_core__ez_staking_TX_ID.6c975bed79", "test.terra.not_null_core__ez_staking_TX_SUCCEEDED.74cd90275e", "test.terra.not_null_core__ez_staking_VALIDATOR_ADDRESS.90c2b45b9f"], "model.terra.core__fact_msg_attributes": ["test.terra.accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.6008e18226", "test.terra.accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.6f0adb4d76", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER.2727761878", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR.91e898b03b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR.8cdcbbc83d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR.602888cde2", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT.898db0604f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.35f3053b5e", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR.c6c5417ca2", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR.61c6a6e731", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER.e77c3d164b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR.4cf158a3e8", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR.786c130be2", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN.731b66b324", "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.da71bcfab5", "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.492b40c428", "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.7fe04a3e70", "test.terra.not_null_core__fact_msg_attributes_BLOCKCHAIN.ec569e1a26", "test.terra.not_null_core__fact_msg_attributes_BLOCK_ID.9ee1a30a95", "test.terra.not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.ee2107b294", "test.terra.not_null_core__fact_msg_attributes_CHAIN_ID.481e75e9b2", "test.terra.not_null_core__fact_msg_attributes_MSG_INDEX.4882260488", "test.terra.not_null_core__fact_msg_attributes_MSG_TYPE.6026ff3069", "test.terra.not_null_core__fact_msg_attributes_TX_ID.5c95babc15", "test.terra.not_null_core__fact_msg_attributes_TX_SUCCEEDED.15419fee12"], "model.terra.core__fact_blocks": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.ba080e379c", "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808", "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de", "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb", "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c", "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93", "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34", "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390", "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d", "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2", "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43", "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15", "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3", "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3", "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce", "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a", "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c", "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707", "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d", "test.terra.not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.226eadfc31", "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e"], "model.terra.core__fact_nft_mints": ["test.terra.dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID.e7a5bd2f6d"], "model.terra.core__fact_lp_actions": [], "model.terra.core__fact_msgs": ["test.terra.accepted_values_core__fact_msgs_BLOCKCHAIN__terra.ffd02f21d7", "test.terra.accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.3f0138ed74", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR.8f85219828", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT.f961885cf3", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93a7511777", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR.997aaaa0e7", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR.862a32ad0a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER.0e155538ce", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR.4e20bbe5d1", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT.8ef45b8159", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR.033128c72a", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN.5561bd7292", "test.terra.not_null_core__fact_msgs_BLOCKCHAIN.56e147388e", "test.terra.not_null_core__fact_msgs_BLOCK_ID.eac6239202", "test.terra.not_null_core__fact_msgs_BLOCK_TIMESTAMP.609eb9a47a", "test.terra.not_null_core__fact_msgs_CHAIN_ID.d05caaf63c", "test.terra.not_null_core__fact_msgs_MSG.e2d6c790b2", "test.terra.not_null_core__fact_msgs_MSG_INDEX.84cc0bac93", "test.terra.not_null_core__fact_msgs_MSG_TYPE.85292bdc34", "test.terra.not_null_core__fact_msgs_TX_ID.45d575785f", "test.terra.not_null_core__fact_msgs_TX_SUCCEEDED.a70b9aa0bb"], "model.terra.core__ez_transfers": ["test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT.6ac41f348c", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.5fb2e0bffb", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR.1dd1ea263b", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER.74880becef", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR.e399be1152", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR.1fe6f41471", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR.7424e1cbc6", "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN.5936726427", "test.terra.dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id.177289bef9", "test.terra.not_null_core__ez_transfers_BLOCK_ID.631d739518", "test.terra.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e", "test.terra.not_null_core__ez_transfers_CHAIN_ID.37e48b015b", "test.terra.not_null_core__ez_transfers_MESSAGE_INDEX.2d0b0c9a82", "test.terra.not_null_core__ez_transfers_MESSAGE_TYPE.0b0168ec7d", "test.terra.not_null_core__ez_transfers_TRANSFER_ID.197d88c1d9", "test.terra.not_null_core__ez_transfers_TX_ID.2ae5b080df", "test.terra.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96", "test.terra.unique_core__ez_transfers_TRANSFER_ID.f5615fdce0"], "test.terra.tests__correct_token_pairs": [], "operation.terra.terra-on-run-start-0": [], "operation.terra.terra-on-run-start-1": [], "test.terra.not_null_silver__dex_swaps_BLOCK_ID.e92ac9632a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_ID__NUMBER__FLOAT.19eb703d2e": [], "test.terra.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a0efd929fd": [], "test.terra.not_null_silver__dex_swaps_BLOCKCHAIN.7ba54e120a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_BLOCKCHAIN__STRING__VARCHAR.4e386a4a96": [], "test.terra.not_null_silver__dex_swaps_CHAIN_ID.addadcfa37": [], "test.terra.accepted_values_silver__dex_swaps_CHAIN_ID__phoenix_1.4023154d5a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_CHAIN_ID__STRING__VARCHAR.e56210ce59": [], "test.terra.not_null_silver__dex_swaps_TX_ID.3f10ba61c8": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_ID__STRING__VARCHAR.65ef3b20e1": [], "test.terra.not_null_silver__dex_swaps_TX_SUCCEEDED.5843f6eabd": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_TX_SUCCEEDED__boolean.a081e7b8fc": [], "test.terra.not_null_silver__dex_swaps_from_currency.81d3fa180e": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_currency__STRING__VARCHAR.8af82724f1": [], "test.terra.not_null_silver__dex_swaps_trader.b1cc26d600": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_trader__STRING__VARCHAR.62a5bb606b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_amount__NUMBER__FLOAT__DOUBLE.2e9ae4edf8": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_from_decimal__decimal__NUMBER__FLOAT.cc9884771c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_amount__NUMBER__FLOAT__DECIMAL.c6ba11a35c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_currency__STRING__VARCHAR.f56203e965": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_to_decimal__decimal__NUMBER__FLOAT.9e5139044b": [], "test.terra.not_null_silver__dex_swaps__INSERTED_TIMESTAMP.7f20c40c61": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps__INSERTED_TIMESTAMP__timestamp_ntz.5de15e9c20": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__dex_swaps_pool_ids__STRING__VARCHAR.4c2c520a8b": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__dex_swaps_SWAP_ID.a2a765f055": [], "test.terra.unique_silver__transfers_TRANSFER_ID.e27b94f7ee": [], "test.terra.not_null_silver__transfers_TRANSFER_ID.2065553678": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TRANSFER_ID__STRING__VARCHAR.230e8f6d7b": [], "test.terra.not_null_silver__transfers_TX_ID.1be05d8ee2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_ID__STRING__VARCHAR.0f84a7c8bb": [], "test.terra.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": [], "test.terra.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.terra.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_TX_SUCCEEDED__BOOLEAN.c3ad0a0d7a": [], "test.terra.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_CHAIN_ID__VARCHAR.d71aaf3142": [], "test.terra.not_null_silver__transfers_MESSAGE_INDEX.48341e0be1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_INDEX__NUMBER.06c7310fc4": [], "test.terra.not_null_silver__transfers_MESSAGE_TYPE.4400b64fe0": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_MESSAGE_TYPE__VARCHAR.2fb596a3f8": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__transfers_transfer_id.e430cac164": [], "test.terra.not_null_silver__governance_submit_proposal_BLOCK_ID.80df3f0930": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.065c6b7366": [], "test.terra.not_null_silver__governance_submit_proposal_BLOCK_TIMESTAMP.59a0f38558": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.f1054d98d9": [], "test.terra.not_null_silver__governance_submit_proposal_BLOCKCHAIN.908b82f02b": [], "test.terra.accepted_values_silver__governance_submit_proposal_BLOCKCHAIN__terra.4289fde0f6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.0931733295": [], "test.terra.not_null_silver__governance_submit_proposal_CHAIN_ID.db4c666e00": [], "test.terra.accepted_values_silver__governance_submit_proposal_CHAIN_ID__phoenix_1.32faa38966": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.dbb25df7d2": [], "test.terra.unique_silver__governance_submit_proposal_TX_ID.63afc1894a": [], "test.terra.not_null_silver__governance_submit_proposal_TX_ID.8dc772d3ad": [], "test.terra.relationships_silver__governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.2f72f13829": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_ID__STRING__VARCHAR.7af3aa957c": [], "test.terra.not_null_silver__governance_submit_proposal_TX_SUCCEEDED.3728678fd9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_TX_SUCCEEDED__boolean.ff3553163b": [], "test.terra.not_null_silver__governance_submit_proposal_PROPOSER.51a248ebc4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSER__STRING__VARCHAR.29a95924a4": [], "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_ID.b8f0c6f0fa": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_ID__NUMBER.c96f72f85c": [], "test.terra.not_null_silver__governance_submit_proposal_PROPOSAL_TYPE.dbda3680fd": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.9359900f72": [], "test.terra.not_null_silver__governance_submit_proposal__INSERTED_TIMESTAMP.cfc79bcad1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_submit_proposal__INSERTED_TIMESTAMP__timestamp_ntz.df3fa3fdd2": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__governance_submit_proposal_TX_ID.e7cadc9d82": [], "test.terra.not_null_silver__transactions__inserted_timestamp.2bb9db5cf7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions__inserted_timestamp__TIMESTAMP_NTZ.6b08b1ea57": [], "test.terra.not_null_silver__staking_ACTION.91a24f522a": [], "test.terra.not_null_silver__staking_BLOCKCHAIN.58801fa4bb": [], "test.terra.not_null_silver__staking_BLOCK_ID.1d5493faed": [], "test.terra.not_null_silver__staking_BLOCK_TIMESTAMP.c6ce91983d": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_silver__staking_BLOCK_TIMESTAMP__day__1.8c14a74a71": [], "test.terra.not_null_silver__staking_CHAIN_ID.3ba9c15357": [], "test.terra.not_null_silver__staking_DELEGATOR_ADDRESS.36dee98f10": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.bca8b49c5d": [], "test.terra.not_null_silver__staking_AMOUNT.7d0bf3ba53": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__staking_AMOUNT__decimal__float.57f1ccc017": [], "test.terra.not_null_silver__staking_TX_ID.79d5b2c618": [], "test.terra.not_null_silver__staking_TX_SUCCEEDED.94eab542e4": [], "test.terra.not_null_silver__staking_VALIDATOR_ADDRESS.3d65954499": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.f29a9793eb": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_silver__staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.a87768f890": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__staking_STAKING_ID.11614d03a0": [], "test.terra.unique_silver__msg_attributes_MESSAGE_ID.232c3d33b4": [], "test.terra.not_null_silver__msg_attributes_MESSAGE_ID.1359329b17": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MESSAGE_ID__STRING__VARCHAR.2614ecbecb": [], "test.terra.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_ID__NUMBER__FLOAT.f13be7abb1": [], "test.terra.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": [], "test.terra.not_null_silver__msg_attributes_BLOCKCHAIN.9d8129186b": [], "test.terra.accepted_values_silver__msg_attributes_BLOCKCHAIN__terra.a8eb99e878": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCKCHAIN__STRING__VARCHAR.49c79f99ba": [], "test.terra.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": [], "test.terra.accepted_values_silver__msg_attributes_CHAIN_ID__phoenix_1.57d377cf49": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_CHAIN_ID__STRING__VARCHAR.10f84b6d48": [], "test.terra.not_null_silver__msg_attributes_TX_ID.34f30240c0": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_ID__VARCHAR.a96512f8d5": [], "test.terra.not_null_silver__msg_attributes_TX_SUCCEEDED.cedeb82ac7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_TX_SUCCEEDED__BOOLEAN.9895376246": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_GROUP__STRING__VARCHAR.86b8c41d0b": [], "test.terra.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER.696aed84ea": [], "test.terra.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_TYPE__VARCHAR.17ab615e68": [], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_KEY.2f7c4d2b9b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_KEY__VARCHAR.a7f75ef027": [], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_VALUE.99f5b0d6cf": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_VALUE__VARCHAR.4d49a23e6c": [], "test.terra.not_null_silver__msg_attributes_ATTRIBUTE_INDEX.ebb4277390": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_ATTRIBUTE_INDEX__NUMBER.fda54d56e0": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__msg_attributes_message_id.43d4a9c13a": [], "test.terra.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_ID__NUMBER__FLOAT.d78719780d": [], "test.terra.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.terra.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER.703f7e0cd8": [], "test.terra.not_null_silver__blocks_BLOCK_HASH.237eb3c0e1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HASH__STRING__VARCHAR.a0b70a4e62": [], "test.terra.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CHAIN_ID__STRING__VARCHAR.eba2c1ff94": [], "test.terra.not_null_silver__blocks_CONSENSUS_HASH.9135b16101": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_CONSENSUS_HASH__STRING__VARCHAR.cfd59d9f93": [], "test.terra.not_null_silver__blocks_DATA_HASH.d6d4cdb4aa": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DATA_HASH__STRING__VARCHAR.1638c4fd51": [], "test.terra.not_null_silver__blocks_EVIDENCE.5d591f2470": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE__VARCHAR__VARIANT.4842de10fc": [], "test.terra.not_null_silver__blocks_EVIDENCE_HASH.ac462f15b4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_EVIDENCE_HASH__STRING__VARCHAR.30a02df3fc": [], "test.terra.not_null_silver__blocks_BLOCK_HEIGHT.ec0eaf1cf2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEIGHT__NUMBER.18413ced0e": [], "test.terra.not_null_silver__blocks_LAST_BLOCK_ID.b1b087d726": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.cd6fdfaf3b": [], "test.terra.not_null_silver__blocks_LAST_COMMIT.fbc0b0fc6b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT__VARIANT.ca4507f031": [], "test.terra.not_null_silver__blocks_LAST_COMMIT_HASH.36e089d1d9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_COMMIT_HASH__STRING__VARCHAR.563db97809": [], "test.terra.not_null_silver__blocks_LAST_RESULTS_HASH.5fd8089ac6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_LAST_RESULTS_HASH__STRING__VARCHAR.f65478b78a": [], "test.terra.not_null_silver__blocks_NEXT_VALIDATORS_HASH.c4686f0678": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.deb70d383f": [], "test.terra.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_PROPOSER_ADDRESS__STRING__VARCHAR.271fde4209": [], "test.terra.not_null_silver__blocks_VALIDATORS_HASH.fff6689312": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATORS_HASH__STRING__VARCHAR.b3282a0163": [], "test.terra.not_null_silver__blocks_VALIDATOR_ADDRESS_ARRAY.98926ccf35": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.fc63f1144c": [], "test.terra.not_null_silver__blocks__INSERTED_TIMESTAMP.be3b3ed4ca": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.690191eca2": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__blocks_block_id.06001f3d65": [], "test.terra.not_null_silver__nft_mints_BLOCK_ID.bb62c53211": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_ID__NUMBER__FLOAT.487566274a": [], "test.terra.not_null_silver__nft_mints_BLOCK_TIMESTAMP.e30e9b9d6d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ef89499fa3": [], "test.terra.not_null_silver__nft_mints_BLOCKCHAIN.4b8224fea8": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_BLOCKCHAIN__STRING__VARCHAR.d51c1aaa45": [], "test.terra.not_null_silver__nft_mints_CHAIN_ID.4fea72c533": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CHAIN_ID__STRING__VARCHAR.c974fe9f51": [], "test.terra.not_null_silver__nft_mints_TX_ID.44c0221884": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_ID__STRING__VARCHAR.43dc724771": [], "test.terra.not_null_silver__nft_mints_TX_SUCCEEDED.43b685cb51": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TX_SUCCEEDED__BOOLEAN.f77aed189b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINTER__STRING__VARCHAR.a3451ec2e6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CONTRACT_ADDRESS__STRING__VARCHAR.17d74a51e7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_TOKEN_ID__NUMBER__VARCHAR.988de005da": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_PRICE__NUMBER.75ca545958": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_CURRENCY__STRING__VARCHAR.3478f088ec": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_DECIMAL__NUMBER.027ee791a3": [], "test.terra.not_null_silver__nft_mints_MINT_ID.d8609e2853": [], "test.terra.unique_silver__nft_mints_MINT_ID.46519323a6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_mints_MINT_ID__STRING__VARCHAR.4033da91bc": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__nft_mints_MINT_ID.467eb8880e": [], "test.terra.unique_silver__governance_votes_tx_id.c0612f2d27": [], "test.terra.not_null_silver__governance_votes_tx_id.df8b3c05ef": [], "test.terra.relationships_silver__governance_votes_tx_id__tx_id__ref_silver__transactions_.7723d7f153": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_id__string__varchar.c04b58bbb3": [], "test.terra.not_null_silver__governance_votes_block_id.b246709bad": [], "test.terra.relationships_silver__governance_votes_block_id__block_id__ref_silver__blocks_.3e1f6e5e19": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_id__number.3e02ae1992": [], "test.terra.not_null_silver__governance_votes_block_timestamp.bcff62180d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_block_timestamp__timestamp_ntz.2af65aa681": [], "test.terra.not_null_silver__governance_votes_blockchain.917e05598d": [], "test.terra.accepted_values_silver__governance_votes_blockchain__terra.1313faedfb": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_blockchain__string__varchar.dafe25a3ec": [], "test.terra.not_null_silver__governance_votes_chain_id.0ba2f00811": [], "test.terra.accepted_values_silver__governance_votes_chain_id__phoenix_1.2bb13b7f2f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_chain_id__string__varchar.1cae213c3b": [], "test.terra.not_null_silver__governance_votes_voter.b79dcecfed": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_voter__string__varchar.a5818854a1": [], "test.terra.not_null_silver__governance_votes_proposal_id.9f2a182ae5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_proposal_id__number.c89486b041": [], "test.terra.not_null_silver__governance_votes_vote_option.0608f8a31e": [], "test.terra.dbt_expectations_expect_column_values_to_be_between_silver__governance_votes_vote_option__4__1.48f56d4f06": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option__number.de16532ee1": [], "test.terra.not_null_silver__governance_votes_vote_option_text.618c8b20cc": [], "test.terra.accepted_values_silver__governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.4ff3c1834e": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_option_text__string__varchar.2f3898295e": [], "test.terra.not_null_silver__governance_votes_vote_weight.58df7a828a": [], "test.terra.accepted_values_silver__governance_votes_vote_weight__1.a543ecdc40": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_vote_weight__number.1c2ecc79dd": [], "test.terra.not_null_silver__governance_votes_tx_succeeded.d7ac3d5eed": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes_tx_succeeded__boolean.cb89774290": [], "test.terra.not_null_silver__governance_votes__inserted_timestamp.9f89102be5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__governance_votes__inserted_timestamp__timestamp_ntz.68921ad682": [], "test.terra.not_null_silver__token_labels_BLOCK_TIMESTAMP.4bab832ad2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.062d3526af": [], "test.terra.not_null_silver__token_labels_BLOCKCHAIN.d9542e6db2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_BLOCKCHAIN__STRING__VARCHAR.4bed36173d": [], "test.terra.not_null_silver__token_labels_TX_ID.ffb78ba8fc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_TX_ID__STRING__VARCHAR.c1ee925822": [], "test.terra.not_null_silver__token_labels_LABEL.81e47ba4d9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL__STRING__VARCHAR.4dcb4ce956": [], "test.terra.unique_silver__token_labels_ADDRESS.f5cc09210f": [], "test.terra.not_null_silver__token_labels_ADDRESS.95a925fdac": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_ADDRESS__STRING__VARCHAR.c3efad0a50": [], "test.terra.not_null_silver__token_labels_SYMBOL.3baa013084": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_SYMBOL__STRING__VARCHAR.35103f428b": [], "test.terra.not_null_silver__token_labels_DECIMALS.7abc70a23b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_DECIMALS__decimal__float__NUMBER.6d36153379": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_CREATOR__STRING__VARCHAR.b31987ac15": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_TYPE__STRING__VARCHAR.5b257c3121": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_LABEL_SUBTYPE__STRING__VARCHAR.d91a590606": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__token_labels_PROJECT_NAME__STRING__VARCHAR.ee7aac0536": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__token_labels_address.2e65ca4f07": [], "test.terra.unique_silver__nft_sales_unique_id.a34598105c": [], "test.terra.not_null_silver__nft_sales_unique_id.e87cf641d1": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_unique_id__varchar.1ad4a2d7b2": [], "test.terra.not_null_silver__nft_sales_block_id.6b8ae85cc7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_block_id__NUMBER__FLOAT.1e3b411b22": [], "test.terra.not_null_silver__nft_sales_block_timestamp.1ea5fe220e": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__nft_sales_block_timestamp__timestamp_ntz.fac3defc53": [], "test.terra.not_null_silver__nft_sales_tx_id.52567b28a5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_id__STRING__VARCHAR.03f27d4e32": [], "test.terra.not_null_silver__nft_sales_tx_succeeded.8b4a8f3210": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_tx_succeeded__BOOLEAN.4f3e9b4781": [], "test.terra.not_null_silver__nft_sales_chain_id.e01ecf1619": [], "test.terra.accepted_values_silver__nft_sales_chain_id__phoenix_1.4910d24029": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_chain_id__STRING__VARCHAR.7e1d5f429a": [], "test.terra.not_null_silver__nft_sales_blockchain.33e23b43cc": [], "test.terra.accepted_values_silver__nft_sales_blockchain__terra.b3af3d6472": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_blockchain__STRING__VARCHAR.1e92e15aa9": [], "test.terra.not_null_silver__nft_sales_purchaser.86d6ee5596": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_purchaser__STRING__VARCHAR.f66fa138e1": [], "test.terra.not_null_silver__nft_sales_seller.5f87626aad": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_seller__STRING__VARCHAR.381a66eb49": [], "test.terra.not_null_silver__nft_sales_sales_amount.5bb89c4043": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_sales_amount__NUMBER__FLOAT.f06d20a3b9": [], "test.terra.not_null_silver__nft_sales_currency.d2d4883210": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_currency__STRING__VARCHAR.4e3f2cbe41": [], "test.terra.not_null_silver__nft_sales_decimals.eee63c2b4c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_sales_decimals__NUMBER.af1b95ab24": [], "test.terra.unique_silver__messages_MESSAGE_ID.ff4488317d": [], "test.terra.not_null_silver__messages_MESSAGE_ID.5dfb188520": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_ID__STRING__VARCHAR.8836a9b55e": [], "test.terra.not_null_silver__messages_BLOCK_ID.7e8b0e5f76": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_ID__NUMBER__FLOAT.19f928cb8c": [], "test.terra.not_null_silver__messages_BLOCK_TIMESTAMP.7975d6ee06": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7dfce1f3e0": [], "test.terra.not_null_silver__messages_TX_ID.084bc612c0": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_ID__VARCHAR.8b2bf99b7e": [], "test.terra.not_null_silver__messages_TX_SUCCEEDED.77a22e5e9d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_TX_SUCCEEDED__BOOLEAN.9e5b6c7cf9": [], "test.terra.not_null_silver__messages_CHAIN_ID.9c16a959ed": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_CHAIN_ID__VARCHAR.9741f9de65": [], "test.terra.not_null_silver__messages_MESSAGE_INDEX.0ae4dd5755": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_INDEX__NUMBER.f789527649": [], "test.terra.not_null_silver__messages_MESSAGE_TYPE.c3c46dcbdd": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_MESSAGE_TYPE__VARCHAR.ffbba96899": [], "test.terra.not_null_silver__messages_ATTRIBUTES.3cd95720f4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__messages_ATTRIBUTES__OBJECT.89b2a0c64d": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__messages_message_id.4cd971589d": [], "test.terra.unique_silver__msgs_MESSAGE_ID.83bad7bef2": [], "test.terra.not_null_silver__msgs_MESSAGE_ID.436e3803e5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MESSAGE_ID__STRING__VARCHAR.4816a5174b": [], "test.terra.not_null_silver__msgs_BLOCK_ID.1de1a37994": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_ID__NUMBER__FLOAT.84601b77c0": [], "test.terra.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": [], "test.terra.not_null_silver__msgs_BLOCKCHAIN.5236da2509": [], "test.terra.accepted_values_silver__msgs_BLOCKCHAIN__terra.1e13cf0ea4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCKCHAIN__STRING__VARCHAR.d4724b33fb": [], "test.terra.not_null_silver__msgs_CHAIN_ID.41ac59beba": [], "test.terra.accepted_values_silver__msgs_CHAIN_ID__phoenix_1.7396fb9d57": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_CHAIN_ID__STRING__VARCHAR.5060cbda07": [], "test.terra.not_null_silver__msgs_TX_ID.59a107fa1e": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_ID__VARCHAR.c27c3737ce": [], "test.terra.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_TX_SUCCEEDED__BOOLEAN.c832584172": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_GROUP__STRING__VARCHAR.8d68d19171": [], "test.terra.not_null_silver__msgs_MSG_INDEX.227765e0bf": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER.447eb58545": [], "test.terra.not_null_silver__msgs_MSG_TYPE.312b195565": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_TYPE__VARCHAR.d6218c616b": [], "test.terra.not_null_silver__msgs_MSG.140acfecdc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG__VARIANT.8296dbb7a2": [], "test.terra.dbt_utils_unique_combination_of_columns_silver__msgs_MESSAGE_ID.571d9ca9db": [], "test.terra.unique_silver__lp_actions_action_id.8feba30e90": [], "test.terra.not_null_silver__lp_actions_action_id.1895f31cc6": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action_id__varchar.575f5a8bca": [], "test.terra.not_null_silver__lp_actions_block_id.612586a7cb": [], "test.terra.relationships_silver__lp_actions_block_id__block_id__ref_silver__blocks_.aad8ae83c5": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_id__number.145aae2b01": [], "test.terra.not_null_silver__lp_actions_block_timestamp.8ad214d7f5": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_block_timestamp__timestamp_ntz.dea7337aaa": [], "test.terra.not_null_silver__lp_actions_tx_id.468a921096": [], "test.terra.relationships_silver__lp_actions_tx_id__tx_id__ref_silver__transactions_.2a756062a2": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_id__varchar.63e96990ee": [], "test.terra.not_null_silver__lp_actions_tx_succeeded.7ffb92c629": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_tx_succeeded__boolean.a717827478": [], "test.terra.not_null_silver__lp_actions_chain_id.92b09a5867": [], "test.terra.accepted_values_silver__lp_actions_chain_id__phoenix_1.bcbc85a705": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_chain_id__varchar.96fbe9872a": [], "test.terra.not_null_silver__lp_actions_blockchain.4f0a107928": [], "test.terra.accepted_values_silver__lp_actions_blockchain__terra.2393767af9": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_blockchain__varchar.dbe4369548": [], "test.terra.not_null_silver__lp_actions_liquidity_provider_address.aba666ba5e": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_liquidity_provider_address__varchar.d688ace707": [], "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_liquidity_provider_address__terra_.c3e67fb7aa": [], "test.terra.not_null_silver__lp_actions_action.7ac5d6f78e": [], "test.terra.accepted_values_silver__lp_actions_action__burn_lp_token__mint_lp_token__provide_liquidity__withdraw_liquidity.5373dcd0ce": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_action__varchar.fcc850cc15": [], "test.terra.not_null_silver__lp_actions_pool_address.f4c321d743": [], "test.terra.relationships_silver__lp_actions_pool_address__address__ref_core__dim_address_labels_.364b60da0c": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_pool_address__varchar.fa13bb082b": [], "test.terra.dbt_expectations_expect_column_values_to_match_like_pattern_silver__lp_actions_pool_address__terra_.7257f1eb85": [], "test.terra.not_null_silver__lp_actions_amount.13c03f504d": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_amount__number.cc87f632e7": [], "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_amount__0.7049ba3596": [], "test.terra.not_null_silver__lp_actions_currency.15f91bb63e": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_silver__lp_actions_currency__varchar.d0950ecf3c": [], "test.terra.dbt_expectations_expect_column_min_to_be_between_silver__lp_actions_decimals__0.b85cc40115": [], "test.terra.not_null_core__fact_nft_sales_block_id.6a8cf5dbe3": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_block_id__NUMBER__FLOAT.1a263806c8": [], "test.terra.not_null_core__fact_nft_sales_block_timestamp.a99e8d84cb": [], "test.terra.dbt_expectations_expect_column_values_to_be_of_type_core__fact_nft_sales_block_timestamp__timestamp_ntz.2e773f3079": [], "test.terra.not_null_core__fact_nft_sales_tx_id.243389477f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_id__STRING__VARCHAR.f9740358f1": [], "test.terra.not_null_core__fact_nft_sales_tx_succeeded.484054b419": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_tx_succeeded__BOOLEAN.7f6defb7dc": [], "test.terra.not_null_core__fact_nft_sales_chain_id.69d78bc3e7": [], "test.terra.accepted_values_core__fact_nft_sales_chain_id__phoenix_1.0bbf4b7452": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_chain_id__STRING__VARCHAR.61262d1e70": [], "test.terra.not_null_core__fact_nft_sales_blockchain.db801e045c": [], "test.terra.accepted_values_core__fact_nft_sales_blockchain__terra.235c3c039d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_blockchain__STRING__VARCHAR.52fdffa0af": [], "test.terra.not_null_core__fact_nft_sales_purchaser.5de6e437bc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_purchaser__STRING__VARCHAR.1c1702a48c": [], "test.terra.not_null_core__fact_nft_sales_seller.8347483250": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_seller__STRING__VARCHAR.c571f9ea6f": [], "test.terra.not_null_core__fact_nft_sales_sales_amount.9529c74c94": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_sales_amount__NUMBER__FLOAT.2a0728d1e6": [], "test.terra.not_null_core__fact_nft_sales_currency.00d5e018d5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_currency__STRING__VARCHAR.2dbc63b456": [], "test.terra.not_null_core__fact_nft_sales_decimals.33af829054": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_nft_sales_decimals__NUMBER.15a90b7fac": [], "test.terra.not_null_core__ez_swaps_BLOCK_ID.36b7acff73": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_ID__NUMBER__FLOAT.fdad2674ca": [], "test.terra.not_null_core__ez_swaps_BLOCK_TIMESTAMP.e04f859b55": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.b056ffabe5": [], "test.terra.not_null_core__ez_swaps_BLOCKCHAIN.9767d6d83f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_BLOCKCHAIN__STRING__VARCHAR.abb60c2c90": [], "test.terra.not_null_core__ez_swaps_CHAIN_ID.2022725566": [], "test.terra.accepted_values_core__ez_swaps_CHAIN_ID__phoenix_1.5ce8aab982": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_CHAIN_ID__STRING__VARCHAR.397ba10998": [], "test.terra.not_null_core__ez_swaps_TX_ID.c724624638": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_ID__STRING__VARCHAR.87cd04ec40": [], "test.terra.not_null_core__ez_swaps_TX_SUCCEEDED.596ab1bb50": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_TX_SUCCEEDED__boolean.d369ca878f": [], "test.terra.not_null_core__ez_swaps_from_currency.e4b5e2d3f1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_currency__STRING__VARCHAR.7fc1a010af": [], "test.terra.not_null_core__ez_swaps_trader.efdb9beb1d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_trader__STRING__VARCHAR.057b6c70ef": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_amount__decimal__float__NUMBER.05a3aedf05": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_from_decimal__decimal__float__NUMBER.ebff115896": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_amount__NUMBER__FLOAT__DECIMAL.aede885d13": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_currency__STRING__VARCHAR.be42e1a2b5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_to_decimal__decimal__float__NUMBER.ae7f271aa5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_swaps_pool_ids__STRING__VARCHAR.b95d7aa2e0": [], "test.terra.not_null_core__ez_staking_ACTION.7ab86e3bc7": [], "test.terra.not_null_core__ez_staking_BLOCKCHAIN.9a855d42ca": [], "test.terra.not_null_core__ez_staking_BLOCK_ID.c41de65c37": [], "test.terra.not_null_core__ez_staking_BLOCK_TIMESTAMP.59b42e31b0": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_staking_BLOCK_TIMESTAMP__day__1.29ce75adc1": [], "test.terra.not_null_core__ez_staking_CHAIN_ID.75d5778ca8": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_DELEGATOR_ADDRESS__terra_0_9a_z_39_39_.0211f19e9b": [], "test.terra.not_null_core__ez_staking_AMOUNT.e321ce5675": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_staking_AMOUNT__decimal__float.33baf19c67": [], "test.terra.not_null_core__ez_staking_TX_ID.6c975bed79": [], "test.terra.not_null_core__ez_staking_TX_SUCCEEDED.74cd90275e": [], "test.terra.not_null_core__ez_staking_VALIDATOR_ADDRESS.90c2b45b9f": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_ADDRESS__terravaloper1_0_9a_z_.863595b14c": [], "test.terra.dbt_expectations_expect_column_values_to_match_regex_core__ez_staking_VALIDATOR_SRC_ADDRESS__terravaloper1_0_9a_z_.b75809eea1": [], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_staking_BLOCK_ID__TX_ID__ACTION__MESSAGE_INDEX__DELEGATOR_ADDRESS.c121643bd3": [], "test.terra.not_null_core__fact_msg_attributes_BLOCK_ID.9ee1a30a95": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_ID__NUMBER__FLOAT.898db0604f": [], "test.terra.not_null_core__fact_msg_attributes_BLOCK_TIMESTAMP.ee2107b294": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.35f3053b5e": [], "test.terra.not_null_core__fact_msg_attributes_BLOCKCHAIN.ec569e1a26": [], "test.terra.accepted_values_core__fact_msg_attributes_BLOCKCHAIN__terra.6008e18226": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_BLOCKCHAIN__STRING__VARCHAR.602888cde2": [], "test.terra.not_null_core__fact_msg_attributes_CHAIN_ID.481e75e9b2": [], "test.terra.accepted_values_core__fact_msg_attributes_CHAIN_ID__phoenix_1.6f0adb4d76": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_CHAIN_ID__STRING__VARCHAR.c6c5417ca2": [], "test.terra.not_null_core__fact_msg_attributes_TX_ID.5c95babc15": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_ID__VARCHAR.786c130be2": [], "test.terra.not_null_core__fact_msg_attributes_TX_SUCCEEDED.15419fee12": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_TX_SUCCEEDED__BOOLEAN.731b66b324": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_GROUP__STRING__VARCHAR.61c6a6e731": [], "test.terra.not_null_core__fact_msg_attributes_MSG_INDEX.4882260488": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_INDEX__NUMBER.e77c3d164b": [], "test.terra.not_null_core__fact_msg_attributes_MSG_TYPE.6026ff3069": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_MSG_TYPE__VARCHAR.4cf158a3e8": [], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_KEY.492b40c428": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_KEY__VARCHAR.91e898b03b": [], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_VALUE.7fe04a3e70": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_VALUE__VARCHAR.8cdcbbc83d": [], "test.terra.not_null_core__fact_msg_attributes_ATTRIBUTE_INDEX.da71bcfab5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msg_attributes_ATTRIBUTE_INDEX__NUMBER.2727761878": [], "test.terra.not_null_core__fact_blocks_BLOCK_ID.3cbb3adf93": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_ID__NUMBER__FLOAT.5a544f6822": [], "test.terra.not_null_core__fact_blocks_BLOCK_TIMESTAMP.a57d998a34": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.162a42da2f": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_blocks_BLOCK_TIMESTAMP__day__1.ccd6e2b808": [], "test.terra.not_null_core__fact_blocks_BLOCK_HASH.e8733306cb": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HASH__STRING__VARCHAR.2c6340c0b5": [], "test.terra.not_null_core__fact_blocks_CHAIN_ID.1500b8f390": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CHAIN_ID__STRING__VARCHAR.5d491754d6": [], "test.terra.not_null_core__fact_blocks_CONSENSUS_HASH.fd1d1c9e8d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_CONSENSUS_HASH__STRING__VARCHAR.f4878c3f77": [], "test.terra.not_null_core__fact_blocks_DATA_HASH.640af441a2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_DATA_HASH__STRING__VARCHAR.1e74b2b7c0": [], "test.terra.not_null_core__fact_blocks_EVIDENCE.801d893b43": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE__VARCHAR__VARIANT.99cb629438": [], "test.terra.not_null_core__fact_blocks_EVIDENCE_HASH.ebb3bf8e15": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_EVIDENCE_HASH__STRING__VARCHAR.04c0acd1a5": [], "test.terra.not_null_core__fact_blocks_BLOCK_HEIGHT.70ee4dc83c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_BLOCK_HEIGHT__NUMBER.6ff84b7e4d": [], "test.terra.not_null_core__fact_blocks_LAST_BLOCK_ID.a70d09a4d3": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_BLOCK_ID__ARRAY__VARIANT__OBJECT.b107e7d5aa": [], "test.terra.not_null_core__fact_blocks_LAST_COMMIT.e53485aca3": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT__VARIANT.80116127a1": [], "test.terra.not_null_core__fact_blocks_LAST_COMMIT_HASH.4afa4b4cce": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_COMMIT_HASH__STRING__VARCHAR.174ae15400": [], "test.terra.not_null_core__fact_blocks_LAST_RESULTS_HASH.fb8fb4d96a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_LAST_RESULTS_HASH__STRING__VARCHAR.bbcaf0deab": [], "test.terra.not_null_core__fact_blocks_NEXT_VALIDATORS_HASH.b3def8063c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_NEXT_VALIDATORS_HASH__STRING__VARCHAR.1c68e09e23": [], "test.terra.not_null_core__fact_blocks_PROPOSER_ADDRESS.0c1bf8c707": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_PROPOSER_ADDRESS__STRING__VARCHAR.e5d705322f": [], "test.terra.not_null_core__fact_blocks_VALIDATORS_HASH.d369e8781d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATORS_HASH__STRING__VARCHAR.6744607619": [], "test.terra.not_null_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY.226eadfc31": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_blocks_VALIDATOR_ADDRESS_ARRAY__ARRAY__VARIANT__OBJECT.ba080e379c": [], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_blocks_block_id.c1b2e665de": [], "test.terra.sequence_gaps_core__fact_blocks_block_id.2dfe19480e": [], "test.terra.dbt_utils_unique_combination_of_columns_core__dim_address_labels_address.e61c78962d": [], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_ID.f3e783f422": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_ID__NUMBER__FLOAT.33c71ade4b": [], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP.740321bf47": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.e57a22d0ee": [], "test.terra.not_null_core__fact_governance_submit_proposal_BLOCKCHAIN.07419d4222": [], "test.terra.accepted_values_core__fact_governance_submit_proposal_BLOCKCHAIN__terra.98c10656b6": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_BLOCKCHAIN__STRING__VARCHAR.ffa1eb12d0": [], "test.terra.not_null_core__fact_governance_submit_proposal_CHAIN_ID.cb0a20e36e": [], "test.terra.accepted_values_core__fact_governance_submit_proposal_CHAIN_ID__phoenix_1.56bd57d7da": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_CHAIN_ID__STRING__VARCHAR.6b1cc2b79d": [], "test.terra.unique_core__fact_governance_submit_proposal_TX_ID.de29712fdc": [], "test.terra.not_null_core__fact_governance_submit_proposal_TX_ID.5bc20f3f52": [], "test.terra.relationships_core__fact_governance_submit_proposal_TX_ID__tx_id__ref_silver__transactions_.78eb21f505": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_ID__STRING__VARCHAR.035658877c": [], "test.terra.not_null_core__fact_governance_submit_proposal_TX_SUCCEEDED.016ad7c9f4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_TX_SUCCEEDED__BOOLEAN.d69b8d5c48": [], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSER.54faa3af33": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSER__STRING__VARCHAR.54043dd4c0": [], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_ID.781c5c6f88": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_ID__NUMBER.4ec37c1f52": [], "test.terra.not_null_core__fact_governance_submit_proposal_PROPOSAL_TYPE.eafb77597a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_submit_proposal_PROPOSAL_TYPE__VARCHAR__STRING.ff3c876aa5": [], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_governance_submit_proposal_TX_ID.45703b82e7": [], "test.terra.unique_core__ez_transfers_TRANSFER_ID.f5615fdce0": [], "test.terra.not_null_core__ez_transfers_TRANSFER_ID.197d88c1d9": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TRANSFER_ID__STRING__VARCHAR.1fe6f41471": [], "test.terra.not_null_core__ez_transfers_TX_ID.2ae5b080df": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_ID__STRING__VARCHAR.7424e1cbc6": [], "test.terra.not_null_core__ez_transfers_BLOCK_ID.631d739518": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_ID__NUMBER__FLOAT.6ac41f348c": [], "test.terra.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.5fb2e0bffb": [], "test.terra.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_TX_SUCCEEDED__BOOLEAN.5936726427": [], "test.terra.not_null_core__ez_transfers_CHAIN_ID.37e48b015b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_CHAIN_ID__VARCHAR.1dd1ea263b": [], "test.terra.not_null_core__ez_transfers_MESSAGE_INDEX.2d0b0c9a82": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_INDEX__NUMBER.74880becef": [], "test.terra.not_null_core__ez_transfers_MESSAGE_TYPE.0b0168ec7d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_transfers_MESSAGE_TYPE__VARCHAR.e399be1152": [], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_transfers_transfer_id.177289bef9": [], "test.terra.unique_core__fact_governance_votes_tx_id.da6e4bd5dd": [], "test.terra.not_null_core__fact_governance_votes_tx_id.c9344888d3": [], "test.terra.relationships_core__fact_governance_votes_tx_id__tx_id__ref_silver__transactions_.a4263dbf6f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_id__string__varchar.0396164d9f": [], "test.terra.not_null_core__fact_governance_votes_block_id.dee1992be1": [], "test.terra.relationships_core__fact_governance_votes_block_id__block_id__ref_silver__blocks_.8630699e8c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_id__number.6034a8c784": [], "test.terra.not_null_core__fact_governance_votes_block_timestamp.57982df904": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_block_timestamp__timestamp_ntz.a0cefae5de": [], "test.terra.not_null_core__fact_governance_votes_blockchain.8306d3ad35": [], "test.terra.accepted_values_core__fact_governance_votes_blockchain__terra.a9f25017a4": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_blockchain__string__varchar.dd011cc870": [], "test.terra.not_null_core__fact_governance_votes_chain_id.8e3ab78635": [], "test.terra.accepted_values_core__fact_governance_votes_chain_id__phoenix_1.dd069ab2d1": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_chain_id__string__varchar.03e5168e5d": [], "test.terra.not_null_core__fact_governance_votes_voter.2e4df9868b": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_voter__string__varchar.69ad648249": [], "test.terra.not_null_core__fact_governance_votes_proposal_id.82987085cc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_proposal_id__number.13451ee0ab": [], "test.terra.not_null_core__fact_governance_votes_vote_option.3e9399ec24": [], "test.terra.dbt_expectations_expect_column_values_to_be_between_core__fact_governance_votes_vote_option__4__1.841e49d338": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option__number.43d95f7634": [], "test.terra.not_null_core__fact_governance_votes_vote_option_text.7cf887d562": [], "test.terra.accepted_values_core__fact_governance_votes_vote_option_text__Yes__Abstain__No__NoWithVeto.734e037304": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_option_text__string__varchar.ef18544d02": [], "test.terra.not_null_core__fact_governance_votes_vote_weight.67164d2552": [], "test.terra.accepted_values_core__fact_governance_votes_vote_weight__1.d386476c1c": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_vote_weight__number.e7ef700654": [], "test.terra.not_null_core__fact_governance_votes_tx_succeeded.b2cec969cc": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_governance_votes_tx_succeeded__boolean.862d61ea2b": [], "test.terra.dbt_utils_unique_combination_of_columns_core__fact_nft_mints_MINT_ID.e7a5bd2f6d": [], "test.terra.not_null_core__fact_msgs_BLOCK_ID.eac6239202": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_ID__NUMBER__FLOAT.f961885cf3": [], "test.terra.not_null_core__fact_msgs_BLOCK_TIMESTAMP.609eb9a47a": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93a7511777": [], "test.terra.not_null_core__fact_msgs_BLOCKCHAIN.56e147388e": [], "test.terra.accepted_values_core__fact_msgs_BLOCKCHAIN__terra.ffd02f21d7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_BLOCKCHAIN__STRING__VARCHAR.8f85219828": [], "test.terra.not_null_core__fact_msgs_CHAIN_ID.d05caaf63c": [], "test.terra.accepted_values_core__fact_msgs_CHAIN_ID__phoenix_1.3f0138ed74": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_CHAIN_ID__STRING__VARCHAR.997aaaa0e7": [], "test.terra.not_null_core__fact_msgs_TX_ID.45d575785f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_ID__VARCHAR.033128c72a": [], "test.terra.not_null_core__fact_msgs_TX_SUCCEEDED.a70b9aa0bb": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_TX_SUCCEEDED__BOOLEAN.5561bd7292": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_GROUP__STRING__VARCHAR.862a32ad0a": [], "test.terra.not_null_core__fact_msgs_MSG_INDEX.84cc0bac93": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_INDEX__NUMBER.0e155538ce": [], "test.terra.not_null_core__fact_msgs_MSG_TYPE.85292bdc34": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG_TYPE__VARCHAR.4e20bbe5d1": [], "test.terra.not_null_core__fact_msgs_MSG.e2d6c790b2": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_msgs_MSG__VARIANT.8ef45b8159": [], "test.terra.not_null_core__fact_transactions_TX_ID.f374dfcdc6": [], "test.terra.unique_core__fact_transactions_TX_ID.389fc7cd9b": [], "test.terra.tx_gaps_core__fact_transactions_block_id__TX_ID__tx_count.5d2b4346a2": [], "test.terra.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": [], "test.terra.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_transactions_BLOCK_TIMESTAMP__day__1.149536b832": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3d4fd2cce7": [], "test.terra.not_null_core__fact_transactions_BLOCK_ID.307a0ce8d0": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_BLOCK_ID__NUMBER.f44897c42e": [], "test.terra.not_null_core__fact_transactions_AUTH_TYPE.582c2b54e0": [], "test.terra.not_null_core__fact_transactions_AUTHORIZER_PUBLIC_KEY.3eddef3456": [], "test.terra.not_null_core__fact_transactions_TX_SENDER.ca55265b0a": [], "test.terra.not_null_core__fact_transactions_GAS_LIMIT.833d77a375": [], "test.terra.not_null_core__fact_transactions_GAS_USED.2e66666fc1": [], "test.terra.not_null_core__fact_transactions_TX_CODE.a63fee458d": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_CODE__NUMBER.8dc684a848": [], "test.terra.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__fact_transactions_TX_SUCCEEDED__BOOLEAN.a620f4c212": [], "test.terra.not_null_core__fact_transactions_TX.73062d241f": [], "test.terra.not_null_core__ez_messages_MESSAGE_ID.cbde651172": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_ID__STRING__VARCHAR.c83b5ab109": [], "test.terra.not_null_core__ez_messages_BLOCK_ID.43c8918e31": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_ID__NUMBER__FLOAT.15a72efd12": [], "test.terra.not_null_core__ez_messages_BLOCK_TIMESTAMP.de22585332": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.ecc4800d31": [], "test.terra.not_null_core__ez_messages_TX_ID.32dde41c32": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_TX_ID__STRING__VARCHAR.8c5c1d4f2d": [], "test.terra.not_null_core__ez_messages_tx_succeeded.75d090139f": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_tx_succeeded__BOOLEAN.b3e7e4854d": [], "test.terra.not_null_core__ez_messages_CHAIN_ID.fe88aa0ae5": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_CHAIN_ID__STRING__VARCHAR.bfd32fcd48": [], "test.terra.not_null_core__ez_messages_MESSAGE_INDEX.60b09aad22": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_INDEX__NUMBER.827381ca59": [], "test.terra.not_null_core__ez_messages_MESSAGE_TYPE.df06e247ee": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_MESSAGE_TYPE__VARCHAR.1abf8652ed": [], "test.terra.not_null_core__ez_messages_ATTRIBUTES.5c5a64eef7": [], "test.terra.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_messages_ATTRIBUTES__OBJECT.91281c2f94": [], "test.terra.dbt_utils_unique_combination_of_columns_core__ez_messages_message_id.4bedcf869c": [], "source.terra.chainwalkers.terra2_blocks": ["model.terra.bronze__blocks"], "source.terra.chainwalkers.terra2_txs": ["model.terra.bronze__transactions"], "source.terra.anchor.bonds": ["model.terra.classic__ez_anchor_bonds"], "source.terra.anchor.borrows": ["model.terra.classic__ez_anchor_borrows"], "source.terra.anchor.burns": ["model.terra.classic__ez_anchor_burns"], "source.terra.anchor.collateral": ["model.terra.classic__ez_anchor_collateral"], "source.terra.anchor.deposits": ["model.terra.classic__ez_anchor_deposits"], "source.terra.anchor.gov_staking": ["model.terra.classic__ez_anchor_gov_staking"], "source.terra.anchor.gov_submit_proposal": ["model.terra.classic__ez_anchor_gov_submit_proposal"], "source.terra.anchor.gov_vote": ["model.terra.classic__ez_anchor_gov_vote"], "source.terra.anchor.liquidations": ["model.terra.classic__ez_anchor_liquidations"], "source.terra.anchor.redeem": ["model.terra.classic__ez_anchor_redeem"], "source.terra.anchor.repay": ["model.terra.classic__ez_anchor_repay"], "source.terra.anchor.reward_claims": ["model.terra.classic__ez_anchor_reward_claims"], "source.terra.astroport.pool_reserves": ["model.terra.classic__dim_astroport_pool_reserves"], "source.terra.astroport.swaps": ["model.terra.classic__ez_astroport_swaps"], "source.terra.gold.terra_address_labels": [], "source.terra.gold.terra_address_tags": [], "source.terra.gold.terra_daily_balances": [], "source.terra.gold.terra_prices": [], "source.terra.terra.airdrop_claims": ["model.terra.classic__ez_airdrop_claims"], "source.terra.terra.daily_balances": ["model.terra.classic__dim_daily_balances"], "source.terra.terra.gov_submit_proposal": ["model.terra.classic__ez_gov_submit_proposal"], "source.terra.terra.gov_vote": ["model.terra.classic__ez_gov_vote"], "source.terra.terra.nft_metadata": ["model.terra.classic__dim_nft_metadata"], "source.terra.terra.oracle_prices": ["model.terra.classic__dim_oracle_prices"], "source.terra.terra.reward": ["model.terra.classic__ez_reward"], "source.terra.terra.staking": ["model.terra.classic__ez_staking"], "source.terra.terra.swaps": ["model.terra.classic__ez_swaps"], "source.terra.terra.tax_rate": ["model.terra.classic__dim_tax_rate"], "source.terra.terra.transfers": ["model.terra.classic__ez_transfers"], "source.terra.terra.validator_labels": ["model.terra.classic__dim_validator_labels"], "source.terra.terra.validator_voting_power": ["model.terra.classic__dim_validator_voting_power"], "source.terra.terraswap.lp_actions": ["model.terra.classic__ez_terraswap_lp_actions"], "source.terra.terraswap.lp_stake": ["model.terra.classic__ez_terraswap_lp_stake"], "source.terra.terraswap.pool_reserves": ["model.terra.classic__dim_terraswap_pool_reserves"], "source.terra.terraswap.swaps": ["model.terra.classic__ez_terraswap_swaps"], "source.terra.terra_sv.blocks": ["model.terra.classic__fact_blocks"], "source.terra.terra_sv.labels": ["model.terra.classic__dim_labels"], "source.terra.terra_sv.msgs": ["model.terra.classic__fact_messages"], "source.terra.terra_sv.msg_events": ["model.terra.classic__fact_message_events"], "source.terra.terra_sv.transactions": ["model.terra.classic__fact_transactions"], "source.terra.terra_sv.transitions": ["model.terra.classic__fact_transitions"], "source.terra.labels.address_labels": ["model.terra.core__dim_address_labels"]}}